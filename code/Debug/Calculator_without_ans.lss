
Calculator_without_ans.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00002f5c  00002fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ba8  00000000  00000000  0000301c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cfb  00000000  00000000  00004bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  000058bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001af  00000000  00000000  00005a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fce  00000000  00000000  00005bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c9  00000000  00000000  00007bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f33  00000000  00000000  00008c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00009bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f9  00000000  00000000  00009d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000992  00000000  00000000  0000a051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a9e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2f 13 	call	0x265e	; 0x265e <main>
      7a:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__muldi3>:
      82:	a0 e3       	ldi	r26, 0x30	; 48
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e7 e4       	ldi	r30, 0x47	; 71
      88:	f0 e0       	ldi	r31, 0x00	; 0
      8a:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__>
      8e:	a8 e0       	ldi	r26, 0x08	; 8
      90:	4e 01       	movw	r8, r28
      92:	08 94       	sec
      94:	81 1c       	adc	r8, r1
      96:	91 1c       	adc	r9, r1
      98:	f4 01       	movw	r30, r8
      9a:	ba 2f       	mov	r27, r26
      9c:	11 92       	st	Z+, r1
      9e:	ba 95       	dec	r27
      a0:	e9 f7       	brne	.-6      	; 0x9c <__muldi3+0x1a>
      a2:	29 83       	std	Y+1, r18	; 0x01
      a4:	3a 83       	std	Y+2, r19	; 0x02
      a6:	4b 83       	std	Y+3, r20	; 0x03
      a8:	5c 83       	std	Y+4, r21	; 0x04
      aa:	6d 83       	std	Y+5, r22	; 0x05
      ac:	7e 83       	std	Y+6, r23	; 0x06
      ae:	8f 83       	std	Y+7, r24	; 0x07
      b0:	98 87       	std	Y+8, r25	; 0x08
      b2:	ce 01       	movw	r24, r28
      b4:	09 96       	adiw	r24, 0x09	; 9
      b6:	fc 01       	movw	r30, r24
      b8:	11 92       	st	Z+, r1
      ba:	aa 95       	dec	r26
      bc:	e9 f7       	brne	.-6      	; 0xb8 <__muldi3+0x36>
      be:	a9 86       	std	Y+9, r10	; 0x09
      c0:	ba 86       	std	Y+10, r11	; 0x0a
      c2:	cb 86       	std	Y+11, r12	; 0x0b
      c4:	dc 86       	std	Y+12, r13	; 0x0c
      c6:	ed 86       	std	Y+13, r14	; 0x0d
      c8:	fe 86       	std	Y+14, r15	; 0x0e
      ca:	0f 87       	std	Y+15, r16	; 0x0f
      cc:	18 8b       	std	Y+16, r17	; 0x10
      ce:	29 81       	ldd	r18, Y+1	; 0x01
      d0:	3a 81       	ldd	r19, Y+2	; 0x02
      d2:	4b 81       	ldd	r20, Y+3	; 0x03
      d4:	5c 81       	ldd	r21, Y+4	; 0x04
      d6:	2d a7       	std	Y+45, r18	; 0x2d
      d8:	3e a7       	std	Y+46, r19	; 0x2e
      da:	4f a7       	std	Y+47, r20	; 0x2f
      dc:	58 ab       	std	Y+48, r21	; 0x30
      de:	79 01       	movw	r14, r18
      e0:	8a 01       	movw	r16, r20
      e2:	8f ef       	ldi	r24, 0xFF	; 255
      e4:	9f ef       	ldi	r25, 0xFF	; 255
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e8 22       	and	r14, r24
      ec:	f9 22       	and	r15, r25
      ee:	0a 23       	and	r16, r26
      f0:	1b 23       	and	r17, r27
      f2:	1a 01       	movw	r2, r20
      f4:	44 24       	eor	r4, r4
      f6:	55 24       	eor	r5, r5
      f8:	29 85       	ldd	r18, Y+9	; 0x09
      fa:	3a 85       	ldd	r19, Y+10	; 0x0a
      fc:	4b 85       	ldd	r20, Y+11	; 0x0b
      fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     100:	29 a7       	std	Y+41, r18	; 0x29
     102:	3a a7       	std	Y+42, r19	; 0x2a
     104:	4b a7       	std	Y+43, r20	; 0x2b
     106:	5c a7       	std	Y+44, r21	; 0x2c
     108:	59 01       	movw	r10, r18
     10a:	6a 01       	movw	r12, r20
     10c:	a8 22       	and	r10, r24
     10e:	b9 22       	and	r11, r25
     110:	ca 22       	and	r12, r26
     112:	db 22       	and	r13, r27
     114:	3a 01       	movw	r6, r20
     116:	88 24       	eor	r8, r8
     118:	99 24       	eor	r9, r9
     11a:	c6 01       	movw	r24, r12
     11c:	b5 01       	movw	r22, r10
     11e:	a8 01       	movw	r20, r16
     120:	97 01       	movw	r18, r14
     122:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsi3>
     126:	6d a3       	std	Y+37, r22	; 0x25
     128:	7e a3       	std	Y+38, r23	; 0x26
     12a:	8f a3       	std	Y+39, r24	; 0x27
     12c:	98 a7       	std	Y+40, r25	; 0x28
     12e:	c4 01       	movw	r24, r8
     130:	b3 01       	movw	r22, r6
     132:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsi3>
     136:	69 a3       	std	Y+33, r22	; 0x21
     138:	7a a3       	std	Y+34, r23	; 0x22
     13a:	8b a3       	std	Y+35, r24	; 0x23
     13c:	9c a3       	std	Y+36, r25	; 0x24
     13e:	c6 01       	movw	r24, r12
     140:	b5 01       	movw	r22, r10
     142:	a2 01       	movw	r20, r4
     144:	91 01       	movw	r18, r2
     146:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsi3>
     14a:	7b 01       	movw	r14, r22
     14c:	8c 01       	movw	r16, r24
     14e:	c4 01       	movw	r24, r8
     150:	b3 01       	movw	r22, r6
     152:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsi3>
     156:	5b 01       	movw	r10, r22
     158:	6c 01       	movw	r12, r24
     15a:	89 a1       	ldd	r24, Y+33	; 0x21
     15c:	9a a1       	ldd	r25, Y+34	; 0x22
     15e:	ab a1       	ldd	r26, Y+35	; 0x23
     160:	bc a1       	ldd	r27, Y+36	; 0x24
     162:	8e 0d       	add	r24, r14
     164:	9f 1d       	adc	r25, r15
     166:	a0 1f       	adc	r26, r16
     168:	b1 1f       	adc	r27, r17
     16a:	89 a3       	std	Y+33, r24	; 0x21
     16c:	9a a3       	std	Y+34, r25	; 0x22
     16e:	ab a3       	std	Y+35, r26	; 0x23
     170:	bc a3       	std	Y+36, r27	; 0x24
     172:	2d a1       	ldd	r18, Y+37	; 0x25
     174:	3e a1       	ldd	r19, Y+38	; 0x26
     176:	4f a1       	ldd	r20, Y+39	; 0x27
     178:	58 a5       	ldd	r21, Y+40	; 0x28
     17a:	ca 01       	movw	r24, r20
     17c:	aa 27       	eor	r26, r26
     17e:	bb 27       	eor	r27, r27
     180:	29 a1       	ldd	r18, Y+33	; 0x21
     182:	3a a1       	ldd	r19, Y+34	; 0x22
     184:	4b a1       	ldd	r20, Y+35	; 0x23
     186:	5c a1       	ldd	r21, Y+36	; 0x24
     188:	28 0f       	add	r18, r24
     18a:	39 1f       	adc	r19, r25
     18c:	4a 1f       	adc	r20, r26
     18e:	5b 1f       	adc	r21, r27
     190:	29 a3       	std	Y+33, r18	; 0x21
     192:	3a a3       	std	Y+34, r19	; 0x22
     194:	4b a3       	std	Y+35, r20	; 0x23
     196:	5c a3       	std	Y+36, r21	; 0x24
     198:	2e 15       	cp	r18, r14
     19a:	3f 05       	cpc	r19, r15
     19c:	40 07       	cpc	r20, r16
     19e:	51 07       	cpc	r21, r17
     1a0:	40 f4       	brcc	.+16     	; 0x1b2 <__muldi3+0x130>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	a1 e0       	ldi	r26, 0x01	; 1
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	a8 0e       	add	r10, r24
     1ac:	b9 1e       	adc	r11, r25
     1ae:	ca 1e       	adc	r12, r26
     1b0:	db 1e       	adc	r13, r27
     1b2:	89 a1       	ldd	r24, Y+33	; 0x21
     1b4:	9a a1       	ldd	r25, Y+34	; 0x22
     1b6:	ab a1       	ldd	r26, Y+35	; 0x23
     1b8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ba:	9d 01       	movw	r18, r26
     1bc:	44 27       	eor	r20, r20
     1be:	55 27       	eor	r21, r21
     1c0:	2a 0d       	add	r18, r10
     1c2:	3b 1d       	adc	r19, r11
     1c4:	4c 1d       	adc	r20, r12
     1c6:	5d 1d       	adc	r21, r13
     1c8:	2d 8f       	std	Y+29, r18	; 0x1d
     1ca:	3e 8f       	std	Y+30, r19	; 0x1e
     1cc:	4f 8f       	std	Y+31, r20	; 0x1f
     1ce:	58 a3       	std	Y+32, r21	; 0x20
     1d0:	6c 01       	movw	r12, r24
     1d2:	bb 24       	eor	r11, r11
     1d4:	aa 24       	eor	r10, r10
     1d6:	8d a1       	ldd	r24, Y+37	; 0x25
     1d8:	9e a1       	ldd	r25, Y+38	; 0x26
     1da:	af a1       	ldd	r26, Y+39	; 0x27
     1dc:	b8 a5       	ldd	r27, Y+40	; 0x28
     1de:	a0 70       	andi	r26, 0x00	; 0
     1e0:	b0 70       	andi	r27, 0x00	; 0
     1e2:	a8 0e       	add	r10, r24
     1e4:	b9 1e       	adc	r11, r25
     1e6:	ca 1e       	adc	r12, r26
     1e8:	db 1e       	adc	r13, r27
     1ea:	a9 8e       	std	Y+25, r10	; 0x19
     1ec:	ba 8e       	std	Y+26, r11	; 0x1a
     1ee:	cb 8e       	std	Y+27, r12	; 0x1b
     1f0:	dc 8e       	std	Y+28, r13	; 0x1c
     1f2:	9a 8c       	ldd	r9, Y+26	; 0x1a
     1f4:	8b 8c       	ldd	r8, Y+27	; 0x1b
     1f6:	7c 8c       	ldd	r7, Y+28	; 0x1c
     1f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     1fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
     1fc:	78 a1       	ldd	r23, Y+32	; 0x20
     1fe:	fe 01       	movw	r30, r28
     200:	71 96       	adiw	r30, 0x11	; 17
     202:	88 e0       	ldi	r24, 0x08	; 8
     204:	df 01       	movw	r26, r30
     206:	1d 92       	st	X+, r1
     208:	8a 95       	dec	r24
     20a:	e9 f7       	brne	.-6      	; 0x206 <__muldi3+0x184>
     20c:	2d 8b       	std	Y+21, r18	; 0x15
     20e:	9e 8b       	std	Y+22, r25	; 0x16
     210:	6f 8b       	std	Y+23, r22	; 0x17
     212:	78 8f       	std	Y+24, r23	; 0x18
     214:	2d 85       	ldd	r18, Y+13	; 0x0d
     216:	3e 85       	ldd	r19, Y+14	; 0x0e
     218:	4f 85       	ldd	r20, Y+15	; 0x0f
     21a:	58 89       	ldd	r21, Y+16	; 0x10
     21c:	6d a5       	ldd	r22, Y+45	; 0x2d
     21e:	7e a5       	ldd	r23, Y+46	; 0x2e
     220:	8f a5       	ldd	r24, Y+47	; 0x2f
     222:	98 a9       	ldd	r25, Y+48	; 0x30
     224:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsi3>
     228:	7b 01       	movw	r14, r22
     22a:	8c 01       	movw	r16, r24
     22c:	2d 81       	ldd	r18, Y+5	; 0x05
     22e:	3e 81       	ldd	r19, Y+6	; 0x06
     230:	4f 81       	ldd	r20, Y+7	; 0x07
     232:	58 85       	ldd	r21, Y+8	; 0x08
     234:	69 a5       	ldd	r22, Y+41	; 0x29
     236:	7a a5       	ldd	r23, Y+42	; 0x2a
     238:	8b a5       	ldd	r24, Y+43	; 0x2b
     23a:	9c a5       	ldd	r25, Y+44	; 0x2c
     23c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsi3>
     240:	e6 0e       	add	r14, r22
     242:	f7 1e       	adc	r15, r23
     244:	08 1f       	adc	r16, r24
     246:	19 1f       	adc	r17, r25
     248:	6d 89       	ldd	r22, Y+21	; 0x15
     24a:	7e 89       	ldd	r23, Y+22	; 0x16
     24c:	8f 89       	ldd	r24, Y+23	; 0x17
     24e:	98 8d       	ldd	r25, Y+24	; 0x18
     250:	6e 0d       	add	r22, r14
     252:	7f 1d       	adc	r23, r15
     254:	80 1f       	adc	r24, r16
     256:	91 1f       	adc	r25, r17
     258:	6d 8b       	std	Y+21, r22	; 0x15
     25a:	7e 8b       	std	Y+22, r23	; 0x16
     25c:	8f 8b       	std	Y+23, r24	; 0x17
     25e:	98 8f       	std	Y+24, r25	; 0x18
     260:	ee 89       	ldd	r30, Y+22	; 0x16
     262:	2a 2d       	mov	r18, r10
     264:	39 2d       	mov	r19, r9
     266:	48 2d       	mov	r20, r8
     268:	57 2d       	mov	r21, r7
     26a:	7e 2f       	mov	r23, r30
     26c:	8f 89       	ldd	r24, Y+23	; 0x17
     26e:	98 8d       	ldd	r25, Y+24	; 0x18
     270:	e0 96       	adiw	r28, 0x30	; 48
     272:	e2 e1       	ldi	r30, 0x12	; 18
     274:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__>

00000278 <__ashldi3>:
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	60 97       	sbiw	r28, 0x10	; 16
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	a8 2f       	mov	r26, r24
     294:	00 23       	and	r16, r16
     296:	09 f4       	brne	.+2      	; 0x29a <__ashldi3+0x22>
     298:	61 c0       	rjmp	.+194    	; 0x35c <__ashldi3+0xe4>
     29a:	7e 01       	movw	r14, r28
     29c:	08 94       	sec
     29e:	e1 1c       	adc	r14, r1
     2a0:	f1 1c       	adc	r15, r1
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	f7 01       	movw	r30, r14
     2a6:	11 92       	st	Z+, r1
     2a8:	8a 95       	dec	r24
     2aa:	e9 f7       	brne	.-6      	; 0x2a6 <__ashldi3+0x2e>
     2ac:	29 83       	std	Y+1, r18	; 0x01
     2ae:	3a 83       	std	Y+2, r19	; 0x02
     2b0:	4b 83       	std	Y+3, r20	; 0x03
     2b2:	5c 83       	std	Y+4, r21	; 0x04
     2b4:	6d 83       	std	Y+5, r22	; 0x05
     2b6:	7e 83       	std	Y+6, r23	; 0x06
     2b8:	af 83       	std	Y+7, r26	; 0x07
     2ba:	98 87       	std	Y+8, r25	; 0x08
     2bc:	80 e2       	ldi	r24, 0x20	; 32
     2be:	80 1b       	sub	r24, r16
     2c0:	e8 2f       	mov	r30, r24
     2c2:	ff 27       	eor	r31, r31
     2c4:	e7 fd       	sbrc	r30, 7
     2c6:	f0 95       	com	r31
     2c8:	49 81       	ldd	r20, Y+1	; 0x01
     2ca:	5a 81       	ldd	r21, Y+2	; 0x02
     2cc:	6b 81       	ldd	r22, Y+3	; 0x03
     2ce:	7c 81       	ldd	r23, Y+4	; 0x04
     2d0:	18 16       	cp	r1, r24
     2d2:	84 f0       	brlt	.+32     	; 0x2f4 <__ashldi3+0x7c>
     2d4:	19 86       	std	Y+9, r1	; 0x09
     2d6:	1a 86       	std	Y+10, r1	; 0x0a
     2d8:	1b 86       	std	Y+11, r1	; 0x0b
     2da:	1c 86       	std	Y+12, r1	; 0x0c
     2dc:	88 27       	eor	r24, r24
     2de:	99 27       	eor	r25, r25
     2e0:	8e 1b       	sub	r24, r30
     2e2:	9f 0b       	sbc	r25, r31
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <__ashldi3+0x76>
     2e6:	44 0f       	add	r20, r20
     2e8:	55 1f       	adc	r21, r21
     2ea:	66 1f       	adc	r22, r22
     2ec:	77 1f       	adc	r23, r23
     2ee:	8a 95       	dec	r24
     2f0:	d2 f7       	brpl	.-12     	; 0x2e6 <__ashldi3+0x6e>
     2f2:	28 c0       	rjmp	.+80     	; 0x344 <__ashldi3+0xcc>
     2f4:	20 2f       	mov	r18, r16
     2f6:	33 27       	eor	r19, r19
     2f8:	27 fd       	sbrc	r18, 7
     2fa:	30 95       	com	r19
     2fc:	db 01       	movw	r26, r22
     2fe:	ca 01       	movw	r24, r20
     300:	02 2e       	mov	r0, r18
     302:	04 c0       	rjmp	.+8      	; 0x30c <__ashldi3+0x94>
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	aa 1f       	adc	r26, r26
     30a:	bb 1f       	adc	r27, r27
     30c:	0a 94       	dec	r0
     30e:	d2 f7       	brpl	.-12     	; 0x304 <__ashldi3+0x8c>
     310:	89 87       	std	Y+9, r24	; 0x09
     312:	9a 87       	std	Y+10, r25	; 0x0a
     314:	ab 87       	std	Y+11, r26	; 0x0b
     316:	bc 87       	std	Y+12, r27	; 0x0c
     318:	04 c0       	rjmp	.+8      	; 0x322 <__ashldi3+0xaa>
     31a:	76 95       	lsr	r23
     31c:	67 95       	ror	r22
     31e:	57 95       	ror	r21
     320:	47 95       	ror	r20
     322:	ea 95       	dec	r30
     324:	d2 f7       	brpl	.-12     	; 0x31a <__ashldi3+0xa2>
     326:	8d 81       	ldd	r24, Y+5	; 0x05
     328:	9e 81       	ldd	r25, Y+6	; 0x06
     32a:	af 81       	ldd	r26, Y+7	; 0x07
     32c:	b8 85       	ldd	r27, Y+8	; 0x08
     32e:	04 c0       	rjmp	.+8      	; 0x338 <__ashldi3+0xc0>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	aa 1f       	adc	r26, r26
     336:	bb 1f       	adc	r27, r27
     338:	2a 95       	dec	r18
     33a:	d2 f7       	brpl	.-12     	; 0x330 <__ashldi3+0xb8>
     33c:	48 2b       	or	r20, r24
     33e:	59 2b       	or	r21, r25
     340:	6a 2b       	or	r22, r26
     342:	7b 2b       	or	r23, r27
     344:	4d 87       	std	Y+13, r20	; 0x0d
     346:	5e 87       	std	Y+14, r21	; 0x0e
     348:	6f 87       	std	Y+15, r22	; 0x0f
     34a:	78 8b       	std	Y+16, r23	; 0x10
     34c:	29 85       	ldd	r18, Y+9	; 0x09
     34e:	3a 85       	ldd	r19, Y+10	; 0x0a
     350:	4b 85       	ldd	r20, Y+11	; 0x0b
     352:	5c 85       	ldd	r21, Y+12	; 0x0c
     354:	6d 85       	ldd	r22, Y+13	; 0x0d
     356:	7e 85       	ldd	r23, Y+14	; 0x0e
     358:	af 85       	ldd	r26, Y+15	; 0x0f
     35a:	98 89       	ldd	r25, Y+16	; 0x10
     35c:	8a 2f       	mov	r24, r26
     35e:	60 96       	adiw	r28, 0x10	; 16
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	cf 91       	pop	r28
     36c:	df 91       	pop	r29
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	08 95       	ret

00000376 <__fixunssfsi>:
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	7b 01       	movw	r14, r22
     380:	8c 01       	movw	r16, r24
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	5f e4       	ldi	r21, 0x4F	; 79
     38a:	0e 94 bb 04 	call	0x976	; 0x976 <__gesf2>
     38e:	88 23       	and	r24, r24
     390:	8c f0       	brlt	.+34     	; 0x3b4 <__fixunssfsi+0x3e>
     392:	c8 01       	movw	r24, r16
     394:	b7 01       	movw	r22, r14
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	5f e4       	ldi	r21, 0x4F	; 79
     39e:	0e 94 33 03 	call	0x666	; 0x666 <__subsf3>
     3a2:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fixsfsi>
     3a6:	9b 01       	movw	r18, r22
     3a8:	ac 01       	movw	r20, r24
     3aa:	20 50       	subi	r18, 0x00	; 0
     3ac:	30 40       	sbci	r19, 0x00	; 0
     3ae:	40 40       	sbci	r20, 0x00	; 0
     3b0:	50 48       	sbci	r21, 0x80	; 128
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <__fixunssfsi+0x4a>
     3b4:	c8 01       	movw	r24, r16
     3b6:	b7 01       	movw	r22, r14
     3b8:	0e 94 1b 05 	call	0xa36	; 0xa36 <__fixsfsi>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	b9 01       	movw	r22, r18
     3c2:	ca 01       	movw	r24, r20
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	08 95       	ret

000003ce <_fpadd_parts>:
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	ed ee       	ldi	r30, 0xED	; 237
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__>
     3da:	dc 01       	movw	r26, r24
     3dc:	2b 01       	movw	r4, r22
     3de:	fa 01       	movw	r30, r20
     3e0:	9c 91       	ld	r25, X
     3e2:	92 30       	cpi	r25, 0x02	; 2
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <_fpadd_parts+0x1a>
     3e6:	39 c1       	rjmp	.+626    	; 0x65a <__stack+0x1fb>
     3e8:	eb 01       	movw	r28, r22
     3ea:	88 81       	ld	r24, Y
     3ec:	82 30       	cpi	r24, 0x02	; 2
     3ee:	08 f4       	brcc	.+2      	; 0x3f2 <_fpadd_parts+0x24>
     3f0:	33 c1       	rjmp	.+614    	; 0x658 <__stack+0x1f9>
     3f2:	94 30       	cpi	r25, 0x04	; 4
     3f4:	69 f4       	brne	.+26     	; 0x410 <_fpadd_parts+0x42>
     3f6:	84 30       	cpi	r24, 0x04	; 4
     3f8:	09 f0       	breq	.+2      	; 0x3fc <_fpadd_parts+0x2e>
     3fa:	2f c1       	rjmp	.+606    	; 0x65a <__stack+0x1fb>
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	9c 91       	ld	r25, X
     400:	11 97       	sbiw	r26, 0x01	; 1
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	98 17       	cp	r25, r24
     406:	09 f4       	brne	.+2      	; 0x40a <_fpadd_parts+0x3c>
     408:	28 c1       	rjmp	.+592    	; 0x65a <__stack+0x1fb>
     40a:	a1 ea       	ldi	r26, 0xA1	; 161
     40c:	b0 e0       	ldi	r27, 0x00	; 0
     40e:	25 c1       	rjmp	.+586    	; 0x65a <__stack+0x1fb>
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	09 f4       	brne	.+2      	; 0x416 <_fpadd_parts+0x48>
     414:	21 c1       	rjmp	.+578    	; 0x658 <__stack+0x1f9>
     416:	82 30       	cpi	r24, 0x02	; 2
     418:	a9 f4       	brne	.+42     	; 0x444 <_fpadd_parts+0x76>
     41a:	92 30       	cpi	r25, 0x02	; 2
     41c:	09 f0       	breq	.+2      	; 0x420 <_fpadd_parts+0x52>
     41e:	1d c1       	rjmp	.+570    	; 0x65a <__stack+0x1fb>
     420:	9a 01       	movw	r18, r20
     422:	ad 01       	movw	r20, r26
     424:	88 e0       	ldi	r24, 0x08	; 8
     426:	ea 01       	movw	r28, r20
     428:	09 90       	ld	r0, Y+
     42a:	ae 01       	movw	r20, r28
     42c:	e9 01       	movw	r28, r18
     42e:	09 92       	st	Y+, r0
     430:	9e 01       	movw	r18, r28
     432:	81 50       	subi	r24, 0x01	; 1
     434:	c1 f7       	brne	.-16     	; 0x426 <_fpadd_parts+0x58>
     436:	e2 01       	movw	r28, r4
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	9c 91       	ld	r25, X
     43e:	89 23       	and	r24, r25
     440:	81 83       	std	Z+1, r24	; 0x01
     442:	08 c1       	rjmp	.+528    	; 0x654 <__stack+0x1f5>
     444:	92 30       	cpi	r25, 0x02	; 2
     446:	09 f4       	brne	.+2      	; 0x44a <_fpadd_parts+0x7c>
     448:	07 c1       	rjmp	.+526    	; 0x658 <__stack+0x1f9>
     44a:	12 96       	adiw	r26, 0x02	; 2
     44c:	2d 90       	ld	r2, X+
     44e:	3c 90       	ld	r3, X
     450:	13 97       	sbiw	r26, 0x03	; 3
     452:	eb 01       	movw	r28, r22
     454:	8a 81       	ldd	r24, Y+2	; 0x02
     456:	9b 81       	ldd	r25, Y+3	; 0x03
     458:	14 96       	adiw	r26, 0x04	; 4
     45a:	ad 90       	ld	r10, X+
     45c:	bd 90       	ld	r11, X+
     45e:	cd 90       	ld	r12, X+
     460:	dc 90       	ld	r13, X
     462:	17 97       	sbiw	r26, 0x07	; 7
     464:	ec 80       	ldd	r14, Y+4	; 0x04
     466:	fd 80       	ldd	r15, Y+5	; 0x05
     468:	0e 81       	ldd	r16, Y+6	; 0x06
     46a:	1f 81       	ldd	r17, Y+7	; 0x07
     46c:	91 01       	movw	r18, r2
     46e:	28 1b       	sub	r18, r24
     470:	39 0b       	sbc	r19, r25
     472:	b9 01       	movw	r22, r18
     474:	37 ff       	sbrs	r19, 7
     476:	04 c0       	rjmp	.+8      	; 0x480 <__stack+0x21>
     478:	66 27       	eor	r22, r22
     47a:	77 27       	eor	r23, r23
     47c:	62 1b       	sub	r22, r18
     47e:	73 0b       	sbc	r23, r19
     480:	60 32       	cpi	r22, 0x20	; 32
     482:	71 05       	cpc	r23, r1
     484:	0c f0       	brlt	.+2      	; 0x488 <__stack+0x29>
     486:	61 c0       	rjmp	.+194    	; 0x54a <__stack+0xeb>
     488:	12 16       	cp	r1, r18
     48a:	13 06       	cpc	r1, r19
     48c:	6c f5       	brge	.+90     	; 0x4e8 <__stack+0x89>
     48e:	37 01       	movw	r6, r14
     490:	48 01       	movw	r8, r16
     492:	06 2e       	mov	r0, r22
     494:	04 c0       	rjmp	.+8      	; 0x49e <__stack+0x3f>
     496:	96 94       	lsr	r9
     498:	87 94       	ror	r8
     49a:	77 94       	ror	r7
     49c:	67 94       	ror	r6
     49e:	0a 94       	dec	r0
     4a0:	d2 f7       	brpl	.-12     	; 0x496 <__stack+0x37>
     4a2:	21 e0       	ldi	r18, 0x01	; 1
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__stack+0x55>
     4ac:	22 0f       	add	r18, r18
     4ae:	33 1f       	adc	r19, r19
     4b0:	44 1f       	adc	r20, r20
     4b2:	55 1f       	adc	r21, r21
     4b4:	6a 95       	dec	r22
     4b6:	d2 f7       	brpl	.-12     	; 0x4ac <__stack+0x4d>
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	30 40       	sbci	r19, 0x00	; 0
     4bc:	40 40       	sbci	r20, 0x00	; 0
     4be:	50 40       	sbci	r21, 0x00	; 0
     4c0:	2e 21       	and	r18, r14
     4c2:	3f 21       	and	r19, r15
     4c4:	40 23       	and	r20, r16
     4c6:	51 23       	and	r21, r17
     4c8:	21 15       	cp	r18, r1
     4ca:	31 05       	cpc	r19, r1
     4cc:	41 05       	cpc	r20, r1
     4ce:	51 05       	cpc	r21, r1
     4d0:	21 f0       	breq	.+8      	; 0x4da <__stack+0x7b>
     4d2:	21 e0       	ldi	r18, 0x01	; 1
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	79 01       	movw	r14, r18
     4dc:	8a 01       	movw	r16, r20
     4de:	e6 28       	or	r14, r6
     4e0:	f7 28       	or	r15, r7
     4e2:	08 29       	or	r16, r8
     4e4:	19 29       	or	r17, r9
     4e6:	3c c0       	rjmp	.+120    	; 0x560 <__stack+0x101>
     4e8:	23 2b       	or	r18, r19
     4ea:	d1 f1       	breq	.+116    	; 0x560 <__stack+0x101>
     4ec:	26 0e       	add	r2, r22
     4ee:	37 1e       	adc	r3, r23
     4f0:	35 01       	movw	r6, r10
     4f2:	46 01       	movw	r8, r12
     4f4:	06 2e       	mov	r0, r22
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <__stack+0xa1>
     4f8:	96 94       	lsr	r9
     4fa:	87 94       	ror	r8
     4fc:	77 94       	ror	r7
     4fe:	67 94       	ror	r6
     500:	0a 94       	dec	r0
     502:	d2 f7       	brpl	.-12     	; 0x4f8 <__stack+0x99>
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	04 c0       	rjmp	.+8      	; 0x516 <__stack+0xb7>
     50e:	22 0f       	add	r18, r18
     510:	33 1f       	adc	r19, r19
     512:	44 1f       	adc	r20, r20
     514:	55 1f       	adc	r21, r21
     516:	6a 95       	dec	r22
     518:	d2 f7       	brpl	.-12     	; 0x50e <__stack+0xaf>
     51a:	21 50       	subi	r18, 0x01	; 1
     51c:	30 40       	sbci	r19, 0x00	; 0
     51e:	40 40       	sbci	r20, 0x00	; 0
     520:	50 40       	sbci	r21, 0x00	; 0
     522:	2a 21       	and	r18, r10
     524:	3b 21       	and	r19, r11
     526:	4c 21       	and	r20, r12
     528:	5d 21       	and	r21, r13
     52a:	21 15       	cp	r18, r1
     52c:	31 05       	cpc	r19, r1
     52e:	41 05       	cpc	r20, r1
     530:	51 05       	cpc	r21, r1
     532:	21 f0       	breq	.+8      	; 0x53c <__stack+0xdd>
     534:	21 e0       	ldi	r18, 0x01	; 1
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	59 01       	movw	r10, r18
     53e:	6a 01       	movw	r12, r20
     540:	a6 28       	or	r10, r6
     542:	b7 28       	or	r11, r7
     544:	c8 28       	or	r12, r8
     546:	d9 28       	or	r13, r9
     548:	0b c0       	rjmp	.+22     	; 0x560 <__stack+0x101>
     54a:	82 15       	cp	r24, r2
     54c:	93 05       	cpc	r25, r3
     54e:	2c f0       	brlt	.+10     	; 0x55a <__stack+0xfb>
     550:	1c 01       	movw	r2, r24
     552:	aa 24       	eor	r10, r10
     554:	bb 24       	eor	r11, r11
     556:	65 01       	movw	r12, r10
     558:	03 c0       	rjmp	.+6      	; 0x560 <__stack+0x101>
     55a:	ee 24       	eor	r14, r14
     55c:	ff 24       	eor	r15, r15
     55e:	87 01       	movw	r16, r14
     560:	11 96       	adiw	r26, 0x01	; 1
     562:	9c 91       	ld	r25, X
     564:	d2 01       	movw	r26, r4
     566:	11 96       	adiw	r26, 0x01	; 1
     568:	8c 91       	ld	r24, X
     56a:	98 17       	cp	r25, r24
     56c:	09 f4       	brne	.+2      	; 0x570 <__stack+0x111>
     56e:	45 c0       	rjmp	.+138    	; 0x5fa <__stack+0x19b>
     570:	99 23       	and	r25, r25
     572:	39 f0       	breq	.+14     	; 0x582 <__stack+0x123>
     574:	a8 01       	movw	r20, r16
     576:	97 01       	movw	r18, r14
     578:	2a 19       	sub	r18, r10
     57a:	3b 09       	sbc	r19, r11
     57c:	4c 09       	sbc	r20, r12
     57e:	5d 09       	sbc	r21, r13
     580:	06 c0       	rjmp	.+12     	; 0x58e <__stack+0x12f>
     582:	a6 01       	movw	r20, r12
     584:	95 01       	movw	r18, r10
     586:	2e 19       	sub	r18, r14
     588:	3f 09       	sbc	r19, r15
     58a:	40 0b       	sbc	r20, r16
     58c:	51 0b       	sbc	r21, r17
     58e:	57 fd       	sbrc	r21, 7
     590:	08 c0       	rjmp	.+16     	; 0x5a2 <__stack+0x143>
     592:	11 82       	std	Z+1, r1	; 0x01
     594:	33 82       	std	Z+3, r3	; 0x03
     596:	22 82       	std	Z+2, r2	; 0x02
     598:	24 83       	std	Z+4, r18	; 0x04
     59a:	35 83       	std	Z+5, r19	; 0x05
     59c:	46 83       	std	Z+6, r20	; 0x06
     59e:	57 83       	std	Z+7, r21	; 0x07
     5a0:	1d c0       	rjmp	.+58     	; 0x5dc <__stack+0x17d>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	81 83       	std	Z+1, r24	; 0x01
     5a6:	33 82       	std	Z+3, r3	; 0x03
     5a8:	22 82       	std	Z+2, r2	; 0x02
     5aa:	88 27       	eor	r24, r24
     5ac:	99 27       	eor	r25, r25
     5ae:	dc 01       	movw	r26, r24
     5b0:	82 1b       	sub	r24, r18
     5b2:	93 0b       	sbc	r25, r19
     5b4:	a4 0b       	sbc	r26, r20
     5b6:	b5 0b       	sbc	r27, r21
     5b8:	84 83       	std	Z+4, r24	; 0x04
     5ba:	95 83       	std	Z+5, r25	; 0x05
     5bc:	a6 83       	std	Z+6, r26	; 0x06
     5be:	b7 83       	std	Z+7, r27	; 0x07
     5c0:	0d c0       	rjmp	.+26     	; 0x5dc <__stack+0x17d>
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	44 1f       	adc	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	24 83       	std	Z+4, r18	; 0x04
     5cc:	35 83       	std	Z+5, r19	; 0x05
     5ce:	46 83       	std	Z+6, r20	; 0x06
     5d0:	57 83       	std	Z+7, r21	; 0x07
     5d2:	82 81       	ldd	r24, Z+2	; 0x02
     5d4:	93 81       	ldd	r25, Z+3	; 0x03
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	93 83       	std	Z+3, r25	; 0x03
     5da:	82 83       	std	Z+2, r24	; 0x02
     5dc:	24 81       	ldd	r18, Z+4	; 0x04
     5de:	35 81       	ldd	r19, Z+5	; 0x05
     5e0:	46 81       	ldd	r20, Z+6	; 0x06
     5e2:	57 81       	ldd	r21, Z+7	; 0x07
     5e4:	da 01       	movw	r26, r20
     5e6:	c9 01       	movw	r24, r18
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	a1 09       	sbc	r26, r1
     5ec:	b1 09       	sbc	r27, r1
     5ee:	8f 5f       	subi	r24, 0xFF	; 255
     5f0:	9f 4f       	sbci	r25, 0xFF	; 255
     5f2:	af 4f       	sbci	r26, 0xFF	; 255
     5f4:	bf 43       	sbci	r27, 0x3F	; 63
     5f6:	28 f3       	brcs	.-54     	; 0x5c2 <__stack+0x163>
     5f8:	0b c0       	rjmp	.+22     	; 0x610 <__stack+0x1b1>
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	33 82       	std	Z+3, r3	; 0x03
     5fe:	22 82       	std	Z+2, r2	; 0x02
     600:	ea 0c       	add	r14, r10
     602:	fb 1c       	adc	r15, r11
     604:	0c 1d       	adc	r16, r12
     606:	1d 1d       	adc	r17, r13
     608:	e4 82       	std	Z+4, r14	; 0x04
     60a:	f5 82       	std	Z+5, r15	; 0x05
     60c:	06 83       	std	Z+6, r16	; 0x06
     60e:	17 83       	std	Z+7, r17	; 0x07
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	80 83       	st	Z, r24
     614:	24 81       	ldd	r18, Z+4	; 0x04
     616:	35 81       	ldd	r19, Z+5	; 0x05
     618:	46 81       	ldd	r20, Z+6	; 0x06
     61a:	57 81       	ldd	r21, Z+7	; 0x07
     61c:	57 ff       	sbrs	r21, 7
     61e:	1a c0       	rjmp	.+52     	; 0x654 <__stack+0x1f5>
     620:	c9 01       	movw	r24, r18
     622:	aa 27       	eor	r26, r26
     624:	97 fd       	sbrc	r25, 7
     626:	a0 95       	com	r26
     628:	ba 2f       	mov	r27, r26
     62a:	81 70       	andi	r24, 0x01	; 1
     62c:	90 70       	andi	r25, 0x00	; 0
     62e:	a0 70       	andi	r26, 0x00	; 0
     630:	b0 70       	andi	r27, 0x00	; 0
     632:	56 95       	lsr	r21
     634:	47 95       	ror	r20
     636:	37 95       	ror	r19
     638:	27 95       	ror	r18
     63a:	82 2b       	or	r24, r18
     63c:	93 2b       	or	r25, r19
     63e:	a4 2b       	or	r26, r20
     640:	b5 2b       	or	r27, r21
     642:	84 83       	std	Z+4, r24	; 0x04
     644:	95 83       	std	Z+5, r25	; 0x05
     646:	a6 83       	std	Z+6, r26	; 0x06
     648:	b7 83       	std	Z+7, r27	; 0x07
     64a:	82 81       	ldd	r24, Z+2	; 0x02
     64c:	93 81       	ldd	r25, Z+3	; 0x03
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	93 83       	std	Z+3, r25	; 0x03
     652:	82 83       	std	Z+2, r24	; 0x02
     654:	df 01       	movw	r26, r30
     656:	01 c0       	rjmp	.+2      	; 0x65a <__stack+0x1fb>
     658:	d2 01       	movw	r26, r4
     65a:	cd 01       	movw	r24, r26
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	e2 e1       	ldi	r30, 0x12	; 18
     662:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__>

00000666 <__subsf3>:
     666:	a0 e2       	ldi	r26, 0x20	; 32
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	e9 e3       	ldi	r30, 0x39	; 57
     66c:	f3 e0       	ldi	r31, 0x03	; 3
     66e:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     672:	69 83       	std	Y+1, r22	; 0x01
     674:	7a 83       	std	Y+2, r23	; 0x02
     676:	8b 83       	std	Y+3, r24	; 0x03
     678:	9c 83       	std	Y+4, r25	; 0x04
     67a:	2d 83       	std	Y+5, r18	; 0x05
     67c:	3e 83       	std	Y+6, r19	; 0x06
     67e:	4f 83       	std	Y+7, r20	; 0x07
     680:	58 87       	std	Y+8, r21	; 0x08
     682:	e9 e0       	ldi	r30, 0x09	; 9
     684:	ee 2e       	mov	r14, r30
     686:	f1 2c       	mov	r15, r1
     688:	ec 0e       	add	r14, r28
     68a:	fd 1e       	adc	r15, r29
     68c:	ce 01       	movw	r24, r28
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	b7 01       	movw	r22, r14
     692:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     696:	8e 01       	movw	r16, r28
     698:	0f 5e       	subi	r16, 0xEF	; 239
     69a:	1f 4f       	sbci	r17, 0xFF	; 255
     69c:	ce 01       	movw	r24, r28
     69e:	05 96       	adiw	r24, 0x05	; 5
     6a0:	b8 01       	movw	r22, r16
     6a2:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     6a6:	8a 89       	ldd	r24, Y+18	; 0x12
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	89 27       	eor	r24, r25
     6ac:	8a 8b       	std	Y+18, r24	; 0x12
     6ae:	c7 01       	movw	r24, r14
     6b0:	b8 01       	movw	r22, r16
     6b2:	ae 01       	movw	r20, r28
     6b4:	47 5e       	subi	r20, 0xE7	; 231
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_fpadd_parts>
     6bc:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     6c0:	a0 96       	adiw	r28, 0x20	; 32
     6c2:	e6 e0       	ldi	r30, 0x06	; 6
     6c4:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

000006c8 <__addsf3>:
     6c8:	a0 e2       	ldi	r26, 0x20	; 32
     6ca:	b0 e0       	ldi	r27, 0x00	; 0
     6cc:	ea e6       	ldi	r30, 0x6A	; 106
     6ce:	f3 e0       	ldi	r31, 0x03	; 3
     6d0:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     6d4:	69 83       	std	Y+1, r22	; 0x01
     6d6:	7a 83       	std	Y+2, r23	; 0x02
     6d8:	8b 83       	std	Y+3, r24	; 0x03
     6da:	9c 83       	std	Y+4, r25	; 0x04
     6dc:	2d 83       	std	Y+5, r18	; 0x05
     6de:	3e 83       	std	Y+6, r19	; 0x06
     6e0:	4f 83       	std	Y+7, r20	; 0x07
     6e2:	58 87       	std	Y+8, r21	; 0x08
     6e4:	f9 e0       	ldi	r31, 0x09	; 9
     6e6:	ef 2e       	mov	r14, r31
     6e8:	f1 2c       	mov	r15, r1
     6ea:	ec 0e       	add	r14, r28
     6ec:	fd 1e       	adc	r15, r29
     6ee:	ce 01       	movw	r24, r28
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	b7 01       	movw	r22, r14
     6f4:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     6f8:	8e 01       	movw	r16, r28
     6fa:	0f 5e       	subi	r16, 0xEF	; 239
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	ce 01       	movw	r24, r28
     700:	05 96       	adiw	r24, 0x05	; 5
     702:	b8 01       	movw	r22, r16
     704:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     708:	c7 01       	movw	r24, r14
     70a:	b8 01       	movw	r22, r16
     70c:	ae 01       	movw	r20, r28
     70e:	47 5e       	subi	r20, 0xE7	; 231
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_fpadd_parts>
     716:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     71a:	a0 96       	adiw	r28, 0x20	; 32
     71c:	e6 e0       	ldi	r30, 0x06	; 6
     71e:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

00000722 <__mulsf3>:
     722:	a0 e2       	ldi	r26, 0x20	; 32
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	e7 e9       	ldi	r30, 0x97	; 151
     728:	f3 e0       	ldi	r31, 0x03	; 3
     72a:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__prologue_saves__>
     72e:	69 83       	std	Y+1, r22	; 0x01
     730:	7a 83       	std	Y+2, r23	; 0x02
     732:	8b 83       	std	Y+3, r24	; 0x03
     734:	9c 83       	std	Y+4, r25	; 0x04
     736:	2d 83       	std	Y+5, r18	; 0x05
     738:	3e 83       	std	Y+6, r19	; 0x06
     73a:	4f 83       	std	Y+7, r20	; 0x07
     73c:	58 87       	std	Y+8, r21	; 0x08
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	be 01       	movw	r22, r28
     744:	67 5f       	subi	r22, 0xF7	; 247
     746:	7f 4f       	sbci	r23, 0xFF	; 255
     748:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     74c:	ce 01       	movw	r24, r28
     74e:	05 96       	adiw	r24, 0x05	; 5
     750:	be 01       	movw	r22, r28
     752:	6f 5e       	subi	r22, 0xEF	; 239
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     75a:	99 85       	ldd	r25, Y+9	; 0x09
     75c:	92 30       	cpi	r25, 0x02	; 2
     75e:	88 f0       	brcs	.+34     	; 0x782 <__mulsf3+0x60>
     760:	89 89       	ldd	r24, Y+17	; 0x11
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	c8 f0       	brcs	.+50     	; 0x798 <__mulsf3+0x76>
     766:	94 30       	cpi	r25, 0x04	; 4
     768:	19 f4       	brne	.+6      	; 0x770 <__mulsf3+0x4e>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	51 f4       	brne	.+20     	; 0x782 <__mulsf3+0x60>
     76e:	04 c0       	rjmp	.+8      	; 0x778 <__mulsf3+0x56>
     770:	84 30       	cpi	r24, 0x04	; 4
     772:	29 f4       	brne	.+10     	; 0x77e <__mulsf3+0x5c>
     774:	92 30       	cpi	r25, 0x02	; 2
     776:	81 f4       	brne	.+32     	; 0x798 <__mulsf3+0x76>
     778:	81 ea       	ldi	r24, 0xA1	; 161
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	c6 c0       	rjmp	.+396    	; 0x90a <__mulsf3+0x1e8>
     77e:	92 30       	cpi	r25, 0x02	; 2
     780:	49 f4       	brne	.+18     	; 0x794 <__mulsf3+0x72>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	9a 85       	ldd	r25, Y+10	; 0x0a
     786:	8a 89       	ldd	r24, Y+18	; 0x12
     788:	98 13       	cpse	r25, r24
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	2a 87       	std	Y+10, r18	; 0x0a
     78e:	ce 01       	movw	r24, r28
     790:	09 96       	adiw	r24, 0x09	; 9
     792:	bb c0       	rjmp	.+374    	; 0x90a <__mulsf3+0x1e8>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	49 f4       	brne	.+18     	; 0x7aa <__mulsf3+0x88>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	9a 85       	ldd	r25, Y+10	; 0x0a
     79c:	8a 89       	ldd	r24, Y+18	; 0x12
     79e:	98 13       	cpse	r25, r24
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	2a 8b       	std	Y+18, r18	; 0x12
     7a4:	ce 01       	movw	r24, r28
     7a6:	41 96       	adiw	r24, 0x11	; 17
     7a8:	b0 c0       	rjmp	.+352    	; 0x90a <__mulsf3+0x1e8>
     7aa:	2d 84       	ldd	r2, Y+13	; 0x0d
     7ac:	3e 84       	ldd	r3, Y+14	; 0x0e
     7ae:	4f 84       	ldd	r4, Y+15	; 0x0f
     7b0:	58 88       	ldd	r5, Y+16	; 0x10
     7b2:	6d 88       	ldd	r6, Y+21	; 0x15
     7b4:	7e 88       	ldd	r7, Y+22	; 0x16
     7b6:	8f 88       	ldd	r8, Y+23	; 0x17
     7b8:	98 8c       	ldd	r9, Y+24	; 0x18
     7ba:	ee 24       	eor	r14, r14
     7bc:	ff 24       	eor	r15, r15
     7be:	87 01       	movw	r16, r14
     7c0:	aa 24       	eor	r10, r10
     7c2:	bb 24       	eor	r11, r11
     7c4:	65 01       	movw	r12, r10
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	e0 e0       	ldi	r30, 0x00	; 0
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	c1 01       	movw	r24, r2
     7d4:	81 70       	andi	r24, 0x01	; 1
     7d6:	90 70       	andi	r25, 0x00	; 0
     7d8:	89 2b       	or	r24, r25
     7da:	e9 f0       	breq	.+58     	; 0x816 <__mulsf3+0xf4>
     7dc:	e6 0c       	add	r14, r6
     7de:	f7 1c       	adc	r15, r7
     7e0:	08 1d       	adc	r16, r8
     7e2:	19 1d       	adc	r17, r9
     7e4:	9a 01       	movw	r18, r20
     7e6:	ab 01       	movw	r20, r22
     7e8:	2a 0d       	add	r18, r10
     7ea:	3b 1d       	adc	r19, r11
     7ec:	4c 1d       	adc	r20, r12
     7ee:	5d 1d       	adc	r21, r13
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	e6 14       	cp	r14, r6
     7fa:	f7 04       	cpc	r15, r7
     7fc:	08 05       	cpc	r16, r8
     7fe:	19 05       	cpc	r17, r9
     800:	20 f4       	brcc	.+8      	; 0x80a <__mulsf3+0xe8>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	a0 e0       	ldi	r26, 0x00	; 0
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	ba 01       	movw	r22, r20
     80c:	a9 01       	movw	r20, r18
     80e:	48 0f       	add	r20, r24
     810:	59 1f       	adc	r21, r25
     812:	6a 1f       	adc	r22, r26
     814:	7b 1f       	adc	r23, r27
     816:	aa 0c       	add	r10, r10
     818:	bb 1c       	adc	r11, r11
     81a:	cc 1c       	adc	r12, r12
     81c:	dd 1c       	adc	r13, r13
     81e:	97 fe       	sbrs	r9, 7
     820:	08 c0       	rjmp	.+16     	; 0x832 <__mulsf3+0x110>
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	a8 2a       	or	r10, r24
     82c:	b9 2a       	or	r11, r25
     82e:	ca 2a       	or	r12, r26
     830:	db 2a       	or	r13, r27
     832:	31 96       	adiw	r30, 0x01	; 1
     834:	e0 32       	cpi	r30, 0x20	; 32
     836:	f1 05       	cpc	r31, r1
     838:	49 f0       	breq	.+18     	; 0x84c <__mulsf3+0x12a>
     83a:	66 0c       	add	r6, r6
     83c:	77 1c       	adc	r7, r7
     83e:	88 1c       	adc	r8, r8
     840:	99 1c       	adc	r9, r9
     842:	56 94       	lsr	r5
     844:	47 94       	ror	r4
     846:	37 94       	ror	r3
     848:	27 94       	ror	r2
     84a:	c3 cf       	rjmp	.-122    	; 0x7d2 <__mulsf3+0xb0>
     84c:	fa 85       	ldd	r31, Y+10	; 0x0a
     84e:	ea 89       	ldd	r30, Y+18	; 0x12
     850:	2b 89       	ldd	r18, Y+19	; 0x13
     852:	3c 89       	ldd	r19, Y+20	; 0x14
     854:	8b 85       	ldd	r24, Y+11	; 0x0b
     856:	9c 85       	ldd	r25, Y+12	; 0x0c
     858:	28 0f       	add	r18, r24
     85a:	39 1f       	adc	r19, r25
     85c:	2e 5f       	subi	r18, 0xFE	; 254
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	17 c0       	rjmp	.+46     	; 0x890 <__mulsf3+0x16e>
     862:	ca 01       	movw	r24, r20
     864:	81 70       	andi	r24, 0x01	; 1
     866:	90 70       	andi	r25, 0x00	; 0
     868:	89 2b       	or	r24, r25
     86a:	61 f0       	breq	.+24     	; 0x884 <__mulsf3+0x162>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e8       	ldi	r27, 0x80	; 128
     87c:	e8 2a       	or	r14, r24
     87e:	f9 2a       	or	r15, r25
     880:	0a 2b       	or	r16, r26
     882:	1b 2b       	or	r17, r27
     884:	76 95       	lsr	r23
     886:	67 95       	ror	r22
     888:	57 95       	ror	r21
     88a:	47 95       	ror	r20
     88c:	2f 5f       	subi	r18, 0xFF	; 255
     88e:	3f 4f       	sbci	r19, 0xFF	; 255
     890:	77 fd       	sbrc	r23, 7
     892:	e7 cf       	rjmp	.-50     	; 0x862 <__mulsf3+0x140>
     894:	0c c0       	rjmp	.+24     	; 0x8ae <__mulsf3+0x18c>
     896:	44 0f       	add	r20, r20
     898:	55 1f       	adc	r21, r21
     89a:	66 1f       	adc	r22, r22
     89c:	77 1f       	adc	r23, r23
     89e:	17 fd       	sbrc	r17, 7
     8a0:	41 60       	ori	r20, 0x01	; 1
     8a2:	ee 0c       	add	r14, r14
     8a4:	ff 1c       	adc	r15, r15
     8a6:	00 1f       	adc	r16, r16
     8a8:	11 1f       	adc	r17, r17
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	30 40       	sbci	r19, 0x00	; 0
     8ae:	40 30       	cpi	r20, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	59 07       	cpc	r21, r25
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	69 07       	cpc	r22, r25
     8b8:	90 e4       	ldi	r25, 0x40	; 64
     8ba:	79 07       	cpc	r23, r25
     8bc:	60 f3       	brcs	.-40     	; 0x896 <__mulsf3+0x174>
     8be:	2b 8f       	std	Y+27, r18	; 0x1b
     8c0:	3c 8f       	std	Y+28, r19	; 0x1c
     8c2:	db 01       	movw	r26, r22
     8c4:	ca 01       	movw	r24, r20
     8c6:	8f 77       	andi	r24, 0x7F	; 127
     8c8:	90 70       	andi	r25, 0x00	; 0
     8ca:	a0 70       	andi	r26, 0x00	; 0
     8cc:	b0 70       	andi	r27, 0x00	; 0
     8ce:	80 34       	cpi	r24, 0x40	; 64
     8d0:	91 05       	cpc	r25, r1
     8d2:	a1 05       	cpc	r26, r1
     8d4:	b1 05       	cpc	r27, r1
     8d6:	61 f4       	brne	.+24     	; 0x8f0 <__mulsf3+0x1ce>
     8d8:	47 fd       	sbrc	r20, 7
     8da:	0a c0       	rjmp	.+20     	; 0x8f0 <__mulsf3+0x1ce>
     8dc:	e1 14       	cp	r14, r1
     8de:	f1 04       	cpc	r15, r1
     8e0:	01 05       	cpc	r16, r1
     8e2:	11 05       	cpc	r17, r1
     8e4:	29 f0       	breq	.+10     	; 0x8f0 <__mulsf3+0x1ce>
     8e6:	40 5c       	subi	r20, 0xC0	; 192
     8e8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ea:	6f 4f       	sbci	r22, 0xFF	; 255
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
     8ee:	40 78       	andi	r20, 0x80	; 128
     8f0:	1a 8e       	std	Y+26, r1	; 0x1a
     8f2:	fe 17       	cp	r31, r30
     8f4:	11 f0       	breq	.+4      	; 0x8fa <__mulsf3+0x1d8>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	8a 8f       	std	Y+26, r24	; 0x1a
     8fa:	4d 8f       	std	Y+29, r20	; 0x1d
     8fc:	5e 8f       	std	Y+30, r21	; 0x1e
     8fe:	6f 8f       	std	Y+31, r22	; 0x1f
     900:	78 a3       	std	Y+32, r23	; 0x20
     902:	83 e0       	ldi	r24, 0x03	; 3
     904:	89 8f       	std	Y+25, r24	; 0x19
     906:	ce 01       	movw	r24, r28
     908:	49 96       	adiw	r24, 0x19	; 25
     90a:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     90e:	a0 96       	adiw	r28, 0x20	; 32
     910:	e2 e1       	ldi	r30, 0x12	; 18
     912:	0c 94 4c 17 	jmp	0x2e98	; 0x2e98 <__epilogue_restores__>

00000916 <__gtsf2>:
     916:	a8 e1       	ldi	r26, 0x18	; 24
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e1 e9       	ldi	r30, 0x91	; 145
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     922:	69 83       	std	Y+1, r22	; 0x01
     924:	7a 83       	std	Y+2, r23	; 0x02
     926:	8b 83       	std	Y+3, r24	; 0x03
     928:	9c 83       	std	Y+4, r25	; 0x04
     92a:	2d 83       	std	Y+5, r18	; 0x05
     92c:	3e 83       	std	Y+6, r19	; 0x06
     92e:	4f 83       	std	Y+7, r20	; 0x07
     930:	58 87       	std	Y+8, r21	; 0x08
     932:	89 e0       	ldi	r24, 0x09	; 9
     934:	e8 2e       	mov	r14, r24
     936:	f1 2c       	mov	r15, r1
     938:	ec 0e       	add	r14, r28
     93a:	fd 1e       	adc	r15, r29
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	b7 01       	movw	r22, r14
     942:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     946:	8e 01       	movw	r16, r28
     948:	0f 5e       	subi	r16, 0xEF	; 239
     94a:	1f 4f       	sbci	r17, 0xFF	; 255
     94c:	ce 01       	movw	r24, r28
     94e:	05 96       	adiw	r24, 0x05	; 5
     950:	b8 01       	movw	r22, r16
     952:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     956:	89 85       	ldd	r24, Y+9	; 0x09
     958:	82 30       	cpi	r24, 0x02	; 2
     95a:	40 f0       	brcs	.+16     	; 0x96c <__gtsf2+0x56>
     95c:	89 89       	ldd	r24, Y+17	; 0x11
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	28 f0       	brcs	.+10     	; 0x96c <__gtsf2+0x56>
     962:	c7 01       	movw	r24, r14
     964:	b8 01       	movw	r22, r16
     966:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     96a:	01 c0       	rjmp	.+2      	; 0x96e <__gtsf2+0x58>
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	68 96       	adiw	r28, 0x18	; 24
     970:	e6 e0       	ldi	r30, 0x06	; 6
     972:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

00000976 <__gesf2>:
     976:	a8 e1       	ldi	r26, 0x18	; 24
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e1 ec       	ldi	r30, 0xC1	; 193
     97c:	f4 e0       	ldi	r31, 0x04	; 4
     97e:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     982:	69 83       	std	Y+1, r22	; 0x01
     984:	7a 83       	std	Y+2, r23	; 0x02
     986:	8b 83       	std	Y+3, r24	; 0x03
     988:	9c 83       	std	Y+4, r25	; 0x04
     98a:	2d 83       	std	Y+5, r18	; 0x05
     98c:	3e 83       	std	Y+6, r19	; 0x06
     98e:	4f 83       	std	Y+7, r20	; 0x07
     990:	58 87       	std	Y+8, r21	; 0x08
     992:	89 e0       	ldi	r24, 0x09	; 9
     994:	e8 2e       	mov	r14, r24
     996:	f1 2c       	mov	r15, r1
     998:	ec 0e       	add	r14, r28
     99a:	fd 1e       	adc	r15, r29
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	b7 01       	movw	r22, r14
     9a2:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     9a6:	8e 01       	movw	r16, r28
     9a8:	0f 5e       	subi	r16, 0xEF	; 239
     9aa:	1f 4f       	sbci	r17, 0xFF	; 255
     9ac:	ce 01       	movw	r24, r28
     9ae:	05 96       	adiw	r24, 0x05	; 5
     9b0:	b8 01       	movw	r22, r16
     9b2:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     9b6:	89 85       	ldd	r24, Y+9	; 0x09
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	40 f0       	brcs	.+16     	; 0x9cc <__gesf2+0x56>
     9bc:	89 89       	ldd	r24, Y+17	; 0x11
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	28 f0       	brcs	.+10     	; 0x9cc <__gesf2+0x56>
     9c2:	c7 01       	movw	r24, r14
     9c4:	b8 01       	movw	r22, r16
     9c6:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <__gesf2+0x58>
     9cc:	8f ef       	ldi	r24, 0xFF	; 255
     9ce:	68 96       	adiw	r28, 0x18	; 24
     9d0:	e6 e0       	ldi	r30, 0x06	; 6
     9d2:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

000009d6 <__ltsf2>:
     9d6:	a8 e1       	ldi	r26, 0x18	; 24
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e1 ef       	ldi	r30, 0xF1	; 241
     9dc:	f4 e0       	ldi	r31, 0x04	; 4
     9de:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__prologue_saves__+0x18>
     9e2:	69 83       	std	Y+1, r22	; 0x01
     9e4:	7a 83       	std	Y+2, r23	; 0x02
     9e6:	8b 83       	std	Y+3, r24	; 0x03
     9e8:	9c 83       	std	Y+4, r25	; 0x04
     9ea:	2d 83       	std	Y+5, r18	; 0x05
     9ec:	3e 83       	std	Y+6, r19	; 0x06
     9ee:	4f 83       	std	Y+7, r20	; 0x07
     9f0:	58 87       	std	Y+8, r21	; 0x08
     9f2:	89 e0       	ldi	r24, 0x09	; 9
     9f4:	e8 2e       	mov	r14, r24
     9f6:	f1 2c       	mov	r15, r1
     9f8:	ec 0e       	add	r14, r28
     9fa:	fd 1e       	adc	r15, r29
     9fc:	ce 01       	movw	r24, r28
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	b7 01       	movw	r22, r14
     a02:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     a06:	8e 01       	movw	r16, r28
     a08:	0f 5e       	subi	r16, 0xEF	; 239
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	ce 01       	movw	r24, r28
     a0e:	05 96       	adiw	r24, 0x05	; 5
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     a16:	89 85       	ldd	r24, Y+9	; 0x09
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	40 f0       	brcs	.+16     	; 0xa2c <__ltsf2+0x56>
     a1c:	89 89       	ldd	r24, Y+17	; 0x11
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	28 f0       	brcs	.+10     	; 0xa2c <__ltsf2+0x56>
     a22:	c7 01       	movw	r24, r14
     a24:	b8 01       	movw	r22, r16
     a26:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     a2a:	01 c0       	rjmp	.+2      	; 0xa2e <__ltsf2+0x58>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	68 96       	adiw	r28, 0x18	; 24
     a30:	e6 e0       	ldi	r30, 0x06	; 6
     a32:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__epilogue_restores__+0x18>

00000a36 <__fixsfsi>:
     a36:	ac e0       	ldi	r26, 0x0C	; 12
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e1 e2       	ldi	r30, 0x21	; 33
     a3c:	f5 e0       	ldi	r31, 0x05	; 5
     a3e:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__prologue_saves__+0x20>
     a42:	69 83       	std	Y+1, r22	; 0x01
     a44:	7a 83       	std	Y+2, r23	; 0x02
     a46:	8b 83       	std	Y+3, r24	; 0x03
     a48:	9c 83       	std	Y+4, r25	; 0x04
     a4a:	ce 01       	movw	r24, r28
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	be 01       	movw	r22, r28
     a50:	6b 5f       	subi	r22, 0xFB	; 251
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     a58:	8d 81       	ldd	r24, Y+5	; 0x05
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	61 f1       	breq	.+88     	; 0xab6 <__fixsfsi+0x80>
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	50 f1       	brcs	.+84     	; 0xab6 <__fixsfsi+0x80>
     a62:	84 30       	cpi	r24, 0x04	; 4
     a64:	21 f4       	brne	.+8      	; 0xa6e <__fixsfsi+0x38>
     a66:	8e 81       	ldd	r24, Y+6	; 0x06
     a68:	88 23       	and	r24, r24
     a6a:	51 f1       	breq	.+84     	; 0xac0 <__fixsfsi+0x8a>
     a6c:	2e c0       	rjmp	.+92     	; 0xaca <__fixsfsi+0x94>
     a6e:	2f 81       	ldd	r18, Y+7	; 0x07
     a70:	38 85       	ldd	r19, Y+8	; 0x08
     a72:	37 fd       	sbrc	r19, 7
     a74:	20 c0       	rjmp	.+64     	; 0xab6 <__fixsfsi+0x80>
     a76:	6e 81       	ldd	r22, Y+6	; 0x06
     a78:	2f 31       	cpi	r18, 0x1F	; 31
     a7a:	31 05       	cpc	r19, r1
     a7c:	1c f0       	brlt	.+6      	; 0xa84 <__fixsfsi+0x4e>
     a7e:	66 23       	and	r22, r22
     a80:	f9 f0       	breq	.+62     	; 0xac0 <__fixsfsi+0x8a>
     a82:	23 c0       	rjmp	.+70     	; 0xaca <__fixsfsi+0x94>
     a84:	8e e1       	ldi	r24, 0x1E	; 30
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	82 1b       	sub	r24, r18
     a8a:	93 0b       	sbc	r25, r19
     a8c:	29 85       	ldd	r18, Y+9	; 0x09
     a8e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a90:	4b 85       	ldd	r20, Y+11	; 0x0b
     a92:	5c 85       	ldd	r21, Y+12	; 0x0c
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__fixsfsi+0x68>
     a96:	56 95       	lsr	r21
     a98:	47 95       	ror	r20
     a9a:	37 95       	ror	r19
     a9c:	27 95       	ror	r18
     a9e:	8a 95       	dec	r24
     aa0:	d2 f7       	brpl	.-12     	; 0xa96 <__fixsfsi+0x60>
     aa2:	66 23       	and	r22, r22
     aa4:	b1 f0       	breq	.+44     	; 0xad2 <__fixsfsi+0x9c>
     aa6:	50 95       	com	r21
     aa8:	40 95       	com	r20
     aaa:	30 95       	com	r19
     aac:	21 95       	neg	r18
     aae:	3f 4f       	sbci	r19, 0xFF	; 255
     ab0:	4f 4f       	sbci	r20, 0xFF	; 255
     ab2:	5f 4f       	sbci	r21, 0xFF	; 255
     ab4:	0e c0       	rjmp	.+28     	; 0xad2 <__fixsfsi+0x9c>
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	09 c0       	rjmp	.+18     	; 0xad2 <__fixsfsi+0x9c>
     ac0:	2f ef       	ldi	r18, 0xFF	; 255
     ac2:	3f ef       	ldi	r19, 0xFF	; 255
     ac4:	4f ef       	ldi	r20, 0xFF	; 255
     ac6:	5f e7       	ldi	r21, 0x7F	; 127
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__fixsfsi+0x9c>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e8       	ldi	r21, 0x80	; 128
     ad2:	b9 01       	movw	r22, r18
     ad4:	ca 01       	movw	r24, r20
     ad6:	2c 96       	adiw	r28, 0x0c	; 12
     ad8:	e2 e0       	ldi	r30, 0x02	; 2
     ada:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__epilogue_restores__+0x20>

00000ade <__pack_f>:
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	fc 01       	movw	r30, r24
     aea:	e4 80       	ldd	r14, Z+4	; 0x04
     aec:	f5 80       	ldd	r15, Z+5	; 0x05
     aee:	06 81       	ldd	r16, Z+6	; 0x06
     af0:	17 81       	ldd	r17, Z+7	; 0x07
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	48 f4       	brcc	.+18     	; 0xb0c <__pack_f+0x2e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e1       	ldi	r26, 0x10	; 16
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e8 2a       	or	r14, r24
     b04:	f9 2a       	or	r15, r25
     b06:	0a 2b       	or	r16, r26
     b08:	1b 2b       	or	r17, r27
     b0a:	a5 c0       	rjmp	.+330    	; 0xc56 <__pack_f+0x178>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__pack_f+0x34>
     b10:	9f c0       	rjmp	.+318    	; 0xc50 <__pack_f+0x172>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	21 f4       	brne	.+8      	; 0xb1e <__pack_f+0x40>
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__pack_f+0x4a>
     b1e:	e1 14       	cp	r14, r1
     b20:	f1 04       	cpc	r15, r1
     b22:	01 05       	cpc	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	19 f4       	brne	.+6      	; 0xb2e <__pack_f+0x50>
     b28:	e0 e0       	ldi	r30, 0x00	; 0
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	96 c0       	rjmp	.+300    	; 0xc5a <__pack_f+0x17c>
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	62 38       	cpi	r22, 0x82	; 130
     b36:	79 07       	cpc	r23, r25
     b38:	0c f0       	brlt	.+2      	; 0xb3c <__pack_f+0x5e>
     b3a:	5b c0       	rjmp	.+182    	; 0xbf2 <__pack_f+0x114>
     b3c:	22 e8       	ldi	r18, 0x82	; 130
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	26 1b       	sub	r18, r22
     b42:	37 0b       	sbc	r19, r23
     b44:	2a 31       	cpi	r18, 0x1A	; 26
     b46:	31 05       	cpc	r19, r1
     b48:	2c f0       	brlt	.+10     	; 0xb54 <__pack_f+0x76>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <__pack_f+0xca>
     b54:	b8 01       	movw	r22, r16
     b56:	a7 01       	movw	r20, r14
     b58:	02 2e       	mov	r0, r18
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__pack_f+0x86>
     b5c:	76 95       	lsr	r23
     b5e:	67 95       	ror	r22
     b60:	57 95       	ror	r21
     b62:	47 95       	ror	r20
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__pack_f+0x7e>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0x9c>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	2a 95       	dec	r18
     b7c:	d2 f7       	brpl	.-12     	; 0xb72 <__pack_f+0x94>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	a1 09       	sbc	r26, r1
     b82:	b1 09       	sbc	r27, r1
     b84:	8e 21       	and	r24, r14
     b86:	9f 21       	and	r25, r15
     b88:	a0 23       	and	r26, r16
     b8a:	b1 23       	and	r27, r17
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	21 f0       	breq	.+8      	; 0xb9c <__pack_f+0xbe>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	28 2b       	or	r18, r24
     ba2:	39 2b       	or	r19, r25
     ba4:	4a 2b       	or	r20, r26
     ba6:	5b 2b       	or	r21, r27
     ba8:	da 01       	movw	r26, r20
     baa:	c9 01       	movw	r24, r18
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	90 70       	andi	r25, 0x00	; 0
     bb0:	a0 70       	andi	r26, 0x00	; 0
     bb2:	b0 70       	andi	r27, 0x00	; 0
     bb4:	80 34       	cpi	r24, 0x40	; 64
     bb6:	91 05       	cpc	r25, r1
     bb8:	a1 05       	cpc	r26, r1
     bba:	b1 05       	cpc	r27, r1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <__pack_f+0xee>
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__pack_f+0xf6>
     bc2:	20 5c       	subi	r18, 0xC0	; 192
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	4f 4f       	sbci	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__pack_f+0xf6>
     bcc:	21 5c       	subi	r18, 0xC1	; 193
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	20 30       	cpi	r18, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	3a 07       	cpc	r19, r26
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	4a 07       	cpc	r20, r26
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	5a 07       	cpc	r21, r26
     be6:	10 f0       	brcs	.+4      	; 0xbec <__pack_f+0x10e>
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	79 01       	movw	r14, r18
     bee:	8a 01       	movw	r16, r20
     bf0:	27 c0       	rjmp	.+78     	; 0xc40 <__pack_f+0x162>
     bf2:	60 38       	cpi	r22, 0x80	; 128
     bf4:	71 05       	cpc	r23, r1
     bf6:	64 f5       	brge	.+88     	; 0xc50 <__pack_f+0x172>
     bf8:	fb 01       	movw	r30, r22
     bfa:	e1 58       	subi	r30, 0x81	; 129
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	d8 01       	movw	r26, r16
     c00:	c7 01       	movw	r24, r14
     c02:	8f 77       	andi	r24, 0x7F	; 127
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	a0 70       	andi	r26, 0x00	; 0
     c08:	b0 70       	andi	r27, 0x00	; 0
     c0a:	80 34       	cpi	r24, 0x40	; 64
     c0c:	91 05       	cpc	r25, r1
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	39 f4       	brne	.+14     	; 0xc22 <__pack_f+0x144>
     c14:	e7 fe       	sbrs	r14, 7
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <__pack_f+0x154>
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x14c>
     c22:	8f e3       	ldi	r24, 0x3F	; 63
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 0e       	add	r14, r24
     c2c:	f9 1e       	adc	r15, r25
     c2e:	0a 1f       	adc	r16, r26
     c30:	1b 1f       	adc	r17, r27
     c32:	17 ff       	sbrs	r17, 7
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <__pack_f+0x162>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	31 96       	adiw	r30, 0x01	; 1
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	16 95       	lsr	r17
     c44:	07 95       	ror	r16
     c46:	f7 94       	ror	r15
     c48:	e7 94       	ror	r14
     c4a:	8a 95       	dec	r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <__pack_f+0x164>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__pack_f+0x17c>
     c50:	ee 24       	eor	r14, r14
     c52:	ff 24       	eor	r15, r15
     c54:	87 01       	movw	r16, r14
     c56:	ef ef       	ldi	r30, 0xFF	; 255
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	6e 2f       	mov	r22, r30
     c5c:	67 95       	ror	r22
     c5e:	66 27       	eor	r22, r22
     c60:	67 95       	ror	r22
     c62:	90 2f       	mov	r25, r16
     c64:	9f 77       	andi	r25, 0x7F	; 127
     c66:	d7 94       	ror	r13
     c68:	dd 24       	eor	r13, r13
     c6a:	d7 94       	ror	r13
     c6c:	8e 2f       	mov	r24, r30
     c6e:	86 95       	lsr	r24
     c70:	49 2f       	mov	r20, r25
     c72:	46 2b       	or	r20, r22
     c74:	58 2f       	mov	r21, r24
     c76:	5d 29       	or	r21, r13
     c78:	b7 01       	movw	r22, r14
     c7a:	ca 01       	movw	r24, r20
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	08 95       	ret

00000c88 <__unpack_f>:
     c88:	fc 01       	movw	r30, r24
     c8a:	db 01       	movw	r26, r22
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	62 2f       	mov	r22, r18
     c94:	6f 77       	andi	r22, 0x7F	; 127
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	22 1f       	adc	r18, r18
     c9a:	22 27       	eor	r18, r18
     c9c:	22 1f       	adc	r18, r18
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	89 2f       	mov	r24, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	82 2b       	or	r24, r18
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	99 1f       	adc	r25, r25
     cac:	99 27       	eor	r25, r25
     cae:	99 1f       	adc	r25, r25
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	9c 93       	st	X, r25
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	a9 f5       	brne	.+106    	; 0xd26 <__unpack_f+0x9e>
     cbc:	41 15       	cp	r20, r1
     cbe:	51 05       	cpc	r21, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <__unpack_f+0x42>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	37 c0       	rjmp	.+110    	; 0xd38 <__unpack_f+0xb0>
     cca:	82 e8       	ldi	r24, 0x82	; 130
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	9a 01       	movw	r18, r20
     cd8:	ab 01       	movw	r20, r22
     cda:	67 e0       	ldi	r22, 0x07	; 7
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <__unpack_f+0x54>
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	8c 93       	st	X, r24
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <__unpack_f+0x80>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	9c 93       	st	X, r25
     d04:	8e 93       	st	-X, r24
     d06:	12 97       	sbiw	r26, 0x02	; 2
     d08:	20 30       	cpi	r18, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	38 07       	cpc	r19, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	48 07       	cpc	r20, r24
     d12:	80 e4       	ldi	r24, 0x40	; 64
     d14:	58 07       	cpc	r21, r24
     d16:	58 f3       	brcs	.-42     	; 0xcee <__unpack_f+0x66>
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	2d 93       	st	X+, r18
     d1c:	3d 93       	st	X+, r19
     d1e:	4d 93       	st	X+, r20
     d20:	5c 93       	st	X, r21
     d22:	17 97       	sbiw	r26, 0x07	; 7
     d24:	08 95       	ret
     d26:	2f 3f       	cpi	r18, 0xFF	; 255
     d28:	31 05       	cpc	r19, r1
     d2a:	79 f4       	brne	.+30     	; 0xd4a <__unpack_f+0xc2>
     d2c:	41 15       	cp	r20, r1
     d2e:	51 05       	cpc	r21, r1
     d30:	61 05       	cpc	r22, r1
     d32:	71 05       	cpc	r23, r1
     d34:	19 f4       	brne	.+6      	; 0xd3c <__unpack_f+0xb4>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	08 95       	ret
     d3c:	64 ff       	sbrs	r22, 4
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <__unpack_f+0xbe>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__unpack_f+0xe2>
     d46:	1c 92       	st	X, r1
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <__unpack_f+0xe2>
     d4a:	2f 57       	subi	r18, 0x7F	; 127
     d4c:	30 40       	sbci	r19, 0x00	; 0
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	3c 93       	st	X, r19
     d52:	2e 93       	st	-X, r18
     d54:	12 97       	sbiw	r26, 0x02	; 2
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8c 93       	st	X, r24
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	8a 95       	dec	r24
     d66:	d1 f7       	brne	.-12     	; 0xd5c <__unpack_f+0xd4>
     d68:	70 64       	ori	r23, 0x40	; 64
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	4d 93       	st	X+, r20
     d6e:	5d 93       	st	X+, r21
     d70:	6d 93       	st	X+, r22
     d72:	7c 93       	st	X, r23
     d74:	17 97       	sbiw	r26, 0x07	; 7
     d76:	08 95       	ret

00000d78 <__fpcmp_parts_f>:
     d78:	1f 93       	push	r17
     d7a:	dc 01       	movw	r26, r24
     d7c:	fb 01       	movw	r30, r22
     d7e:	9c 91       	ld	r25, X
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	08 f4       	brcc	.+2      	; 0xd86 <__fpcmp_parts_f+0xe>
     d84:	47 c0       	rjmp	.+142    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d86:	80 81       	ld	r24, Z
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__fpcmp_parts_f+0x16>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d8e:	94 30       	cpi	r25, 0x04	; 4
     d90:	51 f4       	brne	.+20     	; 0xda6 <__fpcmp_parts_f+0x2e>
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	1c 91       	ld	r17, X
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	99 f5       	brne	.+102    	; 0xe00 <__fpcmp_parts_f+0x88>
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	68 2f       	mov	r22, r24
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	61 1b       	sub	r22, r17
     da2:	71 09       	sbc	r23, r1
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <__fpcmp_parts_f+0xac>
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__fpcmp_parts_f+0x3a>
     daa:	92 30       	cpi	r25, 0x02	; 2
     dac:	31 f4       	brne	.+12     	; 0xdba <__fpcmp_parts_f+0x42>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	b9 f1       	breq	.+110    	; 0xe20 <__fpcmp_parts_f+0xa8>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	89 f1       	breq	.+98     	; 0xe1a <__fpcmp_parts_f+0xa2>
     db8:	2d c0       	rjmp	.+90     	; 0xe14 <__fpcmp_parts_f+0x9c>
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	1c 91       	ld	r17, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <__fpcmp_parts_f+0x88>
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	18 17       	cp	r17, r24
     dc8:	d9 f4       	brne	.+54     	; 0xe00 <__fpcmp_parts_f+0x88>
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	94 f0       	brlt	.+36     	; 0xe00 <__fpcmp_parts_f+0x88>
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	bc f0       	brlt	.+46     	; 0xe10 <__fpcmp_parts_f+0x98>
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	8d 91       	ld	r24, X+
     de6:	9d 91       	ld	r25, X+
     de8:	0d 90       	ld	r0, X+
     dea:	bc 91       	ld	r27, X
     dec:	a0 2d       	mov	r26, r0
     dee:	24 81       	ldd	r18, Z+4	; 0x04
     df0:	35 81       	ldd	r19, Z+5	; 0x05
     df2:	46 81       	ldd	r20, Z+6	; 0x06
     df4:	57 81       	ldd	r21, Z+7	; 0x07
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	4a 07       	cpc	r20, r26
     dfc:	5b 07       	cpc	r21, r27
     dfe:	18 f4       	brcc	.+6      	; 0xe06 <__fpcmp_parts_f+0x8e>
     e00:	11 23       	and	r17, r17
     e02:	41 f0       	breq	.+16     	; 0xe14 <__fpcmp_parts_f+0x9c>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__fpcmp_parts_f+0xa2>
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	a4 07       	cpc	r26, r20
     e0c:	b5 07       	cpc	r27, r21
     e0e:	40 f4       	brcc	.+16     	; 0xe20 <__fpcmp_parts_f+0xa8>
     e10:	11 23       	and	r17, r17
     e12:	19 f0       	breq	.+6      	; 0xe1a <__fpcmp_parts_f+0xa2>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__fpcmp_parts_f+0xac>
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	7f ef       	ldi	r23, 0xFF	; 255
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <__fpcmp_parts_f+0xac>
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	cb 01       	movw	r24, r22
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <Calculator>:
 * [Out]:           result: tio carry the result of the desired operation
 *
 * [Returns]:      signed integer of 64 byte to return the result of the operation
 ***************************************************************************************************/
sint64 Calculator(sint32 first, sint32 second, uint8 op )
{
     e2a:	af 92       	push	r10
     e2c:	bf 92       	push	r11
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	63 97       	sbiw	r28, 0x13	; 19
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	69 87       	std	Y+9, r22	; 0x09
     e50:	7a 87       	std	Y+10, r23	; 0x0a
     e52:	8b 87       	std	Y+11, r24	; 0x0b
     e54:	9c 87       	std	Y+12, r25	; 0x0c
     e56:	2d 87       	std	Y+13, r18	; 0x0d
     e58:	3e 87       	std	Y+14, r19	; 0x0e
     e5a:	4f 87       	std	Y+15, r20	; 0x0f
     e5c:	58 8b       	std	Y+16, r21	; 0x10
     e5e:	09 8b       	std	Y+17, r16	; 0x11
	sint64 result;

	switch(op)
     e60:	89 89       	ldd	r24, Y+17	; 0x11
     e62:	e8 2e       	mov	r14, r24
     e64:	ff 24       	eor	r15, r15
     e66:	fb 8a       	std	Y+19, r15	; 0x13
     e68:	ea 8a       	std	Y+18, r14	; 0x12
     e6a:	0a 89       	ldd	r16, Y+18	; 0x12
     e6c:	1b 89       	ldd	r17, Y+19	; 0x13
     e6e:	0a 32       	cpi	r16, 0x2A	; 42
     e70:	11 05       	cpc	r17, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <Calculator+0x4c>
     e74:	4d c0       	rjmp	.+154    	; 0xf10 <Calculator+0xe6>
     e76:	2a 89       	ldd	r18, Y+18	; 0x12
     e78:	3b 89       	ldd	r19, Y+19	; 0x13
     e7a:	2b 32       	cpi	r18, 0x2B	; 43
     e7c:	31 05       	cpc	r19, r1
     e7e:	3c f4       	brge	.+14     	; 0xe8e <Calculator+0x64>
     e80:	8a 89       	ldd	r24, Y+18	; 0x12
     e82:	9b 89       	ldd	r25, Y+19	; 0x13
     e84:	85 32       	cpi	r24, 0x25	; 37
     e86:	91 05       	cpc	r25, r1
     e88:	09 f4       	brne	.+2      	; 0xe8c <Calculator+0x62>
     e8a:	5d c0       	rjmp	.+186    	; 0xf46 <Calculator+0x11c>
     e8c:	77 c0       	rjmp	.+238    	; 0xf7c <Calculator+0x152>
     e8e:	0a 89       	ldd	r16, Y+18	; 0x12
     e90:	1b 89       	ldd	r17, Y+19	; 0x13
     e92:	0b 32       	cpi	r16, 0x2B	; 43
     e94:	11 05       	cpc	r17, r1
     e96:	31 f0       	breq	.+12     	; 0xea4 <Calculator+0x7a>
     e98:	2a 89       	ldd	r18, Y+18	; 0x12
     e9a:	3b 89       	ldd	r19, Y+19	; 0x13
     e9c:	2d 32       	cpi	r18, 0x2D	; 45
     e9e:	31 05       	cpc	r19, r1
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <Calculator+0xac>
     ea2:	6c c0       	rjmp	.+216    	; 0xf7c <Calculator+0x152>
	{
	case '+':
		result = (first + second);
     ea4:	29 85       	ldd	r18, Y+9	; 0x09
     ea6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea8:	4b 85       	ldd	r20, Y+11	; 0x0b
     eaa:	5c 85       	ldd	r21, Y+12	; 0x0c
     eac:	8d 85       	ldd	r24, Y+13	; 0x0d
     eae:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb0:	af 85       	ldd	r26, Y+15	; 0x0f
     eb2:	b8 89       	ldd	r27, Y+16	; 0x10
     eb4:	82 0f       	add	r24, r18
     eb6:	93 1f       	adc	r25, r19
     eb8:	a4 1f       	adc	r26, r20
     eba:	b5 1f       	adc	r27, r21
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	ab 83       	std	Y+3, r26	; 0x03
     ec2:	bc 83       	std	Y+4, r27	; 0x04
     ec4:	bb 0f       	add	r27, r27
     ec6:	88 0b       	sbc	r24, r24
     ec8:	98 2f       	mov	r25, r24
     eca:	dc 01       	movw	r26, r24
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	8e 83       	std	Y+6, r24	; 0x06
     ed0:	8f 83       	std	Y+7, r24	; 0x07
     ed2:	88 87       	std	Y+8, r24	; 0x08
     ed4:	5b c0       	rjmp	.+182    	; 0xf8c <Calculator+0x162>
		break;

	case '-':
		result = (first - second);
     ed6:	29 85       	ldd	r18, Y+9	; 0x09
     ed8:	3a 85       	ldd	r19, Y+10	; 0x0a
     eda:	4b 85       	ldd	r20, Y+11	; 0x0b
     edc:	5c 85       	ldd	r21, Y+12	; 0x0c
     ede:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee2:	af 85       	ldd	r26, Y+15	; 0x0f
     ee4:	b8 89       	ldd	r27, Y+16	; 0x10
     ee6:	79 01       	movw	r14, r18
     ee8:	8a 01       	movw	r16, r20
     eea:	e8 1a       	sub	r14, r24
     eec:	f9 0a       	sbc	r15, r25
     eee:	0a 0b       	sbc	r16, r26
     ef0:	1b 0b       	sbc	r17, r27
     ef2:	d8 01       	movw	r26, r16
     ef4:	c7 01       	movw	r24, r14
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	ab 83       	std	Y+3, r26	; 0x03
     efc:	bc 83       	std	Y+4, r27	; 0x04
     efe:	bb 0f       	add	r27, r27
     f00:	88 0b       	sbc	r24, r24
     f02:	98 2f       	mov	r25, r24
     f04:	dc 01       	movw	r26, r24
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	8e 83       	std	Y+6, r24	; 0x06
     f0a:	8f 83       	std	Y+7, r24	; 0x07
     f0c:	88 87       	std	Y+8, r24	; 0x08
     f0e:	3e c0       	rjmp	.+124    	; 0xf8c <Calculator+0x162>
		break;

	case'*':
		result = (first * second);
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	ab 85       	ldd	r26, Y+11	; 0x0b
     f16:	bc 85       	ldd	r27, Y+12	; 0x0c
     f18:	2d 85       	ldd	r18, Y+13	; 0x0d
     f1a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f1c:	4f 85       	ldd	r20, Y+15	; 0x0f
     f1e:	58 89       	ldd	r21, Y+16	; 0x10
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsi3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	ab 83       	std	Y+3, r26	; 0x03
     f32:	bc 83       	std	Y+4, r27	; 0x04
     f34:	bb 0f       	add	r27, r27
     f36:	88 0b       	sbc	r24, r24
     f38:	98 2f       	mov	r25, r24
     f3a:	dc 01       	movw	r26, r24
     f3c:	8d 83       	std	Y+5, r24	; 0x05
     f3e:	8e 83       	std	Y+6, r24	; 0x06
     f40:	8f 83       	std	Y+7, r24	; 0x07
     f42:	88 87       	std	Y+8, r24	; 0x08
     f44:	23 c0       	rjmp	.+70     	; 0xf8c <Calculator+0x162>
		break;

	case'%':

			result = (first % second);
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4a:	ab 85       	ldd	r26, Y+11	; 0x0b
     f4c:	bc 85       	ldd	r27, Y+12	; 0x0c
     f4e:	2d 85       	ldd	r18, Y+13	; 0x0d
     f50:	3e 85       	ldd	r19, Y+14	; 0x0e
     f52:	4f 85       	ldd	r20, Y+15	; 0x0f
     f54:	58 89       	ldd	r21, Y+16	; 0x10
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <__divmodsi4>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	ab 83       	std	Y+3, r26	; 0x03
     f68:	bc 83       	std	Y+4, r27	; 0x04
     f6a:	bb 0f       	add	r27, r27
     f6c:	88 0b       	sbc	r24, r24
     f6e:	98 2f       	mov	r25, r24
     f70:	dc 01       	movw	r26, r24
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	8e 83       	std	Y+6, r24	; 0x06
     f76:	8f 83       	std	Y+7, r24	; 0x07
     f78:	88 87       	std	Y+8, r24	; 0x08
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <Calculator+0x162>

		break;

	default:
		result = 0;
     f7c:	19 82       	std	Y+1, r1	; 0x01
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	1b 82       	std	Y+3, r1	; 0x03
     f82:	1c 82       	std	Y+4, r1	; 0x04
     f84:	1d 82       	std	Y+5, r1	; 0x05
     f86:	1e 82       	std	Y+6, r1	; 0x06
     f88:	1f 82       	std	Y+7, r1	; 0x07
     f8a:	18 86       	std	Y+8, r1	; 0x08
		break;
	}

	return result;
     f8c:	29 81       	ldd	r18, Y+1	; 0x01
     f8e:	3a 81       	ldd	r19, Y+2	; 0x02
     f90:	4b 81       	ldd	r20, Y+3	; 0x03
     f92:	5c 81       	ldd	r21, Y+4	; 0x04
     f94:	6d 81       	ldd	r22, Y+5	; 0x05
     f96:	7e 81       	ldd	r23, Y+6	; 0x06
     f98:	8f 81       	ldd	r24, Y+7	; 0x07
     f9a:	98 85       	ldd	r25, Y+8	; 0x08
     f9c:	a2 2e       	mov	r10, r18
     f9e:	b3 2e       	mov	r11, r19
     fa0:	c4 2e       	mov	r12, r20
     fa2:	d5 2e       	mov	r13, r21
     fa4:	e6 2e       	mov	r14, r22
     fa6:	f7 2e       	mov	r15, r23
     fa8:	08 2f       	mov	r16, r24
     faa:	19 2f       	mov	r17, r25
}
     fac:	2a 2d       	mov	r18, r10
     fae:	3b 2d       	mov	r19, r11
     fb0:	4c 2d       	mov	r20, r12
     fb2:	5d 2d       	mov	r21, r13
     fb4:	6e 2d       	mov	r22, r14
     fb6:	7f 2d       	mov	r23, r15
     fb8:	80 2f       	mov	r24, r16
     fba:	91 2f       	mov	r25, r17
     fbc:	63 96       	adiw	r28, 0x13	; 19
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	bf 90       	pop	r11
     fda:	af 90       	pop	r10
     fdc:	08 95       	ret

00000fde <display_key>:
 * [Out]:            NONE
 *
 * [Returns]:        NONE
 ***************************************************************************************************/
void display_key(uint8*pressedKey)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <display_key+0x6>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
	if (( (*pressedKey) >= 0) && ( (*pressedKey) <= 9))
     fec:	e9 81       	ldd	r30, Y+1	; 0x01
     fee:	fa 81       	ldd	r31, Y+2	; 0x02
     ff0:	80 81       	ld	r24, Z
     ff2:	8a 30       	cpi	r24, 0x0A	; 10
     ff4:	40 f4       	brcc	.+16     	; 0x1006 <display_key+0x28>
	{
		LCD_intgerToString( (*pressedKey) );
     ff6:	e9 81       	ldd	r30, Y+1	; 0x01
     ff8:	fa 81       	ldd	r31, Y+2	; 0x02
     ffa:	80 81       	ld	r24, Z
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_intgerToString>
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <display_key+0x32>
	}
	else
	{
		LCD_displayCharacter( (*pressedKey) );
    1006:	e9 81       	ldd	r30, Y+1	; 0x01
    1008:	fa 81       	ldd	r31, Y+2	; 0x02
    100a:	80 81       	ld	r24, Z
    100c:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayCharacter>
	}
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <convertArrayToNumber>:
 * [Out]:           operand: to return the converted number from the entered array
 *
 * [Returns]:      sint64 operand
 ***************************************************************************************************/
sint64 convertArrayToNumber(uint8*ptr, uint8 size)
{
    101a:	af 92       	push	r10
    101c:	bf 92       	push	r11
    101e:	cf 92       	push	r12
    1020:	df 92       	push	r13
    1022:	ef 92       	push	r14
    1024:	ff 92       	push	r15
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	cb 56       	subi	r28, 0x6B	; 107
    1034:	d0 40       	sbci	r29, 0x00	; 0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	9c 8b       	std	Y+20, r25	; 0x14
    1042:	8b 8b       	std	Y+19, r24	; 0x13
    1044:	6d 8b       	std	Y+21, r22	; 0x15
	uint8 count=0;
    1046:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 exponent;
	uint64 tens=1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 87       	std	Y+9, r24	; 0x09
    104c:	1a 86       	std	Y+10, r1	; 0x0a
    104e:	1b 86       	std	Y+11, r1	; 0x0b
    1050:	1c 86       	std	Y+12, r1	; 0x0c
    1052:	1d 86       	std	Y+13, r1	; 0x0d
    1054:	1e 86       	std	Y+14, r1	; 0x0e
    1056:	1f 86       	std	Y+15, r1	; 0x0f
    1058:	18 8a       	std	Y+16, r1	; 0x10
	sint64 operand=0;
    105a:	19 82       	std	Y+1, r1	; 0x01
    105c:	1a 82       	std	Y+2, r1	; 0x02
    105e:	1b 82       	std	Y+3, r1	; 0x03
    1060:	1c 82       	std	Y+4, r1	; 0x04
    1062:	1d 82       	std	Y+5, r1	; 0x05
    1064:	1e 82       	std	Y+6, r1	; 0x06
    1066:	1f 82       	std	Y+7, r1	; 0x07
    1068:	18 86       	std	Y+8, r1	; 0x08
	for(count=0; count<size; count++)
    106a:	1a 8a       	std	Y+18, r1	; 0x12
    106c:	83 c3       	rjmp	.+1798   	; 0x1774 <convertArrayToNumber+0x75a>
	{
		tens =1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	89 87       	std	Y+9, r24	; 0x09
    1072:	1a 86       	std	Y+10, r1	; 0x0a
    1074:	1b 86       	std	Y+11, r1	; 0x0b
    1076:	1c 86       	std	Y+12, r1	; 0x0c
    1078:	1d 86       	std	Y+13, r1	; 0x0d
    107a:	1e 86       	std	Y+14, r1	; 0x0e
    107c:	1f 86       	std	Y+15, r1	; 0x0f
    107e:	18 8a       	std	Y+16, r1	; 0x10
		for (exponent= (size-count-1); exponent>0; exponent--)
    1080:	9d 89       	ldd	r25, Y+21	; 0x15
    1082:	8a 89       	ldd	r24, Y+18	; 0x12
    1084:	29 2f       	mov	r18, r25
    1086:	28 1b       	sub	r18, r24
    1088:	82 2f       	mov	r24, r18
    108a:	81 50       	subi	r24, 0x01	; 1
    108c:	89 8b       	std	Y+17, r24	; 0x11
    108e:	7e c1       	rjmp	.+764    	; 0x138c <convertArrayToNumber+0x372>
		{
			tens = tens * 10;
    1090:	29 85       	ldd	r18, Y+9	; 0x09
    1092:	3a 85       	ldd	r19, Y+10	; 0x0a
    1094:	4b 85       	ldd	r20, Y+11	; 0x0b
    1096:	5c 85       	ldd	r21, Y+12	; 0x0c
    1098:	6d 85       	ldd	r22, Y+13	; 0x0d
    109a:	7e 85       	ldd	r23, Y+14	; 0x0e
    109c:	8f 85       	ldd	r24, Y+15	; 0x0f
    109e:	98 89       	ldd	r25, Y+16	; 0x10
    10a0:	a2 2e       	mov	r10, r18
    10a2:	b3 2e       	mov	r11, r19
    10a4:	c4 2e       	mov	r12, r20
    10a6:	d5 2e       	mov	r13, r21
    10a8:	e6 2e       	mov	r14, r22
    10aa:	f7 2e       	mov	r15, r23
    10ac:	08 2f       	mov	r16, r24
    10ae:	19 2f       	mov	r17, r25
    10b0:	2a 2d       	mov	r18, r10
    10b2:	3b 2d       	mov	r19, r11
    10b4:	4c 2d       	mov	r20, r12
    10b6:	5d 2d       	mov	r21, r13
    10b8:	6e 2d       	mov	r22, r14
    10ba:	7f 2d       	mov	r23, r15
    10bc:	80 2f       	mov	r24, r16
    10be:	91 2f       	mov	r25, r17
    10c0:	01 e0       	ldi	r16, 0x01	; 1
    10c2:	0e 94 3c 01 	call	0x278	; 0x278 <__ashldi3>
    10c6:	2e a3       	std	Y+38, r18	; 0x26
    10c8:	3f a3       	std	Y+39, r19	; 0x27
    10ca:	48 a7       	std	Y+40, r20	; 0x28
    10cc:	59 a7       	std	Y+41, r21	; 0x29
    10ce:	6a a7       	std	Y+42, r22	; 0x2a
    10d0:	7b a7       	std	Y+43, r23	; 0x2b
    10d2:	8c a7       	std	Y+44, r24	; 0x2c
    10d4:	9d a7       	std	Y+45, r25	; 0x2d
    10d6:	2e a1       	ldd	r18, Y+38	; 0x26
    10d8:	3f a1       	ldd	r19, Y+39	; 0x27
    10da:	48 a5       	ldd	r20, Y+40	; 0x28
    10dc:	59 a5       	ldd	r21, Y+41	; 0x29
    10de:	6a a5       	ldd	r22, Y+42	; 0x2a
    10e0:	7b a5       	ldd	r23, Y+43	; 0x2b
    10e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    10e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    10e6:	02 e0       	ldi	r16, 0x02	; 2
    10e8:	0e 94 3c 01 	call	0x278	; 0x278 <__ashldi3>
    10ec:	2e a7       	std	Y+46, r18	; 0x2e
    10ee:	3f a7       	std	Y+47, r19	; 0x2f
    10f0:	48 ab       	std	Y+48, r20	; 0x30
    10f2:	59 ab       	std	Y+49, r21	; 0x31
    10f4:	6a ab       	std	Y+50, r22	; 0x32
    10f6:	7b ab       	std	Y+51, r23	; 0x33
    10f8:	8c ab       	std	Y+52, r24	; 0x34
    10fa:	9d ab       	std	Y+53, r25	; 0x35
    10fc:	8e a1       	ldd	r24, Y+38	; 0x26
    10fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    1100:	89 0f       	add	r24, r25
    1102:	8e ab       	std	Y+54, r24	; 0x36
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	2e af       	std	Y+62, r18	; 0x3e
    1108:	8e a9       	ldd	r24, Y+54	; 0x36
    110a:	9e a1       	ldd	r25, Y+38	; 0x26
    110c:	89 17       	cp	r24, r25
    110e:	08 f0       	brcs	.+2      	; 0x1112 <convertArrayToNumber+0xf8>
    1110:	1e ae       	std	Y+62, r1	; 0x3e
    1112:	2f a1       	ldd	r18, Y+39	; 0x27
    1114:	8f a5       	ldd	r24, Y+47	; 0x2f
    1116:	28 0f       	add	r18, r24
    1118:	2f ab       	std	Y+55, r18	; 0x37
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	9f af       	std	Y+63, r25	; 0x3f
    111e:	2f a9       	ldd	r18, Y+55	; 0x37
    1120:	8f a1       	ldd	r24, Y+39	; 0x27
    1122:	28 17       	cp	r18, r24
    1124:	08 f0       	brcs	.+2      	; 0x1128 <convertArrayToNumber+0x10e>
    1126:	1f ae       	std	Y+63, r1	; 0x3f
    1128:	9e ad       	ldd	r25, Y+62	; 0x3e
    112a:	2f a9       	ldd	r18, Y+55	; 0x37
    112c:	92 0f       	add	r25, r18
    112e:	21 96       	adiw	r28, 0x01	; 1
    1130:	9f af       	std	Y+63, r25	; 0x3f
    1132:	21 97       	sbiw	r28, 0x01	; 1
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	22 96       	adiw	r28, 0x02	; 2
    1138:	8f af       	std	Y+63, r24	; 0x3f
    113a:	22 97       	sbiw	r28, 0x02	; 2
    113c:	21 96       	adiw	r28, 0x01	; 1
    113e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1140:	21 97       	sbiw	r28, 0x01	; 1
    1142:	2f a9       	ldd	r18, Y+55	; 0x37
    1144:	92 17       	cp	r25, r18
    1146:	18 f0       	brcs	.+6      	; 0x114e <convertArrayToNumber+0x134>
    1148:	22 96       	adiw	r28, 0x02	; 2
    114a:	1f ae       	std	Y+63, r1	; 0x3f
    114c:	22 97       	sbiw	r28, 0x02	; 2
    114e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1150:	22 96       	adiw	r28, 0x02	; 2
    1152:	9f ad       	ldd	r25, Y+63	; 0x3f
    1154:	22 97       	sbiw	r28, 0x02	; 2
    1156:	89 2b       	or	r24, r25
    1158:	8f af       	std	Y+63, r24	; 0x3f
    115a:	21 96       	adiw	r28, 0x01	; 1
    115c:	2f ad       	ldd	r18, Y+63	; 0x3f
    115e:	21 97       	sbiw	r28, 0x01	; 1
    1160:	2f ab       	std	Y+55, r18	; 0x37
    1162:	88 a5       	ldd	r24, Y+40	; 0x28
    1164:	98 a9       	ldd	r25, Y+48	; 0x30
    1166:	89 0f       	add	r24, r25
    1168:	88 af       	std	Y+56, r24	; 0x38
    116a:	21 e0       	ldi	r18, 0x01	; 1
    116c:	23 96       	adiw	r28, 0x03	; 3
    116e:	2f af       	std	Y+63, r18	; 0x3f
    1170:	23 97       	sbiw	r28, 0x03	; 3
    1172:	88 ad       	ldd	r24, Y+56	; 0x38
    1174:	98 a5       	ldd	r25, Y+40	; 0x28
    1176:	89 17       	cp	r24, r25
    1178:	18 f0       	brcs	.+6      	; 0x1180 <convertArrayToNumber+0x166>
    117a:	23 96       	adiw	r28, 0x03	; 3
    117c:	1f ae       	std	Y+63, r1	; 0x3f
    117e:	23 97       	sbiw	r28, 0x03	; 3
    1180:	2f ad       	ldd	r18, Y+63	; 0x3f
    1182:	88 ad       	ldd	r24, Y+56	; 0x38
    1184:	28 0f       	add	r18, r24
    1186:	24 96       	adiw	r28, 0x04	; 4
    1188:	2f af       	std	Y+63, r18	; 0x3f
    118a:	24 97       	sbiw	r28, 0x04	; 4
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	25 96       	adiw	r28, 0x05	; 5
    1190:	9f af       	std	Y+63, r25	; 0x3f
    1192:	25 97       	sbiw	r28, 0x05	; 5
    1194:	24 96       	adiw	r28, 0x04	; 4
    1196:	2f ad       	ldd	r18, Y+63	; 0x3f
    1198:	24 97       	sbiw	r28, 0x04	; 4
    119a:	88 ad       	ldd	r24, Y+56	; 0x38
    119c:	28 17       	cp	r18, r24
    119e:	18 f0       	brcs	.+6      	; 0x11a6 <convertArrayToNumber+0x18c>
    11a0:	25 96       	adiw	r28, 0x05	; 5
    11a2:	1f ae       	std	Y+63, r1	; 0x3f
    11a4:	25 97       	sbiw	r28, 0x05	; 5
    11a6:	23 96       	adiw	r28, 0x03	; 3
    11a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    11aa:	23 97       	sbiw	r28, 0x03	; 3
    11ac:	25 96       	adiw	r28, 0x05	; 5
    11ae:	2f ad       	ldd	r18, Y+63	; 0x3f
    11b0:	25 97       	sbiw	r28, 0x05	; 5
    11b2:	92 2b       	or	r25, r18
    11b4:	23 96       	adiw	r28, 0x03	; 3
    11b6:	9f af       	std	Y+63, r25	; 0x3f
    11b8:	23 97       	sbiw	r28, 0x03	; 3
    11ba:	24 96       	adiw	r28, 0x04	; 4
    11bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    11be:	24 97       	sbiw	r28, 0x04	; 4
    11c0:	88 af       	std	Y+56, r24	; 0x38
    11c2:	99 a5       	ldd	r25, Y+41	; 0x29
    11c4:	29 a9       	ldd	r18, Y+49	; 0x31
    11c6:	92 0f       	add	r25, r18
    11c8:	99 af       	std	Y+57, r25	; 0x39
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	26 96       	adiw	r28, 0x06	; 6
    11ce:	8f af       	std	Y+63, r24	; 0x3f
    11d0:	26 97       	sbiw	r28, 0x06	; 6
    11d2:	99 ad       	ldd	r25, Y+57	; 0x39
    11d4:	29 a5       	ldd	r18, Y+41	; 0x29
    11d6:	92 17       	cp	r25, r18
    11d8:	18 f0       	brcs	.+6      	; 0x11e0 <convertArrayToNumber+0x1c6>
    11da:	26 96       	adiw	r28, 0x06	; 6
    11dc:	1f ae       	std	Y+63, r1	; 0x3f
    11de:	26 97       	sbiw	r28, 0x06	; 6
    11e0:	23 96       	adiw	r28, 0x03	; 3
    11e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    11e4:	23 97       	sbiw	r28, 0x03	; 3
    11e6:	99 ad       	ldd	r25, Y+57	; 0x39
    11e8:	89 0f       	add	r24, r25
    11ea:	27 96       	adiw	r28, 0x07	; 7
    11ec:	8f af       	std	Y+63, r24	; 0x3f
    11ee:	27 97       	sbiw	r28, 0x07	; 7
    11f0:	21 e0       	ldi	r18, 0x01	; 1
    11f2:	28 96       	adiw	r28, 0x08	; 8
    11f4:	2f af       	std	Y+63, r18	; 0x3f
    11f6:	28 97       	sbiw	r28, 0x08	; 8
    11f8:	27 96       	adiw	r28, 0x07	; 7
    11fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    11fc:	27 97       	sbiw	r28, 0x07	; 7
    11fe:	99 ad       	ldd	r25, Y+57	; 0x39
    1200:	89 17       	cp	r24, r25
    1202:	18 f0       	brcs	.+6      	; 0x120a <convertArrayToNumber+0x1f0>
    1204:	28 96       	adiw	r28, 0x08	; 8
    1206:	1f ae       	std	Y+63, r1	; 0x3f
    1208:	28 97       	sbiw	r28, 0x08	; 8
    120a:	26 96       	adiw	r28, 0x06	; 6
    120c:	2f ad       	ldd	r18, Y+63	; 0x3f
    120e:	26 97       	sbiw	r28, 0x06	; 6
    1210:	28 96       	adiw	r28, 0x08	; 8
    1212:	8f ad       	ldd	r24, Y+63	; 0x3f
    1214:	28 97       	sbiw	r28, 0x08	; 8
    1216:	28 2b       	or	r18, r24
    1218:	26 96       	adiw	r28, 0x06	; 6
    121a:	2f af       	std	Y+63, r18	; 0x3f
    121c:	26 97       	sbiw	r28, 0x06	; 6
    121e:	27 96       	adiw	r28, 0x07	; 7
    1220:	9f ad       	ldd	r25, Y+63	; 0x3f
    1222:	27 97       	sbiw	r28, 0x07	; 7
    1224:	99 af       	std	Y+57, r25	; 0x39
    1226:	2a a5       	ldd	r18, Y+42	; 0x2a
    1228:	8a a9       	ldd	r24, Y+50	; 0x32
    122a:	28 0f       	add	r18, r24
    122c:	2a af       	std	Y+58, r18	; 0x3a
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	29 96       	adiw	r28, 0x09	; 9
    1232:	9f af       	std	Y+63, r25	; 0x3f
    1234:	29 97       	sbiw	r28, 0x09	; 9
    1236:	2a ad       	ldd	r18, Y+58	; 0x3a
    1238:	8a a5       	ldd	r24, Y+42	; 0x2a
    123a:	28 17       	cp	r18, r24
    123c:	18 f0       	brcs	.+6      	; 0x1244 <convertArrayToNumber+0x22a>
    123e:	29 96       	adiw	r28, 0x09	; 9
    1240:	1f ae       	std	Y+63, r1	; 0x3f
    1242:	29 97       	sbiw	r28, 0x09	; 9
    1244:	26 96       	adiw	r28, 0x06	; 6
    1246:	9f ad       	ldd	r25, Y+63	; 0x3f
    1248:	26 97       	sbiw	r28, 0x06	; 6
    124a:	2a ad       	ldd	r18, Y+58	; 0x3a
    124c:	92 0f       	add	r25, r18
    124e:	2a 96       	adiw	r28, 0x0a	; 10
    1250:	9f af       	std	Y+63, r25	; 0x3f
    1252:	2a 97       	sbiw	r28, 0x0a	; 10
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	2b 96       	adiw	r28, 0x0b	; 11
    1258:	8f af       	std	Y+63, r24	; 0x3f
    125a:	2b 97       	sbiw	r28, 0x0b	; 11
    125c:	2a 96       	adiw	r28, 0x0a	; 10
    125e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1260:	2a 97       	sbiw	r28, 0x0a	; 10
    1262:	2a ad       	ldd	r18, Y+58	; 0x3a
    1264:	92 17       	cp	r25, r18
    1266:	18 f0       	brcs	.+6      	; 0x126e <convertArrayToNumber+0x254>
    1268:	2b 96       	adiw	r28, 0x0b	; 11
    126a:	1f ae       	std	Y+63, r1	; 0x3f
    126c:	2b 97       	sbiw	r28, 0x0b	; 11
    126e:	29 96       	adiw	r28, 0x09	; 9
    1270:	8f ad       	ldd	r24, Y+63	; 0x3f
    1272:	29 97       	sbiw	r28, 0x09	; 9
    1274:	2b 96       	adiw	r28, 0x0b	; 11
    1276:	9f ad       	ldd	r25, Y+63	; 0x3f
    1278:	2b 97       	sbiw	r28, 0x0b	; 11
    127a:	89 2b       	or	r24, r25
    127c:	29 96       	adiw	r28, 0x09	; 9
    127e:	8f af       	std	Y+63, r24	; 0x3f
    1280:	29 97       	sbiw	r28, 0x09	; 9
    1282:	2a 96       	adiw	r28, 0x0a	; 10
    1284:	2f ad       	ldd	r18, Y+63	; 0x3f
    1286:	2a 97       	sbiw	r28, 0x0a	; 10
    1288:	2a af       	std	Y+58, r18	; 0x3a
    128a:	8b a5       	ldd	r24, Y+43	; 0x2b
    128c:	9b a9       	ldd	r25, Y+51	; 0x33
    128e:	89 0f       	add	r24, r25
    1290:	8b af       	std	Y+59, r24	; 0x3b
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	2c 96       	adiw	r28, 0x0c	; 12
    1296:	2f af       	std	Y+63, r18	; 0x3f
    1298:	2c 97       	sbiw	r28, 0x0c	; 12
    129a:	8b ad       	ldd	r24, Y+59	; 0x3b
    129c:	9b a5       	ldd	r25, Y+43	; 0x2b
    129e:	89 17       	cp	r24, r25
    12a0:	18 f0       	brcs	.+6      	; 0x12a8 <convertArrayToNumber+0x28e>
    12a2:	2c 96       	adiw	r28, 0x0c	; 12
    12a4:	1f ae       	std	Y+63, r1	; 0x3f
    12a6:	2c 97       	sbiw	r28, 0x0c	; 12
    12a8:	29 96       	adiw	r28, 0x09	; 9
    12aa:	2f ad       	ldd	r18, Y+63	; 0x3f
    12ac:	29 97       	sbiw	r28, 0x09	; 9
    12ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    12b0:	28 0f       	add	r18, r24
    12b2:	2d 96       	adiw	r28, 0x0d	; 13
    12b4:	2f af       	std	Y+63, r18	; 0x3f
    12b6:	2d 97       	sbiw	r28, 0x0d	; 13
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	2e 96       	adiw	r28, 0x0e	; 14
    12bc:	9f af       	std	Y+63, r25	; 0x3f
    12be:	2e 97       	sbiw	r28, 0x0e	; 14
    12c0:	2d 96       	adiw	r28, 0x0d	; 13
    12c2:	2f ad       	ldd	r18, Y+63	; 0x3f
    12c4:	2d 97       	sbiw	r28, 0x0d	; 13
    12c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    12c8:	28 17       	cp	r18, r24
    12ca:	18 f0       	brcs	.+6      	; 0x12d2 <convertArrayToNumber+0x2b8>
    12cc:	2e 96       	adiw	r28, 0x0e	; 14
    12ce:	1f ae       	std	Y+63, r1	; 0x3f
    12d0:	2e 97       	sbiw	r28, 0x0e	; 14
    12d2:	2c 96       	adiw	r28, 0x0c	; 12
    12d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    12d6:	2c 97       	sbiw	r28, 0x0c	; 12
    12d8:	2e 96       	adiw	r28, 0x0e	; 14
    12da:	2f ad       	ldd	r18, Y+63	; 0x3f
    12dc:	2e 97       	sbiw	r28, 0x0e	; 14
    12de:	92 2b       	or	r25, r18
    12e0:	2c 96       	adiw	r28, 0x0c	; 12
    12e2:	9f af       	std	Y+63, r25	; 0x3f
    12e4:	2c 97       	sbiw	r28, 0x0c	; 12
    12e6:	2d 96       	adiw	r28, 0x0d	; 13
    12e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    12ea:	2d 97       	sbiw	r28, 0x0d	; 13
    12ec:	8b af       	std	Y+59, r24	; 0x3b
    12ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    12f0:	2c a9       	ldd	r18, Y+52	; 0x34
    12f2:	92 0f       	add	r25, r18
    12f4:	9c af       	std	Y+60, r25	; 0x3c
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	2f 96       	adiw	r28, 0x0f	; 15
    12fa:	8f af       	std	Y+63, r24	; 0x3f
    12fc:	2f 97       	sbiw	r28, 0x0f	; 15
    12fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    1300:	2c a5       	ldd	r18, Y+44	; 0x2c
    1302:	92 17       	cp	r25, r18
    1304:	18 f0       	brcs	.+6      	; 0x130c <convertArrayToNumber+0x2f2>
    1306:	2f 96       	adiw	r28, 0x0f	; 15
    1308:	1f ae       	std	Y+63, r1	; 0x3f
    130a:	2f 97       	sbiw	r28, 0x0f	; 15
    130c:	2c 96       	adiw	r28, 0x0c	; 12
    130e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1310:	2c 97       	sbiw	r28, 0x0c	; 12
    1312:	9c ad       	ldd	r25, Y+60	; 0x3c
    1314:	89 0f       	add	r24, r25
    1316:	60 96       	adiw	r28, 0x10	; 16
    1318:	8f af       	std	Y+63, r24	; 0x3f
    131a:	60 97       	sbiw	r28, 0x10	; 16
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	61 96       	adiw	r28, 0x11	; 17
    1320:	2f af       	std	Y+63, r18	; 0x3f
    1322:	61 97       	sbiw	r28, 0x11	; 17
    1324:	60 96       	adiw	r28, 0x10	; 16
    1326:	8f ad       	ldd	r24, Y+63	; 0x3f
    1328:	60 97       	sbiw	r28, 0x10	; 16
    132a:	9c ad       	ldd	r25, Y+60	; 0x3c
    132c:	89 17       	cp	r24, r25
    132e:	18 f0       	brcs	.+6      	; 0x1336 <convertArrayToNumber+0x31c>
    1330:	61 96       	adiw	r28, 0x11	; 17
    1332:	1f ae       	std	Y+63, r1	; 0x3f
    1334:	61 97       	sbiw	r28, 0x11	; 17
    1336:	2f 96       	adiw	r28, 0x0f	; 15
    1338:	2f ad       	ldd	r18, Y+63	; 0x3f
    133a:	2f 97       	sbiw	r28, 0x0f	; 15
    133c:	61 96       	adiw	r28, 0x11	; 17
    133e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1340:	61 97       	sbiw	r28, 0x11	; 17
    1342:	28 2b       	or	r18, r24
    1344:	2f 96       	adiw	r28, 0x0f	; 15
    1346:	2f af       	std	Y+63, r18	; 0x3f
    1348:	2f 97       	sbiw	r28, 0x0f	; 15
    134a:	60 96       	adiw	r28, 0x10	; 16
    134c:	9f ad       	ldd	r25, Y+63	; 0x3f
    134e:	60 97       	sbiw	r28, 0x10	; 16
    1350:	9c af       	std	Y+60, r25	; 0x3c
    1352:	2d a5       	ldd	r18, Y+45	; 0x2d
    1354:	8d a9       	ldd	r24, Y+53	; 0x35
    1356:	28 0f       	add	r18, r24
    1358:	2d af       	std	Y+61, r18	; 0x3d
    135a:	2f 96       	adiw	r28, 0x0f	; 15
    135c:	8f ad       	ldd	r24, Y+63	; 0x3f
    135e:	2f 97       	sbiw	r28, 0x0f	; 15
    1360:	9d ad       	ldd	r25, Y+61	; 0x3d
    1362:	89 0f       	add	r24, r25
    1364:	8d af       	std	Y+61, r24	; 0x3d
    1366:	2e a9       	ldd	r18, Y+54	; 0x36
    1368:	29 87       	std	Y+9, r18	; 0x09
    136a:	8f a9       	ldd	r24, Y+55	; 0x37
    136c:	8a 87       	std	Y+10, r24	; 0x0a
    136e:	98 ad       	ldd	r25, Y+56	; 0x38
    1370:	9b 87       	std	Y+11, r25	; 0x0b
    1372:	29 ad       	ldd	r18, Y+57	; 0x39
    1374:	2c 87       	std	Y+12, r18	; 0x0c
    1376:	8a ad       	ldd	r24, Y+58	; 0x3a
    1378:	8d 87       	std	Y+13, r24	; 0x0d
    137a:	9b ad       	ldd	r25, Y+59	; 0x3b
    137c:	9e 87       	std	Y+14, r25	; 0x0e
    137e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1380:	2f 87       	std	Y+15, r18	; 0x0f
    1382:	8d ad       	ldd	r24, Y+61	; 0x3d
    1384:	88 8b       	std	Y+16, r24	; 0x10
	uint64 tens=1;
	sint64 operand=0;
	for(count=0; count<size; count++)
	{
		tens =1;
		for (exponent= (size-count-1); exponent>0; exponent--)
    1386:	89 89       	ldd	r24, Y+17	; 0x11
    1388:	81 50       	subi	r24, 0x01	; 1
    138a:	89 8b       	std	Y+17, r24	; 0x11
    138c:	89 89       	ldd	r24, Y+17	; 0x11
    138e:	88 23       	and	r24, r24
    1390:	09 f0       	breq	.+2      	; 0x1394 <convertArrayToNumber+0x37a>
    1392:	7e ce       	rjmp	.-772    	; 0x1090 <convertArrayToNumber+0x76>
		{
			tens = tens * 10;
		}

		operand += (ptr[count])* tens;
    1394:	8a 89       	ldd	r24, Y+18	; 0x12
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	8b 89       	ldd	r24, Y+19	; 0x13
    139c:	9c 89       	ldd	r25, Y+20	; 0x14
    139e:	fc 01       	movw	r30, r24
    13a0:	e2 0f       	add	r30, r18
    13a2:	f3 1f       	adc	r31, r19
    13a4:	80 81       	ld	r24, Z
    13a6:	a8 2e       	mov	r10, r24
    13a8:	bb 24       	eor	r11, r11
    13aa:	cc 24       	eor	r12, r12
    13ac:	dd 24       	eor	r13, r13
    13ae:	ee 24       	eor	r14, r14
    13b0:	ff 24       	eor	r15, r15
    13b2:	87 01       	movw	r16, r14
    13b4:	2a 2d       	mov	r18, r10
    13b6:	3b 2d       	mov	r19, r11
    13b8:	4c 2d       	mov	r20, r12
    13ba:	5d 2d       	mov	r21, r13
    13bc:	6e 2d       	mov	r22, r14
    13be:	7f 2d       	mov	r23, r15
    13c0:	80 2f       	mov	r24, r16
    13c2:	91 2f       	mov	r25, r17
    13c4:	a9 84       	ldd	r10, Y+9	; 0x09
    13c6:	ba 84       	ldd	r11, Y+10	; 0x0a
    13c8:	cb 84       	ldd	r12, Y+11	; 0x0b
    13ca:	dc 84       	ldd	r13, Y+12	; 0x0c
    13cc:	ed 84       	ldd	r14, Y+13	; 0x0d
    13ce:	fe 84       	ldd	r15, Y+14	; 0x0e
    13d0:	0f 85       	ldd	r16, Y+15	; 0x0f
    13d2:	18 89       	ldd	r17, Y+16	; 0x10
    13d4:	0e 94 41 00 	call	0x82	; 0x82 <__muldi3>
    13d8:	a2 2e       	mov	r10, r18
    13da:	b3 2e       	mov	r11, r19
    13dc:	c4 2e       	mov	r12, r20
    13de:	d5 2e       	mov	r13, r21
    13e0:	e6 2e       	mov	r14, r22
    13e2:	f7 2e       	mov	r15, r23
    13e4:	08 2f       	mov	r16, r24
    13e6:	19 2f       	mov	r17, r25
    13e8:	ae 8e       	std	Y+30, r10	; 0x1e
    13ea:	bf 8e       	std	Y+31, r11	; 0x1f
    13ec:	c8 a2       	std	Y+32, r12	; 0x20
    13ee:	d9 a2       	std	Y+33, r13	; 0x21
    13f0:	ea a2       	std	Y+34, r14	; 0x22
    13f2:	fb a2       	std	Y+35, r15	; 0x23
    13f4:	0c a3       	std	Y+36, r16	; 0x24
    13f6:	1d a3       	std	Y+37, r17	; 0x25
    13f8:	99 81       	ldd	r25, Y+1	; 0x01
    13fa:	9e 8b       	std	Y+22, r25	; 0x16
    13fc:	2a 81       	ldd	r18, Y+2	; 0x02
    13fe:	2f 8b       	std	Y+23, r18	; 0x17
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 8f       	std	Y+24, r24	; 0x18
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	99 8f       	std	Y+25, r25	; 0x19
    1408:	2d 81       	ldd	r18, Y+5	; 0x05
    140a:	2a 8f       	std	Y+26, r18	; 0x1a
    140c:	8e 81       	ldd	r24, Y+6	; 0x06
    140e:	8b 8f       	std	Y+27, r24	; 0x1b
    1410:	9f 81       	ldd	r25, Y+7	; 0x07
    1412:	9c 8f       	std	Y+28, r25	; 0x1c
    1414:	28 85       	ldd	r18, Y+8	; 0x08
    1416:	2d 8f       	std	Y+29, r18	; 0x1d
    1418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    141a:	9e 89       	ldd	r25, Y+22	; 0x16
    141c:	89 0f       	add	r24, r25
    141e:	62 96       	adiw	r28, 0x12	; 18
    1420:	8f af       	std	Y+63, r24	; 0x3f
    1422:	62 97       	sbiw	r28, 0x12	; 18
    1424:	21 e0       	ldi	r18, 0x01	; 1
    1426:	6a 96       	adiw	r28, 0x1a	; 26
    1428:	2f af       	std	Y+63, r18	; 0x3f
    142a:	6a 97       	sbiw	r28, 0x1a	; 26
    142c:	62 96       	adiw	r28, 0x12	; 18
    142e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1430:	62 97       	sbiw	r28, 0x12	; 18
    1432:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1434:	89 17       	cp	r24, r25
    1436:	18 f0       	brcs	.+6      	; 0x143e <convertArrayToNumber+0x424>
    1438:	6a 96       	adiw	r28, 0x1a	; 26
    143a:	1f ae       	std	Y+63, r1	; 0x3f
    143c:	6a 97       	sbiw	r28, 0x1a	; 26
    143e:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1440:	8f 89       	ldd	r24, Y+23	; 0x17
    1442:	28 0f       	add	r18, r24
    1444:	63 96       	adiw	r28, 0x13	; 19
    1446:	2f af       	std	Y+63, r18	; 0x3f
    1448:	63 97       	sbiw	r28, 0x13	; 19
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	6b 96       	adiw	r28, 0x1b	; 27
    144e:	9f af       	std	Y+63, r25	; 0x3f
    1450:	6b 97       	sbiw	r28, 0x1b	; 27
    1452:	63 96       	adiw	r28, 0x13	; 19
    1454:	2f ad       	ldd	r18, Y+63	; 0x3f
    1456:	63 97       	sbiw	r28, 0x13	; 19
    1458:	8f 8d       	ldd	r24, Y+31	; 0x1f
    145a:	28 17       	cp	r18, r24
    145c:	18 f0       	brcs	.+6      	; 0x1464 <convertArrayToNumber+0x44a>
    145e:	6b 96       	adiw	r28, 0x1b	; 27
    1460:	1f ae       	std	Y+63, r1	; 0x3f
    1462:	6b 97       	sbiw	r28, 0x1b	; 27
    1464:	6a 96       	adiw	r28, 0x1a	; 26
    1466:	9f ad       	ldd	r25, Y+63	; 0x3f
    1468:	6a 97       	sbiw	r28, 0x1a	; 26
    146a:	63 96       	adiw	r28, 0x13	; 19
    146c:	2f ad       	ldd	r18, Y+63	; 0x3f
    146e:	63 97       	sbiw	r28, 0x13	; 19
    1470:	92 0f       	add	r25, r18
    1472:	6c 96       	adiw	r28, 0x1c	; 28
    1474:	9f af       	std	Y+63, r25	; 0x3f
    1476:	6c 97       	sbiw	r28, 0x1c	; 28
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	6d 96       	adiw	r28, 0x1d	; 29
    147c:	8f af       	std	Y+63, r24	; 0x3f
    147e:	6d 97       	sbiw	r28, 0x1d	; 29
    1480:	6c 96       	adiw	r28, 0x1c	; 28
    1482:	9f ad       	ldd	r25, Y+63	; 0x3f
    1484:	6c 97       	sbiw	r28, 0x1c	; 28
    1486:	63 96       	adiw	r28, 0x13	; 19
    1488:	2f ad       	ldd	r18, Y+63	; 0x3f
    148a:	63 97       	sbiw	r28, 0x13	; 19
    148c:	92 17       	cp	r25, r18
    148e:	18 f0       	brcs	.+6      	; 0x1496 <convertArrayToNumber+0x47c>
    1490:	6d 96       	adiw	r28, 0x1d	; 29
    1492:	1f ae       	std	Y+63, r1	; 0x3f
    1494:	6d 97       	sbiw	r28, 0x1d	; 29
    1496:	6b 96       	adiw	r28, 0x1b	; 27
    1498:	8f ad       	ldd	r24, Y+63	; 0x3f
    149a:	6b 97       	sbiw	r28, 0x1b	; 27
    149c:	6d 96       	adiw	r28, 0x1d	; 29
    149e:	9f ad       	ldd	r25, Y+63	; 0x3f
    14a0:	6d 97       	sbiw	r28, 0x1d	; 29
    14a2:	89 2b       	or	r24, r25
    14a4:	6b 96       	adiw	r28, 0x1b	; 27
    14a6:	8f af       	std	Y+63, r24	; 0x3f
    14a8:	6b 97       	sbiw	r28, 0x1b	; 27
    14aa:	6c 96       	adiw	r28, 0x1c	; 28
    14ac:	2f ad       	ldd	r18, Y+63	; 0x3f
    14ae:	6c 97       	sbiw	r28, 0x1c	; 28
    14b0:	63 96       	adiw	r28, 0x13	; 19
    14b2:	2f af       	std	Y+63, r18	; 0x3f
    14b4:	63 97       	sbiw	r28, 0x13	; 19
    14b6:	88 a1       	ldd	r24, Y+32	; 0x20
    14b8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ba:	89 0f       	add	r24, r25
    14bc:	64 96       	adiw	r28, 0x14	; 20
    14be:	8f af       	std	Y+63, r24	; 0x3f
    14c0:	64 97       	sbiw	r28, 0x14	; 20
    14c2:	21 e0       	ldi	r18, 0x01	; 1
    14c4:	6e 96       	adiw	r28, 0x1e	; 30
    14c6:	2f af       	std	Y+63, r18	; 0x3f
    14c8:	6e 97       	sbiw	r28, 0x1e	; 30
    14ca:	64 96       	adiw	r28, 0x14	; 20
    14cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    14ce:	64 97       	sbiw	r28, 0x14	; 20
    14d0:	98 a1       	ldd	r25, Y+32	; 0x20
    14d2:	89 17       	cp	r24, r25
    14d4:	18 f0       	brcs	.+6      	; 0x14dc <convertArrayToNumber+0x4c2>
    14d6:	6e 96       	adiw	r28, 0x1e	; 30
    14d8:	1f ae       	std	Y+63, r1	; 0x3f
    14da:	6e 97       	sbiw	r28, 0x1e	; 30
    14dc:	6b 96       	adiw	r28, 0x1b	; 27
    14de:	2f ad       	ldd	r18, Y+63	; 0x3f
    14e0:	6b 97       	sbiw	r28, 0x1b	; 27
    14e2:	64 96       	adiw	r28, 0x14	; 20
    14e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    14e6:	64 97       	sbiw	r28, 0x14	; 20
    14e8:	28 0f       	add	r18, r24
    14ea:	6f 96       	adiw	r28, 0x1f	; 31
    14ec:	2f af       	std	Y+63, r18	; 0x3f
    14ee:	6f 97       	sbiw	r28, 0x1f	; 31
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	a0 96       	adiw	r28, 0x20	; 32
    14f4:	9f af       	std	Y+63, r25	; 0x3f
    14f6:	a0 97       	sbiw	r28, 0x20	; 32
    14f8:	6f 96       	adiw	r28, 0x1f	; 31
    14fa:	2f ad       	ldd	r18, Y+63	; 0x3f
    14fc:	6f 97       	sbiw	r28, 0x1f	; 31
    14fe:	64 96       	adiw	r28, 0x14	; 20
    1500:	8f ad       	ldd	r24, Y+63	; 0x3f
    1502:	64 97       	sbiw	r28, 0x14	; 20
    1504:	28 17       	cp	r18, r24
    1506:	18 f0       	brcs	.+6      	; 0x150e <convertArrayToNumber+0x4f4>
    1508:	a0 96       	adiw	r28, 0x20	; 32
    150a:	1f ae       	std	Y+63, r1	; 0x3f
    150c:	a0 97       	sbiw	r28, 0x20	; 32
    150e:	6e 96       	adiw	r28, 0x1e	; 30
    1510:	9f ad       	ldd	r25, Y+63	; 0x3f
    1512:	6e 97       	sbiw	r28, 0x1e	; 30
    1514:	a0 96       	adiw	r28, 0x20	; 32
    1516:	2f ad       	ldd	r18, Y+63	; 0x3f
    1518:	a0 97       	sbiw	r28, 0x20	; 32
    151a:	92 2b       	or	r25, r18
    151c:	6e 96       	adiw	r28, 0x1e	; 30
    151e:	9f af       	std	Y+63, r25	; 0x3f
    1520:	6e 97       	sbiw	r28, 0x1e	; 30
    1522:	6f 96       	adiw	r28, 0x1f	; 31
    1524:	8f ad       	ldd	r24, Y+63	; 0x3f
    1526:	6f 97       	sbiw	r28, 0x1f	; 31
    1528:	64 96       	adiw	r28, 0x14	; 20
    152a:	8f af       	std	Y+63, r24	; 0x3f
    152c:	64 97       	sbiw	r28, 0x14	; 20
    152e:	99 a1       	ldd	r25, Y+33	; 0x21
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	92 0f       	add	r25, r18
    1534:	65 96       	adiw	r28, 0x15	; 21
    1536:	9f af       	std	Y+63, r25	; 0x3f
    1538:	65 97       	sbiw	r28, 0x15	; 21
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	a1 96       	adiw	r28, 0x21	; 33
    153e:	8f af       	std	Y+63, r24	; 0x3f
    1540:	a1 97       	sbiw	r28, 0x21	; 33
    1542:	65 96       	adiw	r28, 0x15	; 21
    1544:	9f ad       	ldd	r25, Y+63	; 0x3f
    1546:	65 97       	sbiw	r28, 0x15	; 21
    1548:	29 a1       	ldd	r18, Y+33	; 0x21
    154a:	92 17       	cp	r25, r18
    154c:	18 f0       	brcs	.+6      	; 0x1554 <convertArrayToNumber+0x53a>
    154e:	a1 96       	adiw	r28, 0x21	; 33
    1550:	1f ae       	std	Y+63, r1	; 0x3f
    1552:	a1 97       	sbiw	r28, 0x21	; 33
    1554:	6e 96       	adiw	r28, 0x1e	; 30
    1556:	8f ad       	ldd	r24, Y+63	; 0x3f
    1558:	6e 97       	sbiw	r28, 0x1e	; 30
    155a:	65 96       	adiw	r28, 0x15	; 21
    155c:	9f ad       	ldd	r25, Y+63	; 0x3f
    155e:	65 97       	sbiw	r28, 0x15	; 21
    1560:	89 0f       	add	r24, r25
    1562:	a2 96       	adiw	r28, 0x22	; 34
    1564:	8f af       	std	Y+63, r24	; 0x3f
    1566:	a2 97       	sbiw	r28, 0x22	; 34
    1568:	21 e0       	ldi	r18, 0x01	; 1
    156a:	a3 96       	adiw	r28, 0x23	; 35
    156c:	2f af       	std	Y+63, r18	; 0x3f
    156e:	a3 97       	sbiw	r28, 0x23	; 35
    1570:	a2 96       	adiw	r28, 0x22	; 34
    1572:	8f ad       	ldd	r24, Y+63	; 0x3f
    1574:	a2 97       	sbiw	r28, 0x22	; 34
    1576:	65 96       	adiw	r28, 0x15	; 21
    1578:	9f ad       	ldd	r25, Y+63	; 0x3f
    157a:	65 97       	sbiw	r28, 0x15	; 21
    157c:	89 17       	cp	r24, r25
    157e:	18 f0       	brcs	.+6      	; 0x1586 <convertArrayToNumber+0x56c>
    1580:	a3 96       	adiw	r28, 0x23	; 35
    1582:	1f ae       	std	Y+63, r1	; 0x3f
    1584:	a3 97       	sbiw	r28, 0x23	; 35
    1586:	a1 96       	adiw	r28, 0x21	; 33
    1588:	2f ad       	ldd	r18, Y+63	; 0x3f
    158a:	a1 97       	sbiw	r28, 0x21	; 33
    158c:	a3 96       	adiw	r28, 0x23	; 35
    158e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1590:	a3 97       	sbiw	r28, 0x23	; 35
    1592:	28 2b       	or	r18, r24
    1594:	a1 96       	adiw	r28, 0x21	; 33
    1596:	2f af       	std	Y+63, r18	; 0x3f
    1598:	a1 97       	sbiw	r28, 0x21	; 33
    159a:	a2 96       	adiw	r28, 0x22	; 34
    159c:	9f ad       	ldd	r25, Y+63	; 0x3f
    159e:	a2 97       	sbiw	r28, 0x22	; 34
    15a0:	65 96       	adiw	r28, 0x15	; 21
    15a2:	9f af       	std	Y+63, r25	; 0x3f
    15a4:	65 97       	sbiw	r28, 0x15	; 21
    15a6:	2a a1       	ldd	r18, Y+34	; 0x22
    15a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15aa:	28 0f       	add	r18, r24
    15ac:	66 96       	adiw	r28, 0x16	; 22
    15ae:	2f af       	std	Y+63, r18	; 0x3f
    15b0:	66 97       	sbiw	r28, 0x16	; 22
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	a4 96       	adiw	r28, 0x24	; 36
    15b6:	9f af       	std	Y+63, r25	; 0x3f
    15b8:	a4 97       	sbiw	r28, 0x24	; 36
    15ba:	66 96       	adiw	r28, 0x16	; 22
    15bc:	2f ad       	ldd	r18, Y+63	; 0x3f
    15be:	66 97       	sbiw	r28, 0x16	; 22
    15c0:	8a a1       	ldd	r24, Y+34	; 0x22
    15c2:	28 17       	cp	r18, r24
    15c4:	18 f0       	brcs	.+6      	; 0x15cc <convertArrayToNumber+0x5b2>
    15c6:	a4 96       	adiw	r28, 0x24	; 36
    15c8:	1f ae       	std	Y+63, r1	; 0x3f
    15ca:	a4 97       	sbiw	r28, 0x24	; 36
    15cc:	a1 96       	adiw	r28, 0x21	; 33
    15ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    15d0:	a1 97       	sbiw	r28, 0x21	; 33
    15d2:	66 96       	adiw	r28, 0x16	; 22
    15d4:	2f ad       	ldd	r18, Y+63	; 0x3f
    15d6:	66 97       	sbiw	r28, 0x16	; 22
    15d8:	92 0f       	add	r25, r18
    15da:	a5 96       	adiw	r28, 0x25	; 37
    15dc:	9f af       	std	Y+63, r25	; 0x3f
    15de:	a5 97       	sbiw	r28, 0x25	; 37
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	a6 96       	adiw	r28, 0x26	; 38
    15e4:	8f af       	std	Y+63, r24	; 0x3f
    15e6:	a6 97       	sbiw	r28, 0x26	; 38
    15e8:	a5 96       	adiw	r28, 0x25	; 37
    15ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    15ec:	a5 97       	sbiw	r28, 0x25	; 37
    15ee:	66 96       	adiw	r28, 0x16	; 22
    15f0:	2f ad       	ldd	r18, Y+63	; 0x3f
    15f2:	66 97       	sbiw	r28, 0x16	; 22
    15f4:	92 17       	cp	r25, r18
    15f6:	18 f0       	brcs	.+6      	; 0x15fe <convertArrayToNumber+0x5e4>
    15f8:	a6 96       	adiw	r28, 0x26	; 38
    15fa:	1f ae       	std	Y+63, r1	; 0x3f
    15fc:	a6 97       	sbiw	r28, 0x26	; 38
    15fe:	a4 96       	adiw	r28, 0x24	; 36
    1600:	8f ad       	ldd	r24, Y+63	; 0x3f
    1602:	a4 97       	sbiw	r28, 0x24	; 36
    1604:	a6 96       	adiw	r28, 0x26	; 38
    1606:	9f ad       	ldd	r25, Y+63	; 0x3f
    1608:	a6 97       	sbiw	r28, 0x26	; 38
    160a:	89 2b       	or	r24, r25
    160c:	a4 96       	adiw	r28, 0x24	; 36
    160e:	8f af       	std	Y+63, r24	; 0x3f
    1610:	a4 97       	sbiw	r28, 0x24	; 36
    1612:	a5 96       	adiw	r28, 0x25	; 37
    1614:	2f ad       	ldd	r18, Y+63	; 0x3f
    1616:	a5 97       	sbiw	r28, 0x25	; 37
    1618:	66 96       	adiw	r28, 0x16	; 22
    161a:	2f af       	std	Y+63, r18	; 0x3f
    161c:	66 97       	sbiw	r28, 0x16	; 22
    161e:	8b a1       	ldd	r24, Y+35	; 0x23
    1620:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1622:	89 0f       	add	r24, r25
    1624:	67 96       	adiw	r28, 0x17	; 23
    1626:	8f af       	std	Y+63, r24	; 0x3f
    1628:	67 97       	sbiw	r28, 0x17	; 23
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	a7 96       	adiw	r28, 0x27	; 39
    162e:	2f af       	std	Y+63, r18	; 0x3f
    1630:	a7 97       	sbiw	r28, 0x27	; 39
    1632:	67 96       	adiw	r28, 0x17	; 23
    1634:	8f ad       	ldd	r24, Y+63	; 0x3f
    1636:	67 97       	sbiw	r28, 0x17	; 23
    1638:	9b a1       	ldd	r25, Y+35	; 0x23
    163a:	89 17       	cp	r24, r25
    163c:	18 f0       	brcs	.+6      	; 0x1644 <convertArrayToNumber+0x62a>
    163e:	a7 96       	adiw	r28, 0x27	; 39
    1640:	1f ae       	std	Y+63, r1	; 0x3f
    1642:	a7 97       	sbiw	r28, 0x27	; 39
    1644:	a4 96       	adiw	r28, 0x24	; 36
    1646:	2f ad       	ldd	r18, Y+63	; 0x3f
    1648:	a4 97       	sbiw	r28, 0x24	; 36
    164a:	67 96       	adiw	r28, 0x17	; 23
    164c:	8f ad       	ldd	r24, Y+63	; 0x3f
    164e:	67 97       	sbiw	r28, 0x17	; 23
    1650:	28 0f       	add	r18, r24
    1652:	a8 96       	adiw	r28, 0x28	; 40
    1654:	2f af       	std	Y+63, r18	; 0x3f
    1656:	a8 97       	sbiw	r28, 0x28	; 40
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	a9 96       	adiw	r28, 0x29	; 41
    165c:	9f af       	std	Y+63, r25	; 0x3f
    165e:	a9 97       	sbiw	r28, 0x29	; 41
    1660:	a8 96       	adiw	r28, 0x28	; 40
    1662:	2f ad       	ldd	r18, Y+63	; 0x3f
    1664:	a8 97       	sbiw	r28, 0x28	; 40
    1666:	67 96       	adiw	r28, 0x17	; 23
    1668:	8f ad       	ldd	r24, Y+63	; 0x3f
    166a:	67 97       	sbiw	r28, 0x17	; 23
    166c:	28 17       	cp	r18, r24
    166e:	18 f0       	brcs	.+6      	; 0x1676 <convertArrayToNumber+0x65c>
    1670:	a9 96       	adiw	r28, 0x29	; 41
    1672:	1f ae       	std	Y+63, r1	; 0x3f
    1674:	a9 97       	sbiw	r28, 0x29	; 41
    1676:	a7 96       	adiw	r28, 0x27	; 39
    1678:	9f ad       	ldd	r25, Y+63	; 0x3f
    167a:	a7 97       	sbiw	r28, 0x27	; 39
    167c:	a9 96       	adiw	r28, 0x29	; 41
    167e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1680:	a9 97       	sbiw	r28, 0x29	; 41
    1682:	92 2b       	or	r25, r18
    1684:	a7 96       	adiw	r28, 0x27	; 39
    1686:	9f af       	std	Y+63, r25	; 0x3f
    1688:	a7 97       	sbiw	r28, 0x27	; 39
    168a:	a8 96       	adiw	r28, 0x28	; 40
    168c:	8f ad       	ldd	r24, Y+63	; 0x3f
    168e:	a8 97       	sbiw	r28, 0x28	; 40
    1690:	67 96       	adiw	r28, 0x17	; 23
    1692:	8f af       	std	Y+63, r24	; 0x3f
    1694:	67 97       	sbiw	r28, 0x17	; 23
    1696:	9c a1       	ldd	r25, Y+36	; 0x24
    1698:	2c 8d       	ldd	r18, Y+28	; 0x1c
    169a:	92 0f       	add	r25, r18
    169c:	68 96       	adiw	r28, 0x18	; 24
    169e:	9f af       	std	Y+63, r25	; 0x3f
    16a0:	68 97       	sbiw	r28, 0x18	; 24
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	aa 96       	adiw	r28, 0x2a	; 42
    16a6:	8f af       	std	Y+63, r24	; 0x3f
    16a8:	aa 97       	sbiw	r28, 0x2a	; 42
    16aa:	68 96       	adiw	r28, 0x18	; 24
    16ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    16ae:	68 97       	sbiw	r28, 0x18	; 24
    16b0:	2c a1       	ldd	r18, Y+36	; 0x24
    16b2:	92 17       	cp	r25, r18
    16b4:	18 f0       	brcs	.+6      	; 0x16bc <convertArrayToNumber+0x6a2>
    16b6:	aa 96       	adiw	r28, 0x2a	; 42
    16b8:	1f ae       	std	Y+63, r1	; 0x3f
    16ba:	aa 97       	sbiw	r28, 0x2a	; 42
    16bc:	a7 96       	adiw	r28, 0x27	; 39
    16be:	8f ad       	ldd	r24, Y+63	; 0x3f
    16c0:	a7 97       	sbiw	r28, 0x27	; 39
    16c2:	68 96       	adiw	r28, 0x18	; 24
    16c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    16c6:	68 97       	sbiw	r28, 0x18	; 24
    16c8:	89 0f       	add	r24, r25
    16ca:	ab 96       	adiw	r28, 0x2b	; 43
    16cc:	8f af       	std	Y+63, r24	; 0x3f
    16ce:	ab 97       	sbiw	r28, 0x2b	; 43
    16d0:	21 e0       	ldi	r18, 0x01	; 1
    16d2:	ac 96       	adiw	r28, 0x2c	; 44
    16d4:	2f af       	std	Y+63, r18	; 0x3f
    16d6:	ac 97       	sbiw	r28, 0x2c	; 44
    16d8:	ab 96       	adiw	r28, 0x2b	; 43
    16da:	8f ad       	ldd	r24, Y+63	; 0x3f
    16dc:	ab 97       	sbiw	r28, 0x2b	; 43
    16de:	68 96       	adiw	r28, 0x18	; 24
    16e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    16e2:	68 97       	sbiw	r28, 0x18	; 24
    16e4:	89 17       	cp	r24, r25
    16e6:	18 f0       	brcs	.+6      	; 0x16ee <convertArrayToNumber+0x6d4>
    16e8:	ac 96       	adiw	r28, 0x2c	; 44
    16ea:	1f ae       	std	Y+63, r1	; 0x3f
    16ec:	ac 97       	sbiw	r28, 0x2c	; 44
    16ee:	aa 96       	adiw	r28, 0x2a	; 42
    16f0:	2f ad       	ldd	r18, Y+63	; 0x3f
    16f2:	aa 97       	sbiw	r28, 0x2a	; 42
    16f4:	ac 96       	adiw	r28, 0x2c	; 44
    16f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    16f8:	ac 97       	sbiw	r28, 0x2c	; 44
    16fa:	28 2b       	or	r18, r24
    16fc:	aa 96       	adiw	r28, 0x2a	; 42
    16fe:	2f af       	std	Y+63, r18	; 0x3f
    1700:	aa 97       	sbiw	r28, 0x2a	; 42
    1702:	ab 96       	adiw	r28, 0x2b	; 43
    1704:	9f ad       	ldd	r25, Y+63	; 0x3f
    1706:	ab 97       	sbiw	r28, 0x2b	; 43
    1708:	68 96       	adiw	r28, 0x18	; 24
    170a:	9f af       	std	Y+63, r25	; 0x3f
    170c:	68 97       	sbiw	r28, 0x18	; 24
    170e:	2d a1       	ldd	r18, Y+37	; 0x25
    1710:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1712:	28 0f       	add	r18, r24
    1714:	69 96       	adiw	r28, 0x19	; 25
    1716:	2f af       	std	Y+63, r18	; 0x3f
    1718:	69 97       	sbiw	r28, 0x19	; 25
    171a:	aa 96       	adiw	r28, 0x2a	; 42
    171c:	8f ad       	ldd	r24, Y+63	; 0x3f
    171e:	aa 97       	sbiw	r28, 0x2a	; 42
    1720:	69 96       	adiw	r28, 0x19	; 25
    1722:	9f ad       	ldd	r25, Y+63	; 0x3f
    1724:	69 97       	sbiw	r28, 0x19	; 25
    1726:	89 0f       	add	r24, r25
    1728:	69 96       	adiw	r28, 0x19	; 25
    172a:	8f af       	std	Y+63, r24	; 0x3f
    172c:	69 97       	sbiw	r28, 0x19	; 25
    172e:	62 96       	adiw	r28, 0x12	; 18
    1730:	2f ad       	ldd	r18, Y+63	; 0x3f
    1732:	62 97       	sbiw	r28, 0x12	; 18
    1734:	63 96       	adiw	r28, 0x13	; 19
    1736:	3f ad       	ldd	r19, Y+63	; 0x3f
    1738:	63 97       	sbiw	r28, 0x13	; 19
    173a:	64 96       	adiw	r28, 0x14	; 20
    173c:	4f ad       	ldd	r20, Y+63	; 0x3f
    173e:	64 97       	sbiw	r28, 0x14	; 20
    1740:	65 96       	adiw	r28, 0x15	; 21
    1742:	5f ad       	ldd	r21, Y+63	; 0x3f
    1744:	65 97       	sbiw	r28, 0x15	; 21
    1746:	66 96       	adiw	r28, 0x16	; 22
    1748:	6f ad       	ldd	r22, Y+63	; 0x3f
    174a:	66 97       	sbiw	r28, 0x16	; 22
    174c:	67 96       	adiw	r28, 0x17	; 23
    174e:	7f ad       	ldd	r23, Y+63	; 0x3f
    1750:	67 97       	sbiw	r28, 0x17	; 23
    1752:	68 96       	adiw	r28, 0x18	; 24
    1754:	8f ad       	ldd	r24, Y+63	; 0x3f
    1756:	68 97       	sbiw	r28, 0x18	; 24
    1758:	69 96       	adiw	r28, 0x19	; 25
    175a:	9f ad       	ldd	r25, Y+63	; 0x3f
    175c:	69 97       	sbiw	r28, 0x19	; 25
    175e:	29 83       	std	Y+1, r18	; 0x01
    1760:	3a 83       	std	Y+2, r19	; 0x02
    1762:	4b 83       	std	Y+3, r20	; 0x03
    1764:	5c 83       	std	Y+4, r21	; 0x04
    1766:	6d 83       	std	Y+5, r22	; 0x05
    1768:	7e 83       	std	Y+6, r23	; 0x06
    176a:	8f 83       	std	Y+7, r24	; 0x07
    176c:	98 87       	std	Y+8, r25	; 0x08
{
	uint8 count=0;
	uint8 exponent;
	uint64 tens=1;
	sint64 operand=0;
	for(count=0; count<size; count++)
    176e:	8a 89       	ldd	r24, Y+18	; 0x12
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	8a 8b       	std	Y+18, r24	; 0x12
    1774:	9a 89       	ldd	r25, Y+18	; 0x12
    1776:	8d 89       	ldd	r24, Y+21	; 0x15
    1778:	98 17       	cp	r25, r24
    177a:	08 f4       	brcc	.+2      	; 0x177e <convertArrayToNumber+0x764>
    177c:	78 cc       	rjmp	.-1808   	; 0x106e <convertArrayToNumber+0x54>
		}

		operand += (ptr[count])* tens;
	}

return operand;
    177e:	29 81       	ldd	r18, Y+1	; 0x01
    1780:	3a 81       	ldd	r19, Y+2	; 0x02
    1782:	4b 81       	ldd	r20, Y+3	; 0x03
    1784:	5c 81       	ldd	r21, Y+4	; 0x04
    1786:	6d 81       	ldd	r22, Y+5	; 0x05
    1788:	7e 81       	ldd	r23, Y+6	; 0x06
    178a:	8f 81       	ldd	r24, Y+7	; 0x07
    178c:	98 85       	ldd	r25, Y+8	; 0x08
    178e:	a2 2e       	mov	r10, r18
    1790:	b3 2e       	mov	r11, r19
    1792:	c4 2e       	mov	r12, r20
    1794:	d5 2e       	mov	r13, r21
    1796:	e6 2e       	mov	r14, r22
    1798:	f7 2e       	mov	r15, r23
    179a:	08 2f       	mov	r16, r24
    179c:	19 2f       	mov	r17, r25
}
    179e:	2a 2d       	mov	r18, r10
    17a0:	3b 2d       	mov	r19, r11
    17a2:	4c 2d       	mov	r20, r12
    17a4:	5d 2d       	mov	r21, r13
    17a6:	6e 2d       	mov	r22, r14
    17a8:	7f 2d       	mov	r23, r15
    17aa:	80 2f       	mov	r24, r16
    17ac:	91 2f       	mov	r25, r17
    17ae:	c5 59       	subi	r28, 0x95	; 149
    17b0:	df 4f       	sbci	r29, 0xFF	; 255
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	08 95       	ret

000017d2 <check_syntaxError>:
 * [Out]:           erorr: to return the status of the variable if the array contains this operator or not
 *
 * [Returns]:      bool error
 ***************************************************************************************************/
bool check_syntaxError(uint8* ptr,const uint8* size)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <check_syntaxError+0x6>
    17d8:	00 d0       	rcall	.+0      	; 0x17da <check_syntaxError+0x8>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <check_syntaxError+0xa>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
    17e0:	9c 83       	std	Y+4, r25	; 0x04
    17e2:	8b 83       	std	Y+3, r24	; 0x03
    17e4:	7e 83       	std	Y+6, r23	; 0x06
    17e6:	6d 83       	std	Y+5, r22	; 0x05
	uint8 count=0;
    17e8:	1a 82       	std	Y+2, r1	; 0x02
	bool error= FALSE;
    17ea:	19 82       	std	Y+1, r1	; 0x01
	for(count=0; count< (*size); count++)
    17ec:	1a 82       	std	Y+2, r1	; 0x02
    17ee:	46 c1       	rjmp	.+652    	; 0x1a7c <check_syntaxError+0x2aa>
	{

		if(     (ptr[0] == '*') /*|| (ptr[0] == '=')*/ || (ptr[0] == '%') ||
    17f0:	eb 81       	ldd	r30, Y+3	; 0x03
    17f2:	fc 81       	ldd	r31, Y+4	; 0x04
    17f4:	80 81       	ld	r24, Z
    17f6:	8a 32       	cpi	r24, 0x2A	; 42
    17f8:	09 f4       	brne	.+2      	; 0x17fc <check_syntaxError+0x2a>
    17fa:	3b c1       	rjmp	.+630    	; 0x1a72 <check_syntaxError+0x2a0>
    17fc:	eb 81       	ldd	r30, Y+3	; 0x03
    17fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1800:	80 81       	ld	r24, Z
    1802:	85 32       	cpi	r24, 0x25	; 37
    1804:	09 f4       	brne	.+2      	; 0x1808 <check_syntaxError+0x36>
    1806:	35 c1       	rjmp	.+618    	; 0x1a72 <check_syntaxError+0x2a0>
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	fc 01       	movw	r30, r24
    1814:	e2 0f       	add	r30, r18
    1816:	f3 1f       	adc	r31, r19
    1818:	80 81       	ld	r24, Z
    181a:	8d 32       	cpi	r24, 0x2D	; 45
    181c:	79 f4       	brne	.+30     	; 0x183c <check_syntaxError+0x6a>
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 01       	movw	r18, r24
    1826:	2f 5f       	subi	r18, 0xFF	; 255
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	fc 01       	movw	r30, r24
    1830:	e2 0f       	add	r30, r18
    1832:	f3 1f       	adc	r31, r19
    1834:	80 81       	ld	r24, Z
    1836:	8a 32       	cpi	r24, 0x2A	; 42
    1838:	09 f4       	brne	.+2      	; 0x183c <check_syntaxError+0x6a>
    183a:	1b c1       	rjmp	.+566    	; 0x1a72 <check_syntaxError+0x2a0>
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	fc 01       	movw	r30, r24
    1848:	e2 0f       	add	r30, r18
    184a:	f3 1f       	adc	r31, r19
    184c:	80 81       	ld	r24, Z
    184e:	8a 32       	cpi	r24, 0x2A	; 42
    1850:	79 f4       	brne	.+30     	; 0x1870 <check_syntaxError+0x9e>
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9c 01       	movw	r18, r24
    185a:	2f 5f       	subi	r18, 0xFF	; 255
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	fc 01       	movw	r30, r24
    1864:	e2 0f       	add	r30, r18
    1866:	f3 1f       	adc	r31, r19
    1868:	80 81       	ld	r24, Z
    186a:	8a 32       	cpi	r24, 0x2A	; 42
    186c:	09 f4       	brne	.+2      	; 0x1870 <check_syntaxError+0x9e>
    186e:	01 c1       	rjmp	.+514    	; 0x1a72 <check_syntaxError+0x2a0>
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	fc 01       	movw	r30, r24
    187c:	e2 0f       	add	r30, r18
    187e:	f3 1f       	adc	r31, r19
    1880:	80 81       	ld	r24, Z
    1882:	8b 32       	cpi	r24, 0x2B	; 43
    1884:	79 f4       	brne	.+30     	; 0x18a4 <check_syntaxError+0xd2>
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 2f       	mov	r24, r24
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9c 01       	movw	r18, r24
    188e:	2f 5f       	subi	r18, 0xFF	; 255
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	fc 01       	movw	r30, r24
    1898:	e2 0f       	add	r30, r18
    189a:	f3 1f       	adc	r31, r19
    189c:	80 81       	ld	r24, Z
    189e:	8a 32       	cpi	r24, 0x2A	; 42
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <check_syntaxError+0xd2>
    18a2:	e7 c0       	rjmp	.+462    	; 0x1a72 <check_syntaxError+0x2a0>
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	fc 01       	movw	r30, r24
    18b0:	e2 0f       	add	r30, r18
    18b2:	f3 1f       	adc	r31, r19
    18b4:	80 81       	ld	r24, Z
    18b6:	8a 32       	cpi	r24, 0x2A	; 42
    18b8:	79 f4       	brne	.+30     	; 0x18d8 <check_syntaxError+0x106>
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9c 01       	movw	r18, r24
    18c2:	2f 5f       	subi	r18, 0xFF	; 255
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	fc 01       	movw	r30, r24
    18cc:	e2 0f       	add	r30, r18
    18ce:	f3 1f       	adc	r31, r19
    18d0:	80 81       	ld	r24, Z
    18d2:	85 32       	cpi	r24, 0x25	; 37
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <check_syntaxError+0x106>
    18d6:	cd c0       	rjmp	.+410    	; 0x1a72 <check_syntaxError+0x2a0>
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	fc 01       	movw	r30, r24
    18e4:	e2 0f       	add	r30, r18
    18e6:	f3 1f       	adc	r31, r19
    18e8:	80 81       	ld	r24, Z
    18ea:	85 32       	cpi	r24, 0x25	; 37
    18ec:	79 f4       	brne	.+30     	; 0x190c <check_syntaxError+0x13a>
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9c 01       	movw	r18, r24
    18f6:	2f 5f       	subi	r18, 0xFF	; 255
    18f8:	3f 4f       	sbci	r19, 0xFF	; 255
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	fc 01       	movw	r30, r24
    1900:	e2 0f       	add	r30, r18
    1902:	f3 1f       	adc	r31, r19
    1904:	80 81       	ld	r24, Z
    1906:	8a 32       	cpi	r24, 0x2A	; 42
    1908:	09 f4       	brne	.+2      	; 0x190c <check_syntaxError+0x13a>
    190a:	b3 c0       	rjmp	.+358    	; 0x1a72 <check_syntaxError+0x2a0>
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	fc 01       	movw	r30, r24
    1918:	e2 0f       	add	r30, r18
    191a:	f3 1f       	adc	r31, r19
    191c:	80 81       	ld	r24, Z
    191e:	85 32       	cpi	r24, 0x25	; 37
    1920:	79 f4       	brne	.+30     	; 0x1940 <check_syntaxError+0x16e>
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9c 01       	movw	r18, r24
    192a:	2f 5f       	subi	r18, 0xFF	; 255
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	fc 01       	movw	r30, r24
    1934:	e2 0f       	add	r30, r18
    1936:	f3 1f       	adc	r31, r19
    1938:	80 81       	ld	r24, Z
    193a:	85 32       	cpi	r24, 0x25	; 37
    193c:	09 f4       	brne	.+2      	; 0x1940 <check_syntaxError+0x16e>
    193e:	99 c0       	rjmp	.+306    	; 0x1a72 <check_syntaxError+0x2a0>
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	fc 01       	movw	r30, r24
    194c:	e2 0f       	add	r30, r18
    194e:	f3 1f       	adc	r31, r19
    1950:	80 81       	ld	r24, Z
    1952:	85 32       	cpi	r24, 0x25	; 37
    1954:	79 f4       	brne	.+30     	; 0x1974 <check_syntaxError+0x1a2>
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	9c 01       	movw	r18, r24
    195e:	2f 5f       	subi	r18, 0xFF	; 255
    1960:	3f 4f       	sbci	r19, 0xFF	; 255
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	fc 01       	movw	r30, r24
    1968:	e2 0f       	add	r30, r18
    196a:	f3 1f       	adc	r31, r19
    196c:	80 81       	ld	r24, Z
    196e:	8b 32       	cpi	r24, 0x2B	; 43
    1970:	09 f4       	brne	.+2      	; 0x1974 <check_syntaxError+0x1a2>
    1972:	7f c0       	rjmp	.+254    	; 0x1a72 <check_syntaxError+0x2a0>
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	fc 01       	movw	r30, r24
    1980:	e2 0f       	add	r30, r18
    1982:	f3 1f       	adc	r31, r19
    1984:	80 81       	ld	r24, Z
    1986:	8b 32       	cpi	r24, 0x2B	; 43
    1988:	79 f4       	brne	.+30     	; 0x19a8 <check_syntaxError+0x1d6>
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9c 01       	movw	r18, r24
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	fc 01       	movw	r30, r24
    199c:	e2 0f       	add	r30, r18
    199e:	f3 1f       	adc	r31, r19
    19a0:	80 81       	ld	r24, Z
    19a2:	85 32       	cpi	r24, 0x25	; 37
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <check_syntaxError+0x1d6>
    19a6:	65 c0       	rjmp	.+202    	; 0x1a72 <check_syntaxError+0x2a0>
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	fc 01       	movw	r30, r24
    19b4:	e2 0f       	add	r30, r18
    19b6:	f3 1f       	adc	r31, r19
    19b8:	80 81       	ld	r24, Z
    19ba:	8d 32       	cpi	r24, 0x2D	; 45
    19bc:	79 f4       	brne	.+30     	; 0x19dc <check_syntaxError+0x20a>
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9c 01       	movw	r18, r24
    19c6:	2f 5f       	subi	r18, 0xFF	; 255
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	fc 01       	movw	r30, r24
    19d0:	e2 0f       	add	r30, r18
    19d2:	f3 1f       	adc	r31, r19
    19d4:	80 81       	ld	r24, Z
    19d6:	8d 33       	cpi	r24, 0x3D	; 61
    19d8:	09 f4       	brne	.+2      	; 0x19dc <check_syntaxError+0x20a>
    19da:	4b c0       	rjmp	.+150    	; 0x1a72 <check_syntaxError+0x2a0>
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	fc 01       	movw	r30, r24
    19e8:	e2 0f       	add	r30, r18
    19ea:	f3 1f       	adc	r31, r19
    19ec:	80 81       	ld	r24, Z
    19ee:	8b 32       	cpi	r24, 0x2B	; 43
    19f0:	71 f4       	brne	.+28     	; 0x1a0e <check_syntaxError+0x23c>
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9c 01       	movw	r18, r24
    19fa:	2f 5f       	subi	r18, 0xFF	; 255
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	fc 01       	movw	r30, r24
    1a04:	e2 0f       	add	r30, r18
    1a06:	f3 1f       	adc	r31, r19
    1a08:	80 81       	ld	r24, Z
    1a0a:	8d 33       	cpi	r24, 0x3D	; 61
    1a0c:	91 f1       	breq	.+100    	; 0x1a72 <check_syntaxError+0x2a0>
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	fc 01       	movw	r30, r24
    1a1a:	e2 0f       	add	r30, r18
    1a1c:	f3 1f       	adc	r31, r19
    1a1e:	80 81       	ld	r24, Z
    1a20:	85 32       	cpi	r24, 0x25	; 37
    1a22:	71 f4       	brne	.+28     	; 0x1a40 <check_syntaxError+0x26e>
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	9c 01       	movw	r18, r24
    1a2c:	2f 5f       	subi	r18, 0xFF	; 255
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	fc 01       	movw	r30, r24
    1a36:	e2 0f       	add	r30, r18
    1a38:	f3 1f       	adc	r31, r19
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8d 33       	cpi	r24, 0x3D	; 61
    1a3e:	c9 f0       	breq	.+50     	; 0x1a72 <check_syntaxError+0x2a0>
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	28 2f       	mov	r18, r24
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	e2 0f       	add	r30, r18
    1a4e:	f3 1f       	adc	r31, r19
    1a50:	80 81       	ld	r24, Z
    1a52:	8a 32       	cpi	r24, 0x2A	; 42
    1a54:	81 f4       	brne	.+32     	; 0x1a76 <check_syntaxError+0x2a4>
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	2f 5f       	subi	r18, 0xFF	; 255
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	fc 01       	movw	r30, r24
    1a68:	e2 0f       	add	r30, r18
    1a6a:	f3 1f       	adc	r31, r19
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8d 33       	cpi	r24, 0x3D	; 61
    1a70:	11 f4       	brne	.+4      	; 0x1a76 <check_syntaxError+0x2a4>
				( (ptr[count] == '*') && (ptr[count+1] == '=') )

		)
		{

			error = TRUE;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	89 83       	std	Y+1, r24	; 0x01
 ***************************************************************************************************/
bool check_syntaxError(uint8* ptr,const uint8* size)
{
	uint8 count=0;
	bool error= FALSE;
	for(count=0; count< (*size); count++)
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
    1a7c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a7e:	fe 81       	ldd	r31, Y+6	; 0x06
    1a80:	90 81       	ld	r25, Z
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	89 17       	cp	r24, r25
    1a86:	08 f4       	brcc	.+2      	; 0x1a8a <check_syntaxError+0x2b8>
    1a88:	b3 ce       	rjmp	.-666    	; 0x17f0 <check_syntaxError+0x1e>
		}


	}

	return error;
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8c:	26 96       	adiw	r28, 0x06	; 6
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <check_sign>:
 * [Out]:           sign: to return the final decision if the number is negative or positive
 *
 * [Returns]:      uint8 sign
 ***************************************************************************************************/
uint8 check_sign(uint8 *number_of_negative)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <check_sign+0x6>
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	9b 83       	std	Y+3, r25	; 0x03
    1aac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 sign =0;
    1aae:	19 82       	std	Y+1, r1	; 0x01

	if( ( (*number_of_negative)%2) == 1)
    1ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	81 70       	andi	r24, 0x01	; 1
    1abc:	90 70       	andi	r25, 0x00	; 0
    1abe:	88 23       	and	r24, r24
    1ac0:	19 f0       	breq	.+6      	; 0x1ac8 <check_sign+0x2a>
	{
		sign = -1;
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <check_sign+0x2e>
	}
	else
	{
		sign = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	89 83       	std	Y+1, r24	; 0x01
	}
	return sign;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <KeyPad_getPressedKey+0x6>
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1ae4:	1a 82       	std	Y+2, r1	; 0x02
    1ae6:	4c c0       	rjmp	.+152    	; 0x1b80 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1ae8:	ea e3       	ldi	r30, 0x3A	; 58
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	80 e1       	ldi	r24, 0x10	; 16
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <KeyPad_getPressedKey+0x22>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	2a 95       	dec	r18
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <KeyPad_getPressedKey+0x1e>
    1b00:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1b02:	eb e3       	ldi	r30, 0x3B	; 59
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	80 e1       	ldi	r24, 0x10	; 16
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <KeyPad_getPressedKey+0x3e>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <KeyPad_getPressedKey+0x3a>
    1b1c:	80 95       	com	r24
    1b1e:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1b20:	19 82       	std	Y+1, r1	; 0x01
    1b22:	28 c0       	rjmp	.+80     	; 0x1b74 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1b24:	e9 e3       	ldi	r30, 0x39	; 57
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a9 01       	movw	r20, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <KeyPad_getPressedKey+0x62>
    1b38:	55 95       	asr	r21
    1b3a:	47 95       	ror	r20
    1b3c:	8a 95       	dec	r24
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <KeyPad_getPressedKey+0x5e>
    1b40:	ca 01       	movw	r24, r20
    1b42:	81 70       	andi	r24, 0x01	; 1
    1b44:	90 70       	andi	r25, 0x00	; 0
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	91 f4       	brne	.+36     	; 0x1b6e <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	98 2f       	mov	r25, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	89 0f       	add	r24, r25
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	8f 5f       	subi	r24, 0xFF	; 255
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	84 30       	cpi	r24, 0x04	; 4
    1b78:	a8 f2       	brcs	.-86     	; 0x1b24 <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	84 30       	cpi	r24, 0x04	; 4
    1b84:	08 f4       	brcc	.+2      	; 0x1b88 <KeyPad_getPressedKey+0xae>
    1b86:	b0 cf       	rjmp	.-160    	; 0x1ae8 <KeyPad_getPressedKey+0xe>
    1b88:	ad cf       	rjmp	.-166    	; 0x1ae4 <KeyPad_getPressedKey+0xa>

00001b8a <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <KeyPad_4x4_adjustKeyNumber+0x6>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <KeyPad_4x4_adjustKeyNumber+0x8>
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	3c 83       	std	Y+4, r19	; 0x04
    1ba0:	2b 83       	std	Y+3, r18	; 0x03
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	88 30       	cpi	r24, 0x08	; 8
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <KeyPad_4x4_adjustKeyNumber+0x24>
    1bac:	70 c0       	rjmp	.+224    	; 0x1c8e <KeyPad_4x4_adjustKeyNumber+0x104>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	29 30       	cpi	r18, 0x09	; 9
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	5c f5       	brge	.+86     	; 0x1c0e <KeyPad_4x4_adjustKeyNumber+0x84>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	84 30       	cpi	r24, 0x04	; 4
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1bc2:	59 c0       	rjmp	.+178    	; 0x1c76 <KeyPad_4x4_adjustKeyNumber+0xec>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	25 30       	cpi	r18, 0x05	; 5
    1bca:	31 05       	cpc	r19, r1
    1bcc:	9c f4       	brge	.+38     	; 0x1bf4 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <KeyPad_4x4_adjustKeyNumber+0x50>
    1bd8:	48 c0       	rjmp	.+144    	; 0x1c6a <KeyPad_4x4_adjustKeyNumber+0xe0>
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	23 30       	cpi	r18, 0x03	; 3
    1be0:	31 05       	cpc	r19, r1
    1be2:	0c f0       	brlt	.+2      	; 0x1be6 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1be4:	45 c0       	rjmp	.+138    	; 0x1c70 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <KeyPad_4x4_adjustKeyNumber+0x68>
    1bf0:	39 c0       	rjmp	.+114    	; 0x1c64 <KeyPad_4x4_adjustKeyNumber+0xda>
    1bf2:	67 c0       	rjmp	.+206    	; 0x1cc2 <KeyPad_4x4_adjustKeyNumber+0x138>
    1bf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf8:	26 30       	cpi	r18, 0x06	; 6
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <KeyPad_4x4_adjustKeyNumber+0x76>
    1bfe:	41 c0       	rjmp	.+130    	; 0x1c82 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	87 30       	cpi	r24, 0x07	; 7
    1c06:	91 05       	cpc	r25, r1
    1c08:	0c f0       	brlt	.+2      	; 0x1c0c <KeyPad_4x4_adjustKeyNumber+0x82>
    1c0a:	3e c0       	rjmp	.+124    	; 0x1c88 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1c0c:	37 c0       	rjmp	.+110    	; 0x1c7c <KeyPad_4x4_adjustKeyNumber+0xf2>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	2c 30       	cpi	r18, 0x0C	; 12
    1c14:	31 05       	cpc	r19, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <KeyPad_4x4_adjustKeyNumber+0x90>
    1c18:	46 c0       	rjmp	.+140    	; 0x1ca6 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	8d 30       	cpi	r24, 0x0D	; 13
    1c20:	91 05       	cpc	r25, r1
    1c22:	5c f4       	brge	.+22     	; 0x1c3a <KeyPad_4x4_adjustKeyNumber+0xb0>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	2a 30       	cpi	r18, 0x0A	; 10
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	b1 f1       	breq	.+108    	; 0x1c9a <KeyPad_4x4_adjustKeyNumber+0x110>
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	8b 30       	cpi	r24, 0x0B	; 11
    1c34:	91 05       	cpc	r25, r1
    1c36:	a4 f5       	brge	.+104    	; 0x1ca0 <KeyPad_4x4_adjustKeyNumber+0x116>
    1c38:	2d c0       	rjmp	.+90     	; 0x1c94 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1c3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3e:	2e 30       	cpi	r18, 0x0E	; 14
    1c40:	31 05       	cpc	r19, r1
    1c42:	b9 f1       	breq	.+110    	; 0x1cb2 <KeyPad_4x4_adjustKeyNumber+0x128>
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	8e 30       	cpi	r24, 0x0E	; 14
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	7c f1       	brlt	.+94     	; 0x1cac <KeyPad_4x4_adjustKeyNumber+0x122>
    1c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c50:	3c 81       	ldd	r19, Y+4	; 0x04
    1c52:	2f 30       	cpi	r18, 0x0F	; 15
    1c54:	31 05       	cpc	r19, r1
    1c56:	79 f1       	breq	.+94     	; 0x1cb6 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	80 31       	cpi	r24, 0x10	; 16
    1c5e:	91 05       	cpc	r25, r1
    1c60:	69 f1       	breq	.+90     	; 0x1cbc <KeyPad_4x4_adjustKeyNumber+0x132>
    1c62:	2f c0       	rjmp	.+94     	; 0x1cc2 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1c64:	97 e0       	ldi	r25, 0x07	; 7
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	2e c0       	rjmp	.+92     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1c6a:	28 e0       	ldi	r18, 0x08	; 8
    1c6c:	2a 83       	std	Y+2, r18	; 0x02
    1c6e:	2b c0       	rjmp	.+86     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1c70:	39 e0       	ldi	r19, 0x09	; 9
    1c72:	3a 83       	std	Y+2, r19	; 0x02
    1c74:	28 c0       	rjmp	.+80     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1c76:	85 e2       	ldi	r24, 0x25	; 37
    1c78:	8a 83       	std	Y+2, r24	; 0x02
    1c7a:	25 c0       	rjmp	.+74     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1c7c:	94 e0       	ldi	r25, 0x04	; 4
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	22 c0       	rjmp	.+68     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1c82:	25 e0       	ldi	r18, 0x05	; 5
    1c84:	2a 83       	std	Y+2, r18	; 0x02
    1c86:	1f c0       	rjmp	.+62     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1c88:	36 e0       	ldi	r19, 0x06	; 6
    1c8a:	3a 83       	std	Y+2, r19	; 0x02
    1c8c:	1c c0       	rjmp	.+56     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1c8e:	8a e2       	ldi	r24, 0x2A	; 42
    1c90:	8a 83       	std	Y+2, r24	; 0x02
    1c92:	19 c0       	rjmp	.+50     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1c94:	91 e0       	ldi	r25, 0x01	; 1
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	16 c0       	rjmp	.+44     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1c9a:	22 e0       	ldi	r18, 0x02	; 2
    1c9c:	2a 83       	std	Y+2, r18	; 0x02
    1c9e:	13 c0       	rjmp	.+38     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1ca0:	33 e0       	ldi	r19, 0x03	; 3
    1ca2:	3a 83       	std	Y+2, r19	; 0x02
    1ca4:	10 c0       	rjmp	.+32     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1ca6:	8d e2       	ldi	r24, 0x2D	; 45
    1ca8:	8a 83       	std	Y+2, r24	; 0x02
    1caa:	0d c0       	rjmp	.+26     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1cac:	9d e0       	ldi	r25, 0x0D	; 13
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	0a c0       	rjmp	.+20     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1cb2:	1a 82       	std	Y+2, r1	; 0x02
    1cb4:	08 c0       	rjmp	.+16     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1cb6:	2d e3       	ldi	r18, 0x3D	; 61
    1cb8:	2a 83       	std	Y+2, r18	; 0x02
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1cbc:	3b e2       	ldi	r19, 0x2B	; 43
    1cbe:	3a 83       	std	Y+2, r19	; 0x02
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	8a 83       	std	Y+2, r24	; 0x02
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1cde:	e4 e3       	ldi	r30, 0x34	; 52
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1ce6:	a7 e3       	ldi	r26, 0x37	; 55
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e7 e3       	ldi	r30, 0x37	; 55
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 6e       	ori	r24, 0xE0	; 224
    1cf2:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1cf4:	88 e3       	ldi	r24, 0x38	; 56
    1cf6:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1cfa:	8c e0       	ldi	r24, 0x0C	; 12
    1cfc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_sendCommand>
}
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	e9 97       	sbiw	r28, 0x39	; 57
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1d22:	a8 e3       	ldi	r26, 0x38	; 56
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e8 e3       	ldi	r30, 0x38	; 56
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 7d       	andi	r24, 0xDF	; 223
    1d2e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1d30:	a8 e3       	ldi	r26, 0x38	; 56
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 7b       	andi	r24, 0xBF	; 191
    1d3c:	8c 93       	st	X, r24
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e8       	ldi	r26, 0x80	; 128
    1d44:	bf e3       	ldi	r27, 0x3F	; 63
    1d46:	8d ab       	std	Y+53, r24	; 0x35
    1d48:	9e ab       	std	Y+54, r25	; 0x36
    1d4a:	af ab       	std	Y+55, r26	; 0x37
    1d4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d50:	7e a9       	ldd	r23, Y+54	; 0x36
    1d52:	8f a9       	ldd	r24, Y+55	; 0x37
    1d54:	98 ad       	ldd	r25, Y+56	; 0x38
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	53 e4       	ldi	r21, 0x43	; 67
    1d5e:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	89 ab       	std	Y+49, r24	; 0x31
    1d68:	9a ab       	std	Y+50, r25	; 0x32
    1d6a:	ab ab       	std	Y+51, r26	; 0x33
    1d6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d70:	7a a9       	ldd	r23, Y+50	; 0x32
    1d72:	8b a9       	ldd	r24, Y+51	; 0x33
    1d74:	9c a9       	ldd	r25, Y+52	; 0x34
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_sendCommand+0x84>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	98 ab       	std	Y+48, r25	; 0x30
    1d8c:	8f a7       	std	Y+47, r24	; 0x2f
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1d90:	69 a9       	ldd	r22, Y+49	; 0x31
    1d92:	7a a9       	ldd	r23, Y+50	; 0x32
    1d94:	8b a9       	ldd	r24, Y+51	; 0x33
    1d96:	9c a9       	ldd	r25, Y+52	; 0x34
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6d a9       	ldd	r22, Y+53	; 0x35
    1daa:	7e a9       	ldd	r23, Y+54	; 0x36
    1dac:	8f a9       	ldd	r24, Y+55	; 0x37
    1dae:	98 ad       	ldd	r25, Y+56	; 0x38
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	98 ab       	std	Y+48, r25	; 0x30
    1dce:	8f a7       	std	Y+47, r24	; 0x2f
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_sendCommand+0xe4>
    1dd2:	89 e1       	ldi	r24, 0x19	; 25
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e a7       	std	Y+46, r25	; 0x2e
    1dd8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dda:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ddc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_sendCommand+0xd2>
    1de2:	9e a7       	std	Y+46, r25	; 0x2e
    1de4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	98 ab       	std	Y+48, r25	; 0x30
    1dee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df2:	98 a9       	ldd	r25, Y+48	; 0x30
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_sendCommand+0xc6>
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dfc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dfe:	8b a9       	ldd	r24, Y+51	; 0x33
    1e00:	9c a9       	ldd	r25, Y+52	; 0x34
    1e02:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	98 ab       	std	Y+48, r25	; 0x30
    1e0c:	8f a7       	std	Y+47, r24	; 0x2f
    1e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e10:	98 a9       	ldd	r25, Y+48	; 0x30
    1e12:	9c a7       	std	Y+44, r25	; 0x2c
    1e14:	8b a7       	std	Y+43, r24	; 0x2b
    1e16:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e18:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_sendCommand+0x10e>
    1e1e:	9c a7       	std	Y+44, r25	; 0x2c
    1e20:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e22:	a8 e3       	ldi	r26, 0x38	; 56
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e8 e3       	ldi	r30, 0x38	; 56
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	80 68       	ori	r24, 0x80	; 128
    1e2e:	8c 93       	st	X, r24
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e8       	ldi	r26, 0x80	; 128
    1e36:	bf e3       	ldi	r27, 0x3F	; 63
    1e38:	8f a3       	std	Y+39, r24	; 0x27
    1e3a:	98 a7       	std	Y+40, r25	; 0x28
    1e3c:	a9 a7       	std	Y+41, r26	; 0x29
    1e3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e40:	6f a1       	ldd	r22, Y+39	; 0x27
    1e42:	78 a5       	ldd	r23, Y+40	; 0x28
    1e44:	89 a5       	ldd	r24, Y+41	; 0x29
    1e46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4a e7       	ldi	r20, 0x7A	; 122
    1e4e:	53 e4       	ldi	r21, 0x43	; 67
    1e50:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8b a3       	std	Y+35, r24	; 0x23
    1e5a:	9c a3       	std	Y+36, r25	; 0x24
    1e5c:	ad a3       	std	Y+37, r26	; 0x25
    1e5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e60:	6b a1       	ldd	r22, Y+35	; 0x23
    1e62:	7c a1       	ldd	r23, Y+36	; 0x24
    1e64:	8d a1       	ldd	r24, Y+37	; 0x25
    1e66:	9e a1       	ldd	r25, Y+38	; 0x26
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	2c f4       	brge	.+10     	; 0x1e82 <LCD_sendCommand+0x176>
		__ticks = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9a a3       	std	Y+34, r25	; 0x22
    1e7e:	89 a3       	std	Y+33, r24	; 0x21
    1e80:	3f c0       	rjmp	.+126    	; 0x1f00 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1e82:	6b a1       	ldd	r22, Y+35	; 0x23
    1e84:	7c a1       	ldd	r23, Y+36	; 0x24
    1e86:	8d a1       	ldd	r24, Y+37	; 0x25
    1e88:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	3f ef       	ldi	r19, 0xFF	; 255
    1e8e:	4f e7       	ldi	r20, 0x7F	; 127
    1e90:	57 e4       	ldi	r21, 0x47	; 71
    1e92:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    1e96:	18 16       	cp	r1, r24
    1e98:	4c f5       	brge	.+82     	; 0x1eec <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e2       	ldi	r20, 0x20	; 32
    1ea8:	51 e4       	ldi	r21, 0x41	; 65
    1eaa:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9a a3       	std	Y+34, r25	; 0x22
    1ec0:	89 a3       	std	Y+33, r24	; 0x21
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <LCD_sendCommand+0x1d6>
    1ec4:	89 e1       	ldi	r24, 0x19	; 25
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	98 a3       	std	Y+32, r25	; 0x20
    1eca:	8f 8f       	std	Y+31, r24	; 0x1f
    1ecc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ece:	98 a1       	ldd	r25, Y+32	; 0x20
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_sendCommand+0x1c4>
    1ed4:	98 a3       	std	Y+32, r25	; 0x20
    1ed6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eda:	9a a1       	ldd	r25, Y+34	; 0x22
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	69 f7       	brne	.-38     	; 0x1ec4 <LCD_sendCommand+0x1b8>
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	6b a1       	ldd	r22, Y+35	; 0x23
    1eee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef4:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	89 a1       	ldd	r24, Y+33	; 0x21
    1f02:	9a a1       	ldd	r25, Y+34	; 0x22
    1f04:	9e 8f       	std	Y+30, r25	; 0x1e
    1f06:	8d 8f       	std	Y+29, r24	; 0x1d
    1f08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_sendCommand+0x200>
    1f10:	9e 8f       	std	Y+30, r25	; 0x1e
    1f12:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1f14:	e5 e3       	ldi	r30, 0x35	; 53
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	89 ad       	ldd	r24, Y+57	; 0x39
    1f1a:	80 83       	st	Z, r24
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e8       	ldi	r26, 0x80	; 128
    1f22:	bf e3       	ldi	r27, 0x3F	; 63
    1f24:	89 8f       	std	Y+25, r24	; 0x19
    1f26:	9a 8f       	std	Y+26, r25	; 0x1a
    1f28:	ab 8f       	std	Y+27, r26	; 0x1b
    1f2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	53 e4       	ldi	r21, 0x43	; 67
    1f3c:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8d 8b       	std	Y+21, r24	; 0x15
    1f46:	9e 8b       	std	Y+22, r25	; 0x16
    1f48:	af 8b       	std	Y+23, r26	; 0x17
    1f4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f50:	8f 89       	ldd	r24, Y+23	; 0x17
    1f52:	98 8d       	ldd	r25, Y+24	; 0x18
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <LCD_sendCommand+0x262>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9c 8b       	std	Y+20, r25	; 0x14
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f70:	7e 89       	ldd	r23, Y+22	; 0x16
    1f72:	8f 89       	ldd	r24, Y+23	; 0x17
    1f74:	98 8d       	ldd	r25, Y+24	; 0x18
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	69 8d       	ldd	r22, Y+25	; 0x19
    1f88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9c 8b       	std	Y+20, r25	; 0x14
    1fac:	8b 8b       	std	Y+19, r24	; 0x13
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <LCD_sendCommand+0x2c2>
    1fb0:	89 e1       	ldi	r24, 0x19	; 25
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9a 8b       	std	Y+18, r25	; 0x12
    1fb6:	89 8b       	std	Y+17, r24	; 0x11
    1fb8:	89 89       	ldd	r24, Y+17	; 0x11
    1fba:	9a 89       	ldd	r25, Y+18	; 0x12
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_sendCommand+0x2b0>
    1fc0:	9a 8b       	std	Y+18, r25	; 0x12
    1fc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <LCD_sendCommand+0x2a4>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9c 8b       	std	Y+20, r25	; 0x14
    1fea:	8b 8b       	std	Y+19, r24	; 0x13
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	98 8b       	std	Y+16, r25	; 0x10
    1ff2:	8f 87       	std	Y+15, r24	; 0x0f
    1ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff6:	98 89       	ldd	r25, Y+16	; 0x10
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_sendCommand+0x2ec>
    1ffc:	98 8b       	std	Y+16, r25	; 0x10
    1ffe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2000:	a8 e3       	ldi	r26, 0x38	; 56
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e8 e3       	ldi	r30, 0x38	; 56
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8f 77       	andi	r24, 0x7F	; 127
    200c:	8c 93       	st	X, r24
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	a0 e8       	ldi	r26, 0x80	; 128
    2014:	bf e3       	ldi	r27, 0x3F	; 63
    2016:	8b 87       	std	Y+11, r24	; 0x0b
    2018:	9c 87       	std	Y+12, r25	; 0x0c
    201a:	ad 87       	std	Y+13, r26	; 0x0d
    201c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2020:	7c 85       	ldd	r23, Y+12	; 0x0c
    2022:	8d 85       	ldd	r24, Y+13	; 0x0d
    2024:	9e 85       	ldd	r25, Y+14	; 0x0e
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4a e7       	ldi	r20, 0x7A	; 122
    202c:	53 e4       	ldi	r21, 0x43	; 67
    202e:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	8f 83       	std	Y+7, r24	; 0x07
    2038:	98 87       	std	Y+8, r25	; 0x08
    203a:	a9 87       	std	Y+9, r26	; 0x09
    203c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    203e:	6f 81       	ldd	r22, Y+7	; 0x07
    2040:	78 85       	ldd	r23, Y+8	; 0x08
    2042:	89 85       	ldd	r24, Y+9	; 0x09
    2044:	9a 85       	ldd	r25, Y+10	; 0x0a
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e8       	ldi	r20, 0x80	; 128
    204c:	5f e3       	ldi	r21, 0x3F	; 63
    204e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    2052:	88 23       	and	r24, r24
    2054:	2c f4       	brge	.+10     	; 0x2060 <LCD_sendCommand+0x354>
		__ticks = 1;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	3f c0       	rjmp	.+126    	; 0x20de <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2060:	6f 81       	ldd	r22, Y+7	; 0x07
    2062:	78 85       	ldd	r23, Y+8	; 0x08
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	4c f5       	brge	.+82     	; 0x20ca <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	6b 85       	ldd	r22, Y+11	; 0x0b
    207a:	7c 85       	ldd	r23, Y+12	; 0x0c
    207c:	8d 85       	ldd	r24, Y+13	; 0x0d
    207e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e2       	ldi	r20, 0x20	; 32
    2086:	51 e4       	ldi	r21, 0x41	; 65
    2088:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	8d 83       	std	Y+5, r24	; 0x05
    20a0:	0f c0       	rjmp	.+30     	; 0x20c0 <LCD_sendCommand+0x3b4>
    20a2:	89 e1       	ldi	r24, 0x19	; 25
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9c 83       	std	Y+4, r25	; 0x04
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	9c 81       	ldd	r25, Y+4	; 0x04
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_sendCommand+0x3a2>
    20b2:	9c 83       	std	Y+4, r25	; 0x04
    20b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b6:	8d 81       	ldd	r24, Y+5	; 0x05
    20b8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	69 f7       	brne	.-38     	; 0x20a2 <LCD_sendCommand+0x396>
    20c8:	14 c0       	rjmp	.+40     	; 0x20f2 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ca:	6f 81       	ldd	r22, Y+7	; 0x07
    20cc:	78 85       	ldd	r23, Y+8	; 0x08
    20ce:	89 85       	ldd	r24, Y+9	; 0x09
    20d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d2:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_sendCommand+0x3de>
    20ee:	9a 83       	std	Y+2, r25	; 0x02
    20f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    20f2:	e9 96       	adiw	r28, 0x39	; 57
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	e9 97       	sbiw	r28, 0x39	; 57
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    211a:	a8 e3       	ldi	r26, 0x38	; 56
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e8 e3       	ldi	r30, 0x38	; 56
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	80 62       	ori	r24, 0x20	; 32
    2126:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2128:	a8 e3       	ldi	r26, 0x38	; 56
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e8 e3       	ldi	r30, 0x38	; 56
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	8f 7b       	andi	r24, 0xBF	; 191
    2134:	8c 93       	st	X, r24
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e8       	ldi	r26, 0x80	; 128
    213c:	bf e3       	ldi	r27, 0x3F	; 63
    213e:	8d ab       	std	Y+53, r24	; 0x35
    2140:	9e ab       	std	Y+54, r25	; 0x36
    2142:	af ab       	std	Y+55, r26	; 0x37
    2144:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6d a9       	ldd	r22, Y+53	; 0x35
    2148:	7e a9       	ldd	r23, Y+54	; 0x36
    214a:	8f a9       	ldd	r24, Y+55	; 0x37
    214c:	98 ad       	ldd	r25, Y+56	; 0x38
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a e7       	ldi	r20, 0x7A	; 122
    2154:	53 e4       	ldi	r21, 0x43	; 67
    2156:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	89 ab       	std	Y+49, r24	; 0x31
    2160:	9a ab       	std	Y+50, r25	; 0x32
    2162:	ab ab       	std	Y+51, r26	; 0x33
    2164:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2166:	69 a9       	ldd	r22, Y+49	; 0x31
    2168:	7a a9       	ldd	r23, Y+50	; 0x32
    216a:	8b a9       	ldd	r24, Y+51	; 0x33
    216c:	9c a9       	ldd	r25, Y+52	; 0x34
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <LCD_displayCharacter+0x84>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	98 ab       	std	Y+48, r25	; 0x30
    2184:	8f a7       	std	Y+47, r24	; 0x2f
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2188:	69 a9       	ldd	r22, Y+49	; 0x31
    218a:	7a a9       	ldd	r23, Y+50	; 0x32
    218c:	8b a9       	ldd	r24, Y+51	; 0x33
    218e:	9c a9       	ldd	r25, Y+52	; 0x34
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6d a9       	ldd	r22, Y+53	; 0x35
    21a2:	7e a9       	ldd	r23, Y+54	; 0x36
    21a4:	8f a9       	ldd	r24, Y+55	; 0x37
    21a6:	98 ad       	ldd	r25, Y+56	; 0x38
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	98 ab       	std	Y+48, r25	; 0x30
    21c6:	8f a7       	std	Y+47, r24	; 0x2f
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <LCD_displayCharacter+0xe4>
    21ca:	89 e1       	ldi	r24, 0x19	; 25
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9e a7       	std	Y+46, r25	; 0x2e
    21d0:	8d a7       	std	Y+45, r24	; 0x2d
    21d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <LCD_displayCharacter+0xd2>
    21da:	9e a7       	std	Y+46, r25	; 0x2e
    21dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e0:	98 a9       	ldd	r25, Y+48	; 0x30
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	98 ab       	std	Y+48, r25	; 0x30
    21e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ea:	98 a9       	ldd	r25, Y+48	; 0x30
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <LCD_displayCharacter+0xc6>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	69 a9       	ldd	r22, Y+49	; 0x31
    21f4:	7a a9       	ldd	r23, Y+50	; 0x32
    21f6:	8b a9       	ldd	r24, Y+51	; 0x33
    21f8:	9c a9       	ldd	r25, Y+52	; 0x34
    21fa:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	98 ab       	std	Y+48, r25	; 0x30
    2204:	8f a7       	std	Y+47, r24	; 0x2f
    2206:	8f a5       	ldd	r24, Y+47	; 0x2f
    2208:	98 a9       	ldd	r25, Y+48	; 0x30
    220a:	9c a7       	std	Y+44, r25	; 0x2c
    220c:	8b a7       	std	Y+43, r24	; 0x2b
    220e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2210:	9c a5       	ldd	r25, Y+44	; 0x2c
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <LCD_displayCharacter+0x10e>
    2216:	9c a7       	std	Y+44, r25	; 0x2c
    2218:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    221a:	a8 e3       	ldi	r26, 0x38	; 56
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e8 e3       	ldi	r30, 0x38	; 56
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 68       	ori	r24, 0x80	; 128
    2226:	8c 93       	st	X, r24
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a0 e8       	ldi	r26, 0x80	; 128
    222e:	bf e3       	ldi	r27, 0x3F	; 63
    2230:	8f a3       	std	Y+39, r24	; 0x27
    2232:	98 a7       	std	Y+40, r25	; 0x28
    2234:	a9 a7       	std	Y+41, r26	; 0x29
    2236:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2238:	6f a1       	ldd	r22, Y+39	; 0x27
    223a:	78 a5       	ldd	r23, Y+40	; 0x28
    223c:	89 a5       	ldd	r24, Y+41	; 0x29
    223e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	4a e7       	ldi	r20, 0x7A	; 122
    2246:	53 e4       	ldi	r21, 0x43	; 67
    2248:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8b a3       	std	Y+35, r24	; 0x23
    2252:	9c a3       	std	Y+36, r25	; 0x24
    2254:	ad a3       	std	Y+37, r26	; 0x25
    2256:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2258:	6b a1       	ldd	r22, Y+35	; 0x23
    225a:	7c a1       	ldd	r23, Y+36	; 0x24
    225c:	8d a1       	ldd	r24, Y+37	; 0x25
    225e:	9e a1       	ldd	r25, Y+38	; 0x26
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e8       	ldi	r20, 0x80	; 128
    2266:	5f e3       	ldi	r21, 0x3F	; 63
    2268:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    226c:	88 23       	and	r24, r24
    226e:	2c f4       	brge	.+10     	; 0x227a <LCD_displayCharacter+0x176>
		__ticks = 1;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9a a3       	std	Y+34, r25	; 0x22
    2276:	89 a3       	std	Y+33, r24	; 0x21
    2278:	3f c0       	rjmp	.+126    	; 0x22f8 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    227a:	6b a1       	ldd	r22, Y+35	; 0x23
    227c:	7c a1       	ldd	r23, Y+36	; 0x24
    227e:	8d a1       	ldd	r24, Y+37	; 0x25
    2280:	9e a1       	ldd	r25, Y+38	; 0x26
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	4c f5       	brge	.+82     	; 0x22e4 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	6f a1       	ldd	r22, Y+39	; 0x27
    2294:	78 a5       	ldd	r23, Y+40	; 0x28
    2296:	89 a5       	ldd	r24, Y+41	; 0x29
    2298:	9a a5       	ldd	r25, Y+42	; 0x2a
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	9a a3       	std	Y+34, r25	; 0x22
    22b8:	89 a3       	std	Y+33, r24	; 0x21
    22ba:	0f c0       	rjmp	.+30     	; 0x22da <LCD_displayCharacter+0x1d6>
    22bc:	89 e1       	ldi	r24, 0x19	; 25
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	98 a3       	std	Y+32, r25	; 0x20
    22c2:	8f 8f       	std	Y+31, r24	; 0x1f
    22c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22c6:	98 a1       	ldd	r25, Y+32	; 0x20
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_displayCharacter+0x1c4>
    22cc:	98 a3       	std	Y+32, r25	; 0x20
    22ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d0:	89 a1       	ldd	r24, Y+33	; 0x21
    22d2:	9a a1       	ldd	r25, Y+34	; 0x22
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	9a a3       	std	Y+34, r25	; 0x22
    22d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22da:	89 a1       	ldd	r24, Y+33	; 0x21
    22dc:	9a a1       	ldd	r25, Y+34	; 0x22
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	69 f7       	brne	.-38     	; 0x22bc <LCD_displayCharacter+0x1b8>
    22e2:	14 c0       	rjmp	.+40     	; 0x230c <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e4:	6b a1       	ldd	r22, Y+35	; 0x23
    22e6:	7c a1       	ldd	r23, Y+36	; 0x24
    22e8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ea:	9e a1       	ldd	r25, Y+38	; 0x26
    22ec:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9a a3       	std	Y+34, r25	; 0x22
    22f6:	89 a3       	std	Y+33, r24	; 0x21
    22f8:	89 a1       	ldd	r24, Y+33	; 0x21
    22fa:	9a a1       	ldd	r25, Y+34	; 0x22
    22fc:	9e 8f       	std	Y+30, r25	; 0x1e
    22fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_displayCharacter+0x200>
    2308:	9e 8f       	std	Y+30, r25	; 0x1e
    230a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    230c:	e5 e3       	ldi	r30, 0x35	; 53
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	89 ad       	ldd	r24, Y+57	; 0x39
    2312:	80 83       	st	Z, r24
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e8       	ldi	r26, 0x80	; 128
    231a:	bf e3       	ldi	r27, 0x3F	; 63
    231c:	89 8f       	std	Y+25, r24	; 0x19
    231e:	9a 8f       	std	Y+26, r25	; 0x1a
    2320:	ab 8f       	std	Y+27, r26	; 0x1b
    2322:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	69 8d       	ldd	r22, Y+25	; 0x19
    2326:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	4a e7       	ldi	r20, 0x7A	; 122
    2332:	53 e4       	ldi	r21, 0x43	; 67
    2334:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	8d 8b       	std	Y+21, r24	; 0x15
    233e:	9e 8b       	std	Y+22, r25	; 0x16
    2340:	af 8b       	std	Y+23, r26	; 0x17
    2342:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2344:	6d 89       	ldd	r22, Y+21	; 0x15
    2346:	7e 89       	ldd	r23, Y+22	; 0x16
    2348:	8f 89       	ldd	r24, Y+23	; 0x17
    234a:	98 8d       	ldd	r25, Y+24	; 0x18
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e8       	ldi	r20, 0x80	; 128
    2352:	5f e3       	ldi	r21, 0x3F	; 63
    2354:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    2358:	88 23       	and	r24, r24
    235a:	2c f4       	brge	.+10     	; 0x2366 <LCD_displayCharacter+0x262>
		__ticks = 1;
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	9c 8b       	std	Y+20, r25	; 0x14
    2362:	8b 8b       	std	Y+19, r24	; 0x13
    2364:	3f c0       	rjmp	.+126    	; 0x23e4 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2366:	6d 89       	ldd	r22, Y+21	; 0x15
    2368:	7e 89       	ldd	r23, Y+22	; 0x16
    236a:	8f 89       	ldd	r24, Y+23	; 0x17
    236c:	98 8d       	ldd	r25, Y+24	; 0x18
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	3f ef       	ldi	r19, 0xFF	; 255
    2372:	4f e7       	ldi	r20, 0x7F	; 127
    2374:	57 e4       	ldi	r21, 0x47	; 71
    2376:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    237a:	18 16       	cp	r1, r24
    237c:	4c f5       	brge	.+82     	; 0x23d0 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	69 8d       	ldd	r22, Y+25	; 0x19
    2380:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2382:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2384:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e2       	ldi	r20, 0x20	; 32
    238c:	51 e4       	ldi	r21, 0x41	; 65
    238e:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9c 8b       	std	Y+20, r25	; 0x14
    23a4:	8b 8b       	std	Y+19, r24	; 0x13
    23a6:	0f c0       	rjmp	.+30     	; 0x23c6 <LCD_displayCharacter+0x2c2>
    23a8:	89 e1       	ldi	r24, 0x19	; 25
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9a 8b       	std	Y+18, r25	; 0x12
    23ae:	89 8b       	std	Y+17, r24	; 0x11
    23b0:	89 89       	ldd	r24, Y+17	; 0x11
    23b2:	9a 89       	ldd	r25, Y+18	; 0x12
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_displayCharacter+0x2b0>
    23b8:	9a 8b       	std	Y+18, r25	; 0x12
    23ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23bc:	8b 89       	ldd	r24, Y+19	; 0x13
    23be:	9c 89       	ldd	r25, Y+20	; 0x14
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	9c 8b       	std	Y+20, r25	; 0x14
    23c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	8b 89       	ldd	r24, Y+19	; 0x13
    23c8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	69 f7       	brne	.-38     	; 0x23a8 <LCD_displayCharacter+0x2a4>
    23ce:	14 c0       	rjmp	.+40     	; 0x23f8 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d0:	6d 89       	ldd	r22, Y+21	; 0x15
    23d2:	7e 89       	ldd	r23, Y+22	; 0x16
    23d4:	8f 89       	ldd	r24, Y+23	; 0x17
    23d6:	98 8d       	ldd	r25, Y+24	; 0x18
    23d8:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9c 8b       	std	Y+20, r25	; 0x14
    23e2:	8b 8b       	std	Y+19, r24	; 0x13
    23e4:	8b 89       	ldd	r24, Y+19	; 0x13
    23e6:	9c 89       	ldd	r25, Y+20	; 0x14
    23e8:	98 8b       	std	Y+16, r25	; 0x10
    23ea:	8f 87       	std	Y+15, r24	; 0x0f
    23ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ee:	98 89       	ldd	r25, Y+16	; 0x10
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <LCD_displayCharacter+0x2ec>
    23f4:	98 8b       	std	Y+16, r25	; 0x10
    23f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    23f8:	a8 e3       	ldi	r26, 0x38	; 56
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e8 e3       	ldi	r30, 0x38	; 56
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8f 77       	andi	r24, 0x7F	; 127
    2404:	8c 93       	st	X, r24
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e8       	ldi	r26, 0x80	; 128
    240c:	bf e3       	ldi	r27, 0x3F	; 63
    240e:	8b 87       	std	Y+11, r24	; 0x0b
    2410:	9c 87       	std	Y+12, r25	; 0x0c
    2412:	ad 87       	std	Y+13, r26	; 0x0d
    2414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	6b 85       	ldd	r22, Y+11	; 0x0b
    2418:	7c 85       	ldd	r23, Y+12	; 0x0c
    241a:	8d 85       	ldd	r24, Y+13	; 0x0d
    241c:	9e 85       	ldd	r25, Y+14	; 0x0e
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a e7       	ldi	r20, 0x7A	; 122
    2424:	53 e4       	ldi	r21, 0x43	; 67
    2426:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8f 83       	std	Y+7, r24	; 0x07
    2430:	98 87       	std	Y+8, r25	; 0x08
    2432:	a9 87       	std	Y+9, r26	; 0x09
    2434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <LCD_displayCharacter+0x354>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <LCD_displayCharacter+0x3b4>
    249a:	89 e1       	ldi	r24, 0x19	; 25
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_displayCharacter+0x3a2>
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <LCD_displayCharacter+0x396>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_displayCharacter+0x3de>
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    24ea:	e9 96       	adiw	r28, 0x39	; 57
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <LCD_displayString+0x6>
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	9b 83       	std	Y+3, r25	; 0x03
    250a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	0e c0       	rjmp	.+28     	; 0x252c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	9b 81       	ldd	r25, Y+3	; 0x03
    251a:	fc 01       	movw	r30, r24
    251c:	e2 0f       	add	r30, r18
    251e:	f3 1f       	adc	r31, r19
    2520:	80 81       	ld	r24, Z
    2522:	0e 94 82 10 	call	0x2104	; 0x2104 <LCD_displayCharacter>
		i++;
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	8f 5f       	subi	r24, 0xFF	; 255
    252a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	fc 01       	movw	r30, r24
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	80 81       	ld	r24, Z
    253e:	88 23       	and	r24, r24
    2540:	39 f7       	brne	.-50     	; 0x2510 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	00 d0       	rcall	.+0      	; 0x2554 <LCD_goToRowColumn+0x6>
    2554:	00 d0       	rcall	.+0      	; 0x2556 <LCD_goToRowColumn+0x8>
    2556:	0f 92       	push	r0
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	8a 83       	std	Y+2, r24	; 0x02
    255e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	3d 83       	std	Y+5, r19	; 0x05
    2568:	2c 83       	std	Y+4, r18	; 0x04
    256a:	8c 81       	ldd	r24, Y+4	; 0x04
    256c:	9d 81       	ldd	r25, Y+5	; 0x05
    256e:	81 30       	cpi	r24, 0x01	; 1
    2570:	91 05       	cpc	r25, r1
    2572:	c1 f0       	breq	.+48     	; 0x25a4 <LCD_goToRowColumn+0x56>
    2574:	2c 81       	ldd	r18, Y+4	; 0x04
    2576:	3d 81       	ldd	r19, Y+5	; 0x05
    2578:	22 30       	cpi	r18, 0x02	; 2
    257a:	31 05       	cpc	r19, r1
    257c:	2c f4       	brge	.+10     	; 0x2588 <LCD_goToRowColumn+0x3a>
    257e:	8c 81       	ldd	r24, Y+4	; 0x04
    2580:	9d 81       	ldd	r25, Y+5	; 0x05
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	61 f0       	breq	.+24     	; 0x259e <LCD_goToRowColumn+0x50>
    2586:	19 c0       	rjmp	.+50     	; 0x25ba <LCD_goToRowColumn+0x6c>
    2588:	2c 81       	ldd	r18, Y+4	; 0x04
    258a:	3d 81       	ldd	r19, Y+5	; 0x05
    258c:	22 30       	cpi	r18, 0x02	; 2
    258e:	31 05       	cpc	r19, r1
    2590:	69 f0       	breq	.+26     	; 0x25ac <LCD_goToRowColumn+0x5e>
    2592:	8c 81       	ldd	r24, Y+4	; 0x04
    2594:	9d 81       	ldd	r25, Y+5	; 0x05
    2596:	83 30       	cpi	r24, 0x03	; 3
    2598:	91 05       	cpc	r25, r1
    259a:	61 f0       	breq	.+24     	; 0x25b4 <LCD_goToRowColumn+0x66>
    259c:	0e c0       	rjmp	.+28     	; 0x25ba <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	0b c0       	rjmp	.+22     	; 0x25ba <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	80 5c       	subi	r24, 0xC0	; 192
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	07 c0       	rjmp	.+14     	; 0x25ba <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x14;
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	8c 5e       	subi	r24, 0xEC	; 236
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	03 c0       	rjmp	.+6      	; 0x25ba <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x54;
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	8c 5a       	subi	r24, 0xAC	; 172
    25b8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	80 68       	ori	r24, 0x80	; 128
    25be:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_sendCommand>
}
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <LCD_displayStringRowColumn+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <LCD_displayStringRowColumn+0x8>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	6a 83       	std	Y+2, r22	; 0x02
    25e2:	5c 83       	std	Y+4, r21	; 0x04
    25e4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	6a 81       	ldd	r22, Y+2	; 0x02
    25ea:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	cf 91       	pop	r28
    2600:	df 91       	pop	r29
    2602:	08 95       	ret

00002604 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	62 97       	sbiw	r28, 0x12	; 18
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	9a 8b       	std	Y+18, r25	; 0x12
    261a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    261c:	89 89       	ldd	r24, Y+17	; 0x11
    261e:	9a 89       	ldd	r25, Y+18	; 0x12
    2620:	9e 01       	movw	r18, r28
    2622:	2f 5f       	subi	r18, 0xFF	; 255
    2624:	3f 4f       	sbci	r19, 0xFF	; 255
    2626:	b9 01       	movw	r22, r18
    2628:	4a e0       	ldi	r20, 0x0A	; 10
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	0e 94 67 17 	call	0x2ece	; 0x2ece <itoa>
   LCD_displayString(buff);
    2630:	ce 01       	movw	r24, r28
    2632:	01 96       	adiw	r24, 0x01	; 1
    2634:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>
}
    2638:	62 96       	adiw	r28, 0x12	; 18
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_sendCommand>
}
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <main>:


#include"app_file.h"

int main(void)
{
    265e:	6f 92       	push	r6
    2660:	7f 92       	push	r7
    2662:	8f 92       	push	r8
    2664:	9f 92       	push	r9
    2666:	af 92       	push	r10
    2668:	bf 92       	push	r11
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	cb 58       	subi	r28, 0x8B	; 139
    2680:	d0 40       	sbci	r29, 0x00	; 0
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Variable to use it as 2 states to use it as condition to check if
	 *the state of it changes or not, and that  to avoid using 'break' in the loop
	 * which responsible to store the whole statement,
	 */
	bool SW_flag = FALSE;
    268c:	1e a6       	std	Y+46, r1	; 0x2e
	/*
	 * Variable to use it as 2 states to use it as condition to check if
	 *the entered statement in the right way or not
	 */
	bool syntaxError = FALSE;
    268e:	1d a6       	std	Y+45, r1	; 0x2d
	/*
	 * variable to use it to determine the actual size
	 * which is the used size from the total size of the
	 * statement array
	 */
	uint8 statementArray_size = INITIAL_VALUE;
    2690:	fe 01       	movw	r30, r28
    2692:	e6 57       	subi	r30, 0x76	; 118
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	10 82       	st	Z, r1
	/*
	 * variable to use it to determine the actual size
	 * which is the used size from the total size of the
	 * first number array
	 */
	uint8 firstNumber_size   = INITIAL_VALUE;
    2698:	1c a6       	std	Y+44, r1	; 0x2c
	/*
	 * variable to use it to determine the actual size
	 * which is the used size from the total size of the
	 * second number array
	 */
	uint8 secondNumber_size  = INITIAL_VALUE;
    269a:	1b a6       	std	Y+43, r1	; 0x2b
	/*
	 * variable to store the first number after convert
	 * first number array to number, concatenate all its element
	 * together to implement the right entered number
	 */
	sint64 first_operand = INITIAL_VALUE;
    269c:	1a a2       	std	Y+34, r1	; 0x22
    269e:	1b a2       	std	Y+35, r1	; 0x23
    26a0:	1c a2       	std	Y+36, r1	; 0x24
    26a2:	1d a2       	std	Y+37, r1	; 0x25
    26a4:	1e a2       	std	Y+38, r1	; 0x26
    26a6:	1f a2       	std	Y+39, r1	; 0x27
    26a8:	18 a6       	std	Y+40, r1	; 0x28
    26aa:	19 a6       	std	Y+41, r1	; 0x29
	/*
	 * variable to store the second number after convert
	 * second number array to number, concatenate all its element
	 * together to implement the right entered number
	 */
	sint64 second_operand= INITIAL_VALUE;
    26ac:	1a 8e       	std	Y+26, r1	; 0x1a
    26ae:	1b 8e       	std	Y+27, r1	; 0x1b
    26b0:	1c 8e       	std	Y+28, r1	; 0x1c
    26b2:	1d 8e       	std	Y+29, r1	; 0x1d
    26b4:	1e 8e       	std	Y+30, r1	; 0x1e
    26b6:	1f 8e       	std	Y+31, r1	; 0x1f
    26b8:	18 a2       	std	Y+32, r1	; 0x20
    26ba:	19 a2       	std	Y+33, r1	; 0x21
	/*
	 * variable to store the first operand after detecting
	 * its actual sign
	 */
	sint64 first_number_signed= INITIAL_VALUE;
    26bc:	1a 8a       	std	Y+18, r1	; 0x12
    26be:	1b 8a       	std	Y+19, r1	; 0x13
    26c0:	1c 8a       	std	Y+20, r1	; 0x14
    26c2:	1d 8a       	std	Y+21, r1	; 0x15
    26c4:	1e 8a       	std	Y+22, r1	; 0x16
    26c6:	1f 8a       	std	Y+23, r1	; 0x17
    26c8:	18 8e       	std	Y+24, r1	; 0x18
    26ca:	19 8e       	std	Y+25, r1	; 0x19
	sint8 secondNumber_sign;
	/*
	 * variable to store the number of negative sign before or
	 * after the number
	 */
	uint8 negative = INITIAL_VALUE;
    26cc:	fe 01       	movw	r30, r28
    26ce:	e5 57       	subi	r30, 0x75	; 117
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	10 82       	st	Z, r1
	/*
	 * variable to use it to calculate the number of all signs
	 * before and after the number , positive and negative
	 */
	bool errorFlag= FALSE;
    26d4:	1f 86       	std	Y+15, r1	; 0x0f
	/*******************************************************************************
	 *                           Modules Initialization                            *
	 *******************************************************************************/
	LCD_init();
    26d6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <LCD_init>
		/*
		 * force the cursor to got to the first row & first column position
		 * display message "Simple Calculator" to user to be the default message
		 * force the cursor to got to the second row & first column position
		 */
		LCD_goToRowColumn(FIRST_ROW, FIRST_COLOUMN);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
		LCD_displayString("Simple Calculator");
    26e2:	80 e6       	ldi	r24, 0x60	; 96
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>
		LCD_goToRowColumn(SECOND_ROW, FIRST_COLOUMN);
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
		/*******************************************************************************
		 *  Receive the whole statement from user which contain numbers & operations   *
		 *******************************************************************************/
		for(counter = 0;  SW_flag != TRUE ; counter++)
    26f2:	1f a6       	std	Y+47, r1	; 0x2f
    26f4:	bf c0       	rjmp	.+382    	; 0x2874 <main+0x216>
		{
			/*store all the entered keys from the user*/
			statementArray[counter]  = KeyPad_getPressedKey();
    26f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f8:	08 2f       	mov	r16, r24
    26fa:	10 e0       	ldi	r17, 0x00	; 0
    26fc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KeyPad_getPressedKey>
    2700:	28 2f       	mov	r18, r24
    2702:	ce 01       	movw	r24, r28
    2704:	c0 96       	adiw	r24, 0x30	; 48
    2706:	fc 01       	movw	r30, r24
    2708:	e0 0f       	add	r30, r16
    270a:	f1 1f       	adc	r31, r17
    270c:	20 83       	st	Z, r18

			/*
			 * call the function displayKey to display each char by its
			 * right specific way
			 */
			display_key( &statementArray[counter] );
    270e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	ce 01       	movw	r24, r28
    2716:	c0 96       	adiw	r24, 0x30	; 48
    2718:	82 0f       	add	r24, r18
    271a:	93 1f       	adc	r25, r19
    271c:	0e 94 ef 07 	call	0xfde	; 0xfde <display_key>

			/*
			 * increment the size of the statement array with
			 * every press on the keypad till reach reach '=' char
			 */
			statementArray_size++;
    2720:	fe 01       	movw	r30, r28
    2722:	e6 57       	subi	r30, 0x76	; 118
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	8f 5f       	subi	r24, 0xFF	; 255
    272a:	fe 01       	movw	r30, r28
    272c:	e6 57       	subi	r30, 0x76	; 118
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	80 83       	st	Z, r24

			/*condition to make the statement ends when the user enters '=' */
			if(statementArray[counter] == '=')
    2732:	8f a5       	ldd	r24, Y+47	; 0x2f
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	ce 01       	movw	r24, r28
    273a:	c0 96       	adiw	r24, 0x30	; 48
    273c:	fc 01       	movw	r30, r24
    273e:	e2 0f       	add	r30, r18
    2740:	f3 1f       	adc	r31, r19
    2742:	80 81       	ld	r24, Z
    2744:	8d 33       	cpi	r24, 0x3D	; 61
    2746:	11 f4       	brne	.+4      	; 0x274c <main+0xee>
			{
				/*
				 * change the statement of the variable SW_flag to
				 * exit from the loop when the user enters '='
				 */
				SW_flag = TRUE;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	8e a7       	std	Y+46, r24	; 0x2e
			}
			if(statementArray[counter] == ENTER_KEY_ASCII_VALUE)
    274c:	8f a5       	ldd	r24, Y+47	; 0x2f
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	ce 01       	movw	r24, r28
    2754:	c0 96       	adiw	r24, 0x30	; 48
    2756:	fc 01       	movw	r30, r24
    2758:	e2 0f       	add	r30, r18
    275a:	f3 1f       	adc	r31, r19
    275c:	80 81       	ld	r24, Z
    275e:	8d 30       	cpi	r24, 0x0D	; 13
    2760:	a1 f4       	brne	.+40     	; 0x278a <main+0x12c>
			{

				counter = -1;
    2762:	8f ef       	ldi	r24, 0xFF	; 255
    2764:	8f a7       	std	Y+47, r24	; 0x2f
				statementArray_size = INITIAL_VALUE;
    2766:	fe 01       	movw	r30, r28
    2768:	e6 57       	subi	r30, 0x76	; 118
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	10 82       	st	Z, r1

				/*
				 * clear the screen & return to the main program
				 */
				LCD_clearScreen();
    276e:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_clearScreen>
				/*
				 * force the cursor to got to the first row & first column position
				 * display message "Simple Calculator" to user to be the default message
				 * force the cursor to got to the second row & first column position
				 */
				LCD_goToRowColumn(FIRST_ROW, FIRST_COLOUMN);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
				LCD_displayString("Simple Calculator");
    277a:	80 e6       	ldi	r24, 0x60	; 96
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>
				LCD_goToRowColumn(SECOND_ROW, FIRST_COLOUMN);
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	60 e0       	ldi	r22, 0x00	; 0
    2786:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a6 e9       	ldi	r26, 0x96	; 150
    2790:	b3 e4       	ldi	r27, 0x43	; 67
    2792:	8b 87       	std	Y+11, r24	; 0x0b
    2794:	9c 87       	std	Y+12, r25	; 0x0c
    2796:	ad 87       	std	Y+13, r26	; 0x0d
    2798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279a:	6b 85       	ldd	r22, Y+11	; 0x0b
    279c:	7c 85       	ldd	r23, Y+12	; 0x0c
    279e:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a e7       	ldi	r20, 0x7A	; 122
    27a8:	53 e4       	ldi	r21, 0x43	; 67
    27aa:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	8f 83       	std	Y+7, r24	; 0x07
    27b4:	98 87       	std	Y+8, r25	; 0x08
    27b6:	a9 87       	std	Y+9, r26	; 0x09
    27b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ba:	6f 81       	ldd	r22, Y+7	; 0x07
    27bc:	78 85       	ldd	r23, Y+8	; 0x08
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	2c f4       	brge	.+10     	; 0x27dc <main+0x17e>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	3f c0       	rjmp	.+126    	; 0x285a <main+0x1fc>
	else if (__tmp > 65535)
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	3f ef       	ldi	r19, 0xFF	; 255
    27e8:	4f e7       	ldi	r20, 0x7F	; 127
    27ea:	57 e4       	ldi	r21, 0x47	; 71
    27ec:	0e 94 8b 04 	call	0x916	; 0x916 <__gtsf2>
    27f0:	18 16       	cp	r1, r24
    27f2:	4c f5       	brge	.+82     	; 0x2846 <main+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 91 03 	call	0x722	; 0x722 <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	bc 01       	movw	r22, r24
    280e:	cd 01       	movw	r24, r26
    2810:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
    281c:	0f c0       	rjmp	.+30     	; 0x283c <main+0x1de>
    281e:	89 e1       	ldi	r24, 0x19	; 25
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	9c 83       	std	Y+4, r25	; 0x04
    2824:	8b 83       	std	Y+3, r24	; 0x03
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <main+0x1cc>
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	9e 83       	std	Y+6, r25	; 0x06
    283a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	69 f7       	brne	.-38     	; 0x281e <main+0x1c0>
    2844:	14 c0       	rjmp	.+40     	; 0x286e <main+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	0e 94 bb 01 	call	0x376	; 0x376 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9e 83       	std	Y+6, r25	; 0x06
    2858:	8d 83       	std	Y+5, r24	; 0x05
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <main+0x208>
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayString("Simple Calculator");
		LCD_goToRowColumn(SECOND_ROW, FIRST_COLOUMN);
		/*******************************************************************************
		 *  Receive the whole statement from user which contain numbers & operations   *
		 *******************************************************************************/
		for(counter = 0;  SW_flag != TRUE ; counter++)
    286e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2870:	8f 5f       	subi	r24, 0xFF	; 255
    2872:	8f a7       	std	Y+47, r24	; 0x2f
    2874:	8e a5       	ldd	r24, Y+46	; 0x2e
    2876:	81 30       	cpi	r24, 0x01	; 1
    2878:	09 f0       	breq	.+2      	; 0x287c <main+0x21e>
    287a:	3d cf       	rjmp	.-390    	; 0x26f6 <main+0x98>
		}
		/*******************************************************************************/
		/*
		 * Check the syntax of the entered numbers & operations
		 */
		syntaxError = check_syntaxError(statementArray, &statementArray_size);
    287c:	ce 01       	movw	r24, r28
    287e:	c0 96       	adiw	r24, 0x30	; 48
    2880:	9e 01       	movw	r18, r28
    2882:	26 57       	subi	r18, 0x76	; 118
    2884:	3f 4f       	sbci	r19, 0xFF	; 255
    2886:	b9 01       	movw	r22, r18
    2888:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <check_syntaxError>
    288c:	8d a7       	std	Y+45, r24	; 0x2d
		/*******************************************************************************
		 *                           A-Wrong Syntax Stage                               *
		 *******************************************************************************/
		if (syntaxError == TRUE)
    288e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	c1 f4       	brne	.+48     	; 0x28c4 <main+0x266>
		{
			/*
			 * Return the variable to be false again to be ready for the
			 * next check & do this operation in the right way
			 */
			syntaxError = FALSE;
    2894:	1d a6       	std	Y+45, r1	; 0x2d
			 * force the cursor to got to the third row & first column position
			 * display message "Syntax Error" to user
			 * force the cursor to got to the fourth row & first column position
			 * display message "Press Enter to CONT." to user
			 */
			LCD_goToRowColumn(THIRD_ROW, FIRST_COLOUMN);
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	60 e0       	ldi	r22, 0x00	; 0
    289a:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
			LCD_displayString("Syntax Error!");
    289e:	82 e7       	ldi	r24, 0x72	; 114
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>
			LCD_goToRowColumn(FOURTH_ROW, FIRST_COLOUMN);
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	60 e0       	ldi	r22, 0x00	; 0
    28aa:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
			LCD_displayString("Press Enter to CONT.");
    28ae:	80 e8       	ldi	r24, 0x80	; 128
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>

			while((KeyPad_getPressedKey()) != ENTER_KEY_ASCII_VALUE);
    28b6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KeyPad_getPressedKey>
    28ba:	8d 30       	cpi	r24, 0x0D	; 13
    28bc:	e1 f7       	brne	.-8      	; 0x28b6 <main+0x258>
			LCD_clearScreen();
    28be:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_clearScreen>
    28c2:	56 c2       	rjmp	.+1196   	; 0x2d70 <main+0x712>

		}
		/*******************************************************************************
		 *                           B-right Syntax Stage                               *
		 *******************************************************************************/
		else if ( syntaxError == FALSE )
    28c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    28c6:	88 23       	and	r24, r24
    28c8:	09 f0       	breq	.+2      	; 0x28cc <main+0x26e>
    28ca:	52 c2       	rjmp	.+1188   	; 0x2d70 <main+0x712>
		{
			/*
			 * return the value of the counter to be 0
			 * to start reading the statement array from the first
			 */
			counter =0;
    28cc:	1f a6       	std	Y+47, r1	; 0x2f
    28ce:	17 c0       	rjmp	.+46     	; 0x28fe <main+0x2a0>
			 */
			while( (statementArray[counter] == '+') ||
					(statementArray[counter] == '-') )
			{

				if( statementArray[counter] == '-')
    28d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	ce 01       	movw	r24, r28
    28d8:	c0 96       	adiw	r24, 0x30	; 48
    28da:	fc 01       	movw	r30, r24
    28dc:	e2 0f       	add	r30, r18
    28de:	f3 1f       	adc	r31, r19
    28e0:	80 81       	ld	r24, Z
    28e2:	8d 32       	cpi	r24, 0x2D	; 45
    28e4:	49 f4       	brne	.+18     	; 0x28f8 <main+0x29a>
				{
					/*
					 * increment the variable of the negative number
					 * if the sign before the number is negative ONLY
					 */
					negative++;
    28e6:	fe 01       	movw	r30, r28
    28e8:	e5 57       	subi	r30, 0x75	; 117
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	80 81       	ld	r24, Z
    28ee:	8f 5f       	subi	r24, 0xFF	; 255
    28f0:	fe 01       	movw	r30, r28
    28f2:	e5 57       	subi	r30, 0x75	; 117
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 83       	st	Z, r24
				}
				/*
				 * increment the value of the counter till reach the first digit of the number
				 */
				counter++;
    28f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fa:	8f 5f       	subi	r24, 0xFF	; 255
    28fc:	8f a7       	std	Y+47, r24	; 0x2f
			/*
			 * this loop to make sure that the first element will be stored in the
			 * first array number will be number not sign and to calculate the
			 * number of negative signs before the first number if exist
			 */
			while( (statementArray[counter] == '+') ||
    28fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2900:	28 2f       	mov	r18, r24
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	ce 01       	movw	r24, r28
    2906:	c0 96       	adiw	r24, 0x30	; 48
    2908:	fc 01       	movw	r30, r24
    290a:	e2 0f       	add	r30, r18
    290c:	f3 1f       	adc	r31, r19
    290e:	80 81       	ld	r24, Z
    2910:	8b 32       	cpi	r24, 0x2B	; 43
    2912:	f1 f2       	breq	.-68     	; 0x28d0 <main+0x272>
    2914:	8f a5       	ldd	r24, Y+47	; 0x2f
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	ce 01       	movw	r24, r28
    291c:	c0 96       	adiw	r24, 0x30	; 48
    291e:	fc 01       	movw	r30, r24
    2920:	e2 0f       	add	r30, r18
    2922:	f3 1f       	adc	r31, r19
    2924:	80 81       	ld	r24, Z
    2926:	8d 32       	cpi	r24, 0x2D	; 45
    2928:	99 f2       	breq	.-90     	; 0x28d0 <main+0x272>

			/*
			 * detect the final sign of the first operand
			 * store it in a variable
			 */
			firstNumber_sign =  check_sign(&negative);
    292a:	ce 01       	movw	r24, r28
    292c:	85 57       	subi	r24, 0x75	; 117
    292e:	9f 4f       	sbci	r25, 0xFF	; 255
    2930:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <check_sign>
    2934:	89 8b       	std	Y+17, r24	; 0x11
    2936:	19 c0       	rjmp	.+50     	; 0x296a <main+0x30c>
			{
				/*
				 * store the first number in the first number array
				 * element by element from the statement array
				 */
				first_numberArray[firstNumber_size] = statementArray[counter];
    2938:	8c a5       	ldd	r24, Y+44	; 0x2c
    293a:	48 2f       	mov	r20, r24
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	ce 01       	movw	r24, r28
    2946:	c0 96       	adiw	r24, 0x30	; 48
    2948:	fc 01       	movw	r30, r24
    294a:	e2 0f       	add	r30, r18
    294c:	f3 1f       	adc	r31, r19
    294e:	20 81       	ld	r18, Z
    2950:	ce 01       	movw	r24, r28
    2952:	8e 59       	subi	r24, 0x9E	; 158
    2954:	9f 4f       	sbci	r25, 0xFF	; 255
    2956:	fc 01       	movw	r30, r24
    2958:	e4 0f       	add	r30, r20
    295a:	f5 1f       	adc	r31, r21
    295c:	20 83       	st	Z, r18
				/*
				 * increment the size of the first number array
				 * to get the actual size of the array till reach
				 * the next sign
				 */
				firstNumber_size++;
    295e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2960:	8f 5f       	subi	r24, 0xFF	; 255
    2962:	8c a7       	std	Y+44, r24	; 0x2c
				/*
				 * increment the counter till reach the first sign
				 */
				counter++;
    2964:	8f a5       	ldd	r24, Y+47	; 0x2f
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	8f a7       	std	Y+47, r24	; 0x2f
			firstNumber_sign =  check_sign(&negative);
			/*
			 * start to get the first number element by element
			 * store it in first number array till reach the next sign
			 */
			while ( (statementArray[counter] != '+') &&
    296a:	8f a5       	ldd	r24, Y+47	; 0x2f
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	ce 01       	movw	r24, r28
    2972:	c0 96       	adiw	r24, 0x30	; 48
    2974:	fc 01       	movw	r30, r24
    2976:	e2 0f       	add	r30, r18
    2978:	f3 1f       	adc	r31, r19
    297a:	80 81       	ld	r24, Z
    297c:	8b 32       	cpi	r24, 0x2B	; 43
    297e:	c1 f1       	breq	.+112    	; 0x29f0 <main+0x392>
    2980:	8f a5       	ldd	r24, Y+47	; 0x2f
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	ce 01       	movw	r24, r28
    2988:	c0 96       	adiw	r24, 0x30	; 48
    298a:	fc 01       	movw	r30, r24
    298c:	e2 0f       	add	r30, r18
    298e:	f3 1f       	adc	r31, r19
    2990:	80 81       	ld	r24, Z
    2992:	8d 32       	cpi	r24, 0x2D	; 45
    2994:	69 f1       	breq	.+90     	; 0x29f0 <main+0x392>
    2996:	8f a5       	ldd	r24, Y+47	; 0x2f
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	ce 01       	movw	r24, r28
    299e:	c0 96       	adiw	r24, 0x30	; 48
    29a0:	fc 01       	movw	r30, r24
    29a2:	e2 0f       	add	r30, r18
    29a4:	f3 1f       	adc	r31, r19
    29a6:	80 81       	ld	r24, Z
    29a8:	8a 32       	cpi	r24, 0x2A	; 42
    29aa:	11 f1       	breq	.+68     	; 0x29f0 <main+0x392>
    29ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	ce 01       	movw	r24, r28
    29b4:	c0 96       	adiw	r24, 0x30	; 48
    29b6:	fc 01       	movw	r30, r24
    29b8:	e2 0f       	add	r30, r18
    29ba:	f3 1f       	adc	r31, r19
    29bc:	80 81       	ld	r24, Z
    29be:	8f 32       	cpi	r24, 0x2F	; 47
    29c0:	b9 f0       	breq	.+46     	; 0x29f0 <main+0x392>
    29c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c4:	28 2f       	mov	r18, r24
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	ce 01       	movw	r24, r28
    29ca:	c0 96       	adiw	r24, 0x30	; 48
    29cc:	fc 01       	movw	r30, r24
    29ce:	e2 0f       	add	r30, r18
    29d0:	f3 1f       	adc	r31, r19
    29d2:	80 81       	ld	r24, Z
    29d4:	85 32       	cpi	r24, 0x25	; 37
    29d6:	61 f0       	breq	.+24     	; 0x29f0 <main+0x392>
    29d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29da:	28 2f       	mov	r18, r24
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	ce 01       	movw	r24, r28
    29e0:	c0 96       	adiw	r24, 0x30	; 48
    29e2:	fc 01       	movw	r30, r24
    29e4:	e2 0f       	add	r30, r18
    29e6:	f3 1f       	adc	r31, r19
    29e8:	80 81       	ld	r24, Z
    29ea:	8d 33       	cpi	r24, 0x3D	; 61
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <main+0x392>
    29ee:	a4 cf       	rjmp	.-184    	; 0x2938 <main+0x2da>
			}
			/*
			 * cocatanate the first number array to be a number and store it
			 * in the first operand variable
			 */
			first_operand = convertArrayToNumber(first_numberArray, firstNumber_size);
    29f0:	ce 01       	movw	r24, r28
    29f2:	8e 59       	subi	r24, 0x9E	; 158
    29f4:	9f 4f       	sbci	r25, 0xFF	; 255
    29f6:	6c a5       	ldd	r22, Y+44	; 0x2c
    29f8:	0e 94 0d 08 	call	0x101a	; 0x101a <convertArrayToNumber>
    29fc:	a2 2e       	mov	r10, r18
    29fe:	b3 2e       	mov	r11, r19
    2a00:	c4 2e       	mov	r12, r20
    2a02:	d5 2e       	mov	r13, r21
    2a04:	e6 2e       	mov	r14, r22
    2a06:	f7 2e       	mov	r15, r23
    2a08:	08 2f       	mov	r16, r24
    2a0a:	19 2f       	mov	r17, r25
    2a0c:	aa a2       	std	Y+34, r10	; 0x22
    2a0e:	bb a2       	std	Y+35, r11	; 0x23
    2a10:	cc a2       	std	Y+36, r12	; 0x24
    2a12:	dd a2       	std	Y+37, r13	; 0x25
    2a14:	ee a2       	std	Y+38, r14	; 0x26
    2a16:	ff a2       	std	Y+39, r15	; 0x27
    2a18:	08 a7       	std	Y+40, r16	; 0x28
    2a1a:	19 a7       	std	Y+41, r17	; 0x29
			/*
			 * get the first operand with its right sign
			 */
			first_number_signed = first_operand * firstNumber_sign;
    2a1c:	89 89       	ldd	r24, Y+17	; 0x11
    2a1e:	88 0f       	add	r24, r24
    2a20:	88 0b       	sbc	r24, r24
    2a22:	a9 88       	ldd	r10, Y+17	; 0x11
    2a24:	b8 2e       	mov	r11, r24
    2a26:	c8 2e       	mov	r12, r24
    2a28:	d8 2e       	mov	r13, r24
    2a2a:	e8 2e       	mov	r14, r24
    2a2c:	f8 2e       	mov	r15, r24
    2a2e:	08 2f       	mov	r16, r24
    2a30:	18 2f       	mov	r17, r24
    2a32:	2a 2d       	mov	r18, r10
    2a34:	3b 2d       	mov	r19, r11
    2a36:	4c 2d       	mov	r20, r12
    2a38:	5d 2d       	mov	r21, r13
    2a3a:	6e 2d       	mov	r22, r14
    2a3c:	7f 2d       	mov	r23, r15
    2a3e:	80 2f       	mov	r24, r16
    2a40:	91 2f       	mov	r25, r17
    2a42:	aa a0       	ldd	r10, Y+34	; 0x22
    2a44:	bb a0       	ldd	r11, Y+35	; 0x23
    2a46:	cc a0       	ldd	r12, Y+36	; 0x24
    2a48:	dd a0       	ldd	r13, Y+37	; 0x25
    2a4a:	ee a0       	ldd	r14, Y+38	; 0x26
    2a4c:	ff a0       	ldd	r15, Y+39	; 0x27
    2a4e:	08 a5       	ldd	r16, Y+40	; 0x28
    2a50:	19 a5       	ldd	r17, Y+41	; 0x29
    2a52:	0e 94 41 00 	call	0x82	; 0x82 <__muldi3>
    2a56:	a2 2e       	mov	r10, r18
    2a58:	b3 2e       	mov	r11, r19
    2a5a:	c4 2e       	mov	r12, r20
    2a5c:	d5 2e       	mov	r13, r21
    2a5e:	e6 2e       	mov	r14, r22
    2a60:	f7 2e       	mov	r15, r23
    2a62:	08 2f       	mov	r16, r24
    2a64:	19 2f       	mov	r17, r25
    2a66:	aa 8a       	std	Y+18, r10	; 0x12
    2a68:	bb 8a       	std	Y+19, r11	; 0x13
    2a6a:	cc 8a       	std	Y+20, r12	; 0x14
    2a6c:	dd 8a       	std	Y+21, r13	; 0x15
    2a6e:	ee 8a       	std	Y+22, r14	; 0x16
    2a70:	ff 8a       	std	Y+23, r15	; 0x17
    2a72:	08 8f       	std	Y+24, r16	; 0x18
    2a74:	19 8f       	std	Y+25, r17	; 0x19

			/*
			 * detect the operation and store it in a variable
			 * to be ready to do the operation
			 */
			operation = statementArray[counter];
    2a76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	c0 96       	adiw	r24, 0x30	; 48
    2a80:	fc 01       	movw	r30, r24
    2a82:	e2 0f       	add	r30, r18
    2a84:	f3 1f       	adc	r31, r19
    2a86:	80 81       	ld	r24, Z
    2a88:	8a a7       	std	Y+42, r24	; 0x2a

			/*
			 * increment the counter to point at the element after the operation
			 */
			counter = counter+1;
    2a8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	8f a7       	std	Y+47, r24	; 0x2f
			/*******************************************************************************
			 *                   (B-1) Check size of the counter Stage                     *
			 *         (B-1-1) this condition means that there aren't operation            *
			 *                     and this is (number = ) case                            *
			 *******************************************************************************/
			if(counter >= statementArray_size)
    2a90:	fe 01       	movw	r30, r28
    2a92:	e6 57       	subi	r30, 0x76	; 118
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	90 81       	ld	r25, Z
    2a98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9a:	89 17       	cp	r24, r25
    2a9c:	98 f0       	brcs	.+38     	; 0x2ac4 <main+0x466>
			{
				/*
				 * in the (number = ) case we have to display the same number only
				 * then return to the main program
				 */
				LCD_intgerToString(first_number_signed);
    2a9e:	8a 89       	ldd	r24, Y+18	; 0x12
    2aa0:	9b 89       	ldd	r25, Y+19	; 0x13
    2aa2:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_intgerToString>
				/*
				 * force the cursor to got to the fourth row & first column position
				 * display message "Press Enter to CONT." to user
				 */
				LCD_goToRowColumn(FOURTH_ROW, FIRST_COLOUMN);
    2aa6:	83 e0       	ldi	r24, 0x03	; 3
    2aa8:	60 e0       	ldi	r22, 0x00	; 0
    2aaa:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
				LCD_displayString("Press Enter to CONT.");
    2aae:	80 e8       	ldi	r24, 0x80	; 128
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>
				/*
				 * wait until using the user press enter button
				 */
				while((KeyPad_getPressedKey()) != ENTER_KEY_ASCII_VALUE);
    2ab6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KeyPad_getPressedKey>
    2aba:	8d 30       	cpi	r24, 0x0D	; 13
    2abc:	e1 f7       	brne	.-8      	; 0x2ab6 <main+0x458>
				/*
				 * clear the screen & return to the main program
				 */
				LCD_clearScreen();
    2abe:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_clearScreen>
    2ac2:	56 c1       	rjmp	.+684    	; 0x2d70 <main+0x712>
			}
			/*******************************************************************************
			 * (B-1-2) this condition means that there are operations in the statement      *
			 *******************************************************************************/
			else if(counter < statementArray_size)
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e6 57       	subi	r30, 0x76	; 118
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	90 81       	ld	r25, Z
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	89 17       	cp	r24, r25
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <main+0x476>
    2ad2:	4e c1       	rjmp	.+668    	; 0x2d70 <main+0x712>
				{
					/*
					 * return the value of the negative to be zero to be
					 * ready to use itin another check
					 */
					negative = INITIAL_VALUE;
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e5 57       	subi	r30, 0x75	; 117
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	10 82       	st	Z, r1
    2adc:	17 c0       	rjmp	.+46     	; 0x2b0c <main+0x4ae>
					 */
					while( (statementArray[counter] == '+') ||
							(statementArray[counter] == '-') )
					{

						if( statementArray[counter] == '-')
    2ade:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	c0 96       	adiw	r24, 0x30	; 48
    2ae8:	fc 01       	movw	r30, r24
    2aea:	e2 0f       	add	r30, r18
    2aec:	f3 1f       	adc	r31, r19
    2aee:	80 81       	ld	r24, Z
    2af0:	8d 32       	cpi	r24, 0x2D	; 45
    2af2:	49 f4       	brne	.+18     	; 0x2b06 <main+0x4a8>
						{
							/*
							 * increment the variable of the negative number
							 * if the sign before the number is negative ONLY
							 */
							negative++;
    2af4:	fe 01       	movw	r30, r28
    2af6:	e5 57       	subi	r30, 0x75	; 117
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	fe 01       	movw	r30, r28
    2b00:	e5 57       	subi	r30, 0x75	; 117
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 83       	st	Z, r24
						}
						/*
						 * increment the value of the counter till reach the first digit of the number
						 */
						counter++;
    2b06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b08:	8f 5f       	subi	r24, 0xFF	; 255
    2b0a:	8f a7       	std	Y+47, r24	; 0x2f
					/*
					 * this loop to make sure that the first element will be stored in the
					 * first array number will be number not sign and to calculate the
					 * number of negative signs before the first number if exist
					 */
					while( (statementArray[counter] == '+') ||
    2b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	ce 01       	movw	r24, r28
    2b14:	c0 96       	adiw	r24, 0x30	; 48
    2b16:	fc 01       	movw	r30, r24
    2b18:	e2 0f       	add	r30, r18
    2b1a:	f3 1f       	adc	r31, r19
    2b1c:	80 81       	ld	r24, Z
    2b1e:	8b 32       	cpi	r24, 0x2B	; 43
    2b20:	f1 f2       	breq	.-68     	; 0x2ade <main+0x480>
    2b22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	ce 01       	movw	r24, r28
    2b2a:	c0 96       	adiw	r24, 0x30	; 48
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	e2 0f       	add	r30, r18
    2b30:	f3 1f       	adc	r31, r19
    2b32:	80 81       	ld	r24, Z
    2b34:	8d 32       	cpi	r24, 0x2D	; 45
    2b36:	99 f2       	breq	.-90     	; 0x2ade <main+0x480>

					/*
					 * detect the final sign of the second operand
					 * store it in a variable
					 */
					secondNumber_sign =  check_sign(&negative);
    2b38:	ce 01       	movw	r24, r28
    2b3a:	85 57       	subi	r24, 0x75	; 117
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <check_sign>
    2b42:	88 8b       	std	Y+16, r24	; 0x10
    2b44:	19 c0       	rjmp	.+50     	; 0x2b78 <main+0x51a>
					{
						/*
						 * store the second number in the second number array
						 * element by element from the statement array
						 */
						second_numberArray[secondNumber_size] = statementArray[counter];
    2b46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b48:	48 2f       	mov	r20, r24
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	ce 01       	movw	r24, r28
    2b54:	c0 96       	adiw	r24, 0x30	; 48
    2b56:	fc 01       	movw	r30, r24
    2b58:	e2 0f       	add	r30, r18
    2b5a:	f3 1f       	adc	r31, r19
    2b5c:	20 81       	ld	r18, Z
    2b5e:	ce 01       	movw	r24, r28
    2b60:	8a 58       	subi	r24, 0x8A	; 138
    2b62:	9f 4f       	sbci	r25, 0xFF	; 255
    2b64:	fc 01       	movw	r30, r24
    2b66:	e4 0f       	add	r30, r20
    2b68:	f5 1f       	adc	r31, r21
    2b6a:	20 83       	st	Z, r18
						/*
						 * increment the size of the second number array
						 * to get the actual size of the array till reach
						 * the next sign
						 */
						secondNumber_size++;
    2b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b6e:	8f 5f       	subi	r24, 0xFF	; 255
    2b70:	8b a7       	std	Y+43, r24	; 0x2b
						/*
						 * increment the counter till reach the first sign
						 */
						counter++;
    2b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b74:	8f 5f       	subi	r24, 0xFF	; 255
    2b76:	8f a7       	std	Y+47, r24	; 0x2f
					secondNumber_sign =  check_sign(&negative);
					/*
					 * start to get the second number element by element
					 * store it in first second array till reach the next sign
					 */
					while ( (statementArray[counter] != '+') &&
    2b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	ce 01       	movw	r24, r28
    2b80:	c0 96       	adiw	r24, 0x30	; 48
    2b82:	fc 01       	movw	r30, r24
    2b84:	e2 0f       	add	r30, r18
    2b86:	f3 1f       	adc	r31, r19
    2b88:	80 81       	ld	r24, Z
    2b8a:	8b 32       	cpi	r24, 0x2B	; 43
    2b8c:	c1 f1       	breq	.+112    	; 0x2bfe <main+0x5a0>
    2b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	ce 01       	movw	r24, r28
    2b96:	c0 96       	adiw	r24, 0x30	; 48
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e2 0f       	add	r30, r18
    2b9c:	f3 1f       	adc	r31, r19
    2b9e:	80 81       	ld	r24, Z
    2ba0:	8d 32       	cpi	r24, 0x2D	; 45
    2ba2:	69 f1       	breq	.+90     	; 0x2bfe <main+0x5a0>
    2ba4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	ce 01       	movw	r24, r28
    2bac:	c0 96       	adiw	r24, 0x30	; 48
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e2 0f       	add	r30, r18
    2bb2:	f3 1f       	adc	r31, r19
    2bb4:	80 81       	ld	r24, Z
    2bb6:	8a 32       	cpi	r24, 0x2A	; 42
    2bb8:	11 f1       	breq	.+68     	; 0x2bfe <main+0x5a0>
    2bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	ce 01       	movw	r24, r28
    2bc2:	c0 96       	adiw	r24, 0x30	; 48
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e2 0f       	add	r30, r18
    2bc8:	f3 1f       	adc	r31, r19
    2bca:	80 81       	ld	r24, Z
    2bcc:	8f 32       	cpi	r24, 0x2F	; 47
    2bce:	b9 f0       	breq	.+46     	; 0x2bfe <main+0x5a0>
    2bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	c0 96       	adiw	r24, 0x30	; 48
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e2 0f       	add	r30, r18
    2bde:	f3 1f       	adc	r31, r19
    2be0:	80 81       	ld	r24, Z
    2be2:	85 32       	cpi	r24, 0x25	; 37
    2be4:	61 f0       	breq	.+24     	; 0x2bfe <main+0x5a0>
    2be6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	ce 01       	movw	r24, r28
    2bee:	c0 96       	adiw	r24, 0x30	; 48
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	e2 0f       	add	r30, r18
    2bf4:	f3 1f       	adc	r31, r19
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8d 33       	cpi	r24, 0x3D	; 61
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <main+0x5a0>
    2bfc:	a4 cf       	rjmp	.-184    	; 0x2b46 <main+0x4e8>

					/*
					 * cocatanate the second number array to be a number and store it
					 * in the second operand variable
					 */
					second_operand = convertArrayToNumber(second_numberArray, secondNumber_size);
    2bfe:	ce 01       	movw	r24, r28
    2c00:	8a 58       	subi	r24, 0x8A	; 138
    2c02:	9f 4f       	sbci	r25, 0xFF	; 255
    2c04:	6b a5       	ldd	r22, Y+43	; 0x2b
    2c06:	0e 94 0d 08 	call	0x101a	; 0x101a <convertArrayToNumber>
    2c0a:	a2 2e       	mov	r10, r18
    2c0c:	b3 2e       	mov	r11, r19
    2c0e:	c4 2e       	mov	r12, r20
    2c10:	d5 2e       	mov	r13, r21
    2c12:	e6 2e       	mov	r14, r22
    2c14:	f7 2e       	mov	r15, r23
    2c16:	08 2f       	mov	r16, r24
    2c18:	19 2f       	mov	r17, r25
    2c1a:	aa 8e       	std	Y+26, r10	; 0x1a
    2c1c:	bb 8e       	std	Y+27, r11	; 0x1b
    2c1e:	cc 8e       	std	Y+28, r12	; 0x1c
    2c20:	dd 8e       	std	Y+29, r13	; 0x1d
    2c22:	ee 8e       	std	Y+30, r14	; 0x1e
    2c24:	ff 8e       	std	Y+31, r15	; 0x1f
    2c26:	08 a3       	std	Y+32, r16	; 0x20
    2c28:	19 a3       	std	Y+33, r17	; 0x21
					/*
					 * do the required operation between the two numbers detected
					 * then store the value of the operation in the first operand
					 * to make second operand equals zero to be ready to contain the next number
					 */
					first_number_signed = Calculator( (first_number_signed), (second_operand*secondNumber_sign), operation);
    2c2a:	6a 88       	ldd	r6, Y+18	; 0x12
    2c2c:	7b 88       	ldd	r7, Y+19	; 0x13
    2c2e:	8c 88       	ldd	r8, Y+20	; 0x14
    2c30:	9d 88       	ldd	r9, Y+21	; 0x15
    2c32:	88 89       	ldd	r24, Y+16	; 0x10
    2c34:	88 0f       	add	r24, r24
    2c36:	88 0b       	sbc	r24, r24
    2c38:	a8 88       	ldd	r10, Y+16	; 0x10
    2c3a:	b8 2e       	mov	r11, r24
    2c3c:	c8 2e       	mov	r12, r24
    2c3e:	d8 2e       	mov	r13, r24
    2c40:	e8 2e       	mov	r14, r24
    2c42:	f8 2e       	mov	r15, r24
    2c44:	08 2f       	mov	r16, r24
    2c46:	18 2f       	mov	r17, r24
    2c48:	2a 2d       	mov	r18, r10
    2c4a:	3b 2d       	mov	r19, r11
    2c4c:	4c 2d       	mov	r20, r12
    2c4e:	5d 2d       	mov	r21, r13
    2c50:	6e 2d       	mov	r22, r14
    2c52:	7f 2d       	mov	r23, r15
    2c54:	80 2f       	mov	r24, r16
    2c56:	91 2f       	mov	r25, r17
    2c58:	aa 8c       	ldd	r10, Y+26	; 0x1a
    2c5a:	bb 8c       	ldd	r11, Y+27	; 0x1b
    2c5c:	cc 8c       	ldd	r12, Y+28	; 0x1c
    2c5e:	dd 8c       	ldd	r13, Y+29	; 0x1d
    2c60:	ee 8c       	ldd	r14, Y+30	; 0x1e
    2c62:	ff 8c       	ldd	r15, Y+31	; 0x1f
    2c64:	08 a1       	ldd	r16, Y+32	; 0x20
    2c66:	19 a1       	ldd	r17, Y+33	; 0x21
    2c68:	0e 94 41 00 	call	0x82	; 0x82 <__muldi3>
    2c6c:	a2 2e       	mov	r10, r18
    2c6e:	b3 2e       	mov	r11, r19
    2c70:	c4 2e       	mov	r12, r20
    2c72:	d5 2e       	mov	r13, r21
    2c74:	e6 2e       	mov	r14, r22
    2c76:	f7 2e       	mov	r15, r23
    2c78:	08 2f       	mov	r16, r24
    2c7a:	19 2f       	mov	r17, r25
    2c7c:	2a 2d       	mov	r18, r10
    2c7e:	3b 2d       	mov	r19, r11
    2c80:	4c 2d       	mov	r20, r12
    2c82:	5d 2d       	mov	r21, r13
    2c84:	6e 2d       	mov	r22, r14
    2c86:	7f 2d       	mov	r23, r15
    2c88:	80 2f       	mov	r24, r16
    2c8a:	91 2f       	mov	r25, r17
    2c8c:	c4 01       	movw	r24, r8
    2c8e:	b3 01       	movw	r22, r6
    2c90:	0a a5       	ldd	r16, Y+42	; 0x2a
    2c92:	0e 94 15 07 	call	0xe2a	; 0xe2a <Calculator>
    2c96:	a2 2e       	mov	r10, r18
    2c98:	b3 2e       	mov	r11, r19
    2c9a:	c4 2e       	mov	r12, r20
    2c9c:	d5 2e       	mov	r13, r21
    2c9e:	e6 2e       	mov	r14, r22
    2ca0:	f7 2e       	mov	r15, r23
    2ca2:	08 2f       	mov	r16, r24
    2ca4:	19 2f       	mov	r17, r25
    2ca6:	aa 8a       	std	Y+18, r10	; 0x12
    2ca8:	bb 8a       	std	Y+19, r11	; 0x13
    2caa:	cc 8a       	std	Y+20, r12	; 0x14
    2cac:	dd 8a       	std	Y+21, r13	; 0x15
    2cae:	ee 8a       	std	Y+22, r14	; 0x16
    2cb0:	ff 8a       	std	Y+23, r15	; 0x17
    2cb2:	08 8f       	std	Y+24, r16	; 0x18
    2cb4:	19 8f       	std	Y+25, r17	; 0x19


					if( (second_operand == 0) && (operation == '%'))
    2cb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cb8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2cba:	89 2b       	or	r24, r25
    2cbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cbe:	89 2b       	or	r24, r25
    2cc0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cc2:	89 2b       	or	r24, r25
    2cc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cc6:	89 2b       	or	r24, r25
    2cc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2cca:	89 2b       	or	r24, r25
    2ccc:	98 a1       	ldd	r25, Y+32	; 0x20
    2cce:	89 2b       	or	r24, r25
    2cd0:	99 a1       	ldd	r25, Y+33	; 0x21
    2cd2:	89 2b       	or	r24, r25
    2cd4:	88 23       	and	r24, r24
    2cd6:	29 f4       	brne	.+10     	; 0x2ce2 <main+0x684>
    2cd8:	8a a5       	ldd	r24, Y+42	; 0x2a
    2cda:	85 32       	cpi	r24, 0x25	; 37
    2cdc:	11 f4       	brne	.+4      	; 0x2ce2 <main+0x684>
					{
						errorFlag = TRUE;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	8f 87       	std	Y+15, r24	; 0x0f
					}
					/*
					 * store the operation after the next number to be ready for the next operation
					 */
					operation = statementArray[counter];
    2ce2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	ce 01       	movw	r24, r28
    2cea:	c0 96       	adiw	r24, 0x30	; 48
    2cec:	fc 01       	movw	r30, r24
    2cee:	e2 0f       	add	r30, r18
    2cf0:	f3 1f       	adc	r31, r19
    2cf2:	80 81       	ld	r24, Z
    2cf4:	8a a7       	std	Y+42, r24	; 0x2a

					/*
					 * reinitialize the second operand to be ready to the next number
					 */
					second_operand = INITIAL_VALUE;
    2cf6:	1a 8e       	std	Y+26, r1	; 0x1a
    2cf8:	1b 8e       	std	Y+27, r1	; 0x1b
    2cfa:	1c 8e       	std	Y+28, r1	; 0x1c
    2cfc:	1d 8e       	std	Y+29, r1	; 0x1d
    2cfe:	1e 8e       	std	Y+30, r1	; 0x1e
    2d00:	1f 8e       	std	Y+31, r1	; 0x1f
    2d02:	18 a2       	std	Y+32, r1	; 0x20
    2d04:	19 a2       	std	Y+33, r1	; 0x21
					/*
					 * reinitialize the second number size to be ready to the next number
					 * to detect the next number size without corruption
					 */
					secondNumber_size = INITIAL_VALUE;
    2d06:	1b a6       	std	Y+43, r1	; 0x2b
					/*
					 * increment the counter to get all elements in the statement array
					 * till reach the size of the array exactly
					 */
					counter++;
    2d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d0a:	8f 5f       	subi	r24, 0xFF	; 255
    2d0c:	8f a7       	std	Y+47, r24	; 0x2f

				}while(statementArray[counter-1] != '='); /*repeat all the previous section till reach '='*/
    2d0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d10:	88 2f       	mov	r24, r24
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	9c 01       	movw	r18, r24
    2d16:	21 50       	subi	r18, 0x01	; 1
    2d18:	30 40       	sbci	r19, 0x00	; 0
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	c0 96       	adiw	r24, 0x30	; 48
    2d1e:	fc 01       	movw	r30, r24
    2d20:	e2 0f       	add	r30, r18
    2d22:	f3 1f       	adc	r31, r19
    2d24:	80 81       	ld	r24, Z
    2d26:	8d 33       	cpi	r24, 0x3D	; 61
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <main+0x6ce>
    2d2a:	d4 ce       	rjmp	.-600    	; 0x2ad4 <main+0x476>


				if(errorFlag == TRUE)
    2d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	51 f4       	brne	.+20     	; 0x2d46 <main+0x6e8>
				{
					errorFlag = FALSE;
    2d32:	1f 86       	std	Y+15, r1	; 0x0f

					/*
					 * force the cursor to got to the third row & first column position
					 * display message "Math Error" to user
					 */
					LCD_goToRowColumn(THIRD_ROW, FIRST_COLOUMN);
    2d34:	82 e0       	ldi	r24, 0x02	; 2
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
					LCD_displayString("Math Error!");
    2d3c:	85 e9       	ldi	r24, 0x95	; 149
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>
    2d44:	07 c0       	rjmp	.+14     	; 0x2d54 <main+0x6f6>
				}
				else if(errorFlag == FALSE)
    2d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d48:	88 23       	and	r24, r24
    2d4a:	21 f4       	brne	.+8      	; 0x2d54 <main+0x6f6>
				{
					/*
					 * display the final value of the statement which
					 * contain numbers and signs
					 */
					LCD_intgerToString(first_number_signed);
    2d4c:	8a 89       	ldd	r24, Y+18	; 0x12
    2d4e:	9b 89       	ldd	r25, Y+19	; 0x13
    2d50:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_intgerToString>

				/*
				 * force the cursor to got to the fourth row & first column position
				 * display message "Press Enter to CONT." to user
				 */
				LCD_goToRowColumn(FOURTH_ROW, FIRST_COLOUMN);
    2d54:	83 e0       	ldi	r24, 0x03	; 3
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	0e 94 a7 12 	call	0x254e	; 0x254e <LCD_goToRowColumn>
				LCD_displayString("Press Enter to CONT.");
    2d5c:	80 e8       	ldi	r24, 0x80	; 128
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_displayString>
				/*
				 * wait until using the user press enter button
				 */
				while((KeyPad_getPressedKey()) != ENTER_KEY_ASCII_VALUE);
    2d64:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KeyPad_getPressedKey>
    2d68:	8d 30       	cpi	r24, 0x0D	; 13
    2d6a:	e1 f7       	brne	.-8      	; 0x2d64 <main+0x706>
				/*
				 * clear the screen & return to the main program
				 */
				LCD_clearScreen();
    2d6c:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_clearScreen>

		/*
		 * reinitialize all statements to be ready for the
		 * next entered statement which contains numbers and signs
		 */
		statementArray_size =  INITIAL_VALUE;
    2d70:	fe 01       	movw	r30, r28
    2d72:	e6 57       	subi	r30, 0x76	; 118
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	10 82       	st	Z, r1
		firstNumber_size=      INITIAL_VALUE;
    2d78:	1c a6       	std	Y+44, r1	; 0x2c
		secondNumber_size=     INITIAL_VALUE;
    2d7a:	1b a6       	std	Y+43, r1	; 0x2b
		first_operand =        INITIAL_VALUE;
    2d7c:	1a a2       	std	Y+34, r1	; 0x22
    2d7e:	1b a2       	std	Y+35, r1	; 0x23
    2d80:	1c a2       	std	Y+36, r1	; 0x24
    2d82:	1d a2       	std	Y+37, r1	; 0x25
    2d84:	1e a2       	std	Y+38, r1	; 0x26
    2d86:	1f a2       	std	Y+39, r1	; 0x27
    2d88:	18 a6       	std	Y+40, r1	; 0x28
    2d8a:	19 a6       	std	Y+41, r1	; 0x29
		second_operand=        INITIAL_VALUE;
    2d8c:	1a 8e       	std	Y+26, r1	; 0x1a
    2d8e:	1b 8e       	std	Y+27, r1	; 0x1b
    2d90:	1c 8e       	std	Y+28, r1	; 0x1c
    2d92:	1d 8e       	std	Y+29, r1	; 0x1d
    2d94:	1e 8e       	std	Y+30, r1	; 0x1e
    2d96:	1f 8e       	std	Y+31, r1	; 0x1f
    2d98:	18 a2       	std	Y+32, r1	; 0x20
    2d9a:	19 a2       	std	Y+33, r1	; 0x21
		negative =             INITIAL_VALUE;
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e5 57       	subi	r30, 0x75	; 117
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	10 82       	st	Z, r1
		SW_flag =              FALSE;
    2da4:	1e a6       	std	Y+46, r1	; 0x2e
    2da6:	99 cc       	rjmp	.-1742   	; 0x26da <main+0x7c>

00002da8 <__mulsi3>:
    2da8:	62 9f       	mul	r22, r18
    2daa:	d0 01       	movw	r26, r0
    2dac:	73 9f       	mul	r23, r19
    2dae:	f0 01       	movw	r30, r0
    2db0:	82 9f       	mul	r24, r18
    2db2:	e0 0d       	add	r30, r0
    2db4:	f1 1d       	adc	r31, r1
    2db6:	64 9f       	mul	r22, r20
    2db8:	e0 0d       	add	r30, r0
    2dba:	f1 1d       	adc	r31, r1
    2dbc:	92 9f       	mul	r25, r18
    2dbe:	f0 0d       	add	r31, r0
    2dc0:	83 9f       	mul	r24, r19
    2dc2:	f0 0d       	add	r31, r0
    2dc4:	74 9f       	mul	r23, r20
    2dc6:	f0 0d       	add	r31, r0
    2dc8:	65 9f       	mul	r22, r21
    2dca:	f0 0d       	add	r31, r0
    2dcc:	99 27       	eor	r25, r25
    2dce:	72 9f       	mul	r23, r18
    2dd0:	b0 0d       	add	r27, r0
    2dd2:	e1 1d       	adc	r30, r1
    2dd4:	f9 1f       	adc	r31, r25
    2dd6:	63 9f       	mul	r22, r19
    2dd8:	b0 0d       	add	r27, r0
    2dda:	e1 1d       	adc	r30, r1
    2ddc:	f9 1f       	adc	r31, r25
    2dde:	bd 01       	movw	r22, r26
    2de0:	cf 01       	movw	r24, r30
    2de2:	11 24       	eor	r1, r1
    2de4:	08 95       	ret

00002de6 <__divmodsi4>:
    2de6:	97 fb       	bst	r25, 7
    2de8:	09 2e       	mov	r0, r25
    2dea:	05 26       	eor	r0, r21
    2dec:	0e d0       	rcall	.+28     	; 0x2e0a <__divmodsi4_neg1>
    2dee:	57 fd       	sbrc	r21, 7
    2df0:	04 d0       	rcall	.+8      	; 0x2dfa <__divmodsi4_neg2>
    2df2:	14 d0       	rcall	.+40     	; 0x2e1c <__udivmodsi4>
    2df4:	0a d0       	rcall	.+20     	; 0x2e0a <__divmodsi4_neg1>
    2df6:	00 1c       	adc	r0, r0
    2df8:	38 f4       	brcc	.+14     	; 0x2e08 <__divmodsi4_exit>

00002dfa <__divmodsi4_neg2>:
    2dfa:	50 95       	com	r21
    2dfc:	40 95       	com	r20
    2dfe:	30 95       	com	r19
    2e00:	21 95       	neg	r18
    2e02:	3f 4f       	sbci	r19, 0xFF	; 255
    2e04:	4f 4f       	sbci	r20, 0xFF	; 255
    2e06:	5f 4f       	sbci	r21, 0xFF	; 255

00002e08 <__divmodsi4_exit>:
    2e08:	08 95       	ret

00002e0a <__divmodsi4_neg1>:
    2e0a:	f6 f7       	brtc	.-4      	; 0x2e08 <__divmodsi4_exit>
    2e0c:	90 95       	com	r25
    2e0e:	80 95       	com	r24
    2e10:	70 95       	com	r23
    2e12:	61 95       	neg	r22
    2e14:	7f 4f       	sbci	r23, 0xFF	; 255
    2e16:	8f 4f       	sbci	r24, 0xFF	; 255
    2e18:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1a:	08 95       	ret

00002e1c <__udivmodsi4>:
    2e1c:	a1 e2       	ldi	r26, 0x21	; 33
    2e1e:	1a 2e       	mov	r1, r26
    2e20:	aa 1b       	sub	r26, r26
    2e22:	bb 1b       	sub	r27, r27
    2e24:	fd 01       	movw	r30, r26
    2e26:	0d c0       	rjmp	.+26     	; 0x2e42 <__udivmodsi4_ep>

00002e28 <__udivmodsi4_loop>:
    2e28:	aa 1f       	adc	r26, r26
    2e2a:	bb 1f       	adc	r27, r27
    2e2c:	ee 1f       	adc	r30, r30
    2e2e:	ff 1f       	adc	r31, r31
    2e30:	a2 17       	cp	r26, r18
    2e32:	b3 07       	cpc	r27, r19
    2e34:	e4 07       	cpc	r30, r20
    2e36:	f5 07       	cpc	r31, r21
    2e38:	20 f0       	brcs	.+8      	; 0x2e42 <__udivmodsi4_ep>
    2e3a:	a2 1b       	sub	r26, r18
    2e3c:	b3 0b       	sbc	r27, r19
    2e3e:	e4 0b       	sbc	r30, r20
    2e40:	f5 0b       	sbc	r31, r21

00002e42 <__udivmodsi4_ep>:
    2e42:	66 1f       	adc	r22, r22
    2e44:	77 1f       	adc	r23, r23
    2e46:	88 1f       	adc	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	1a 94       	dec	r1
    2e4c:	69 f7       	brne	.-38     	; 0x2e28 <__udivmodsi4_loop>
    2e4e:	60 95       	com	r22
    2e50:	70 95       	com	r23
    2e52:	80 95       	com	r24
    2e54:	90 95       	com	r25
    2e56:	9b 01       	movw	r18, r22
    2e58:	ac 01       	movw	r20, r24
    2e5a:	bd 01       	movw	r22, r26
    2e5c:	cf 01       	movw	r24, r30
    2e5e:	08 95       	ret

00002e60 <__prologue_saves__>:
    2e60:	2f 92       	push	r2
    2e62:	3f 92       	push	r3
    2e64:	4f 92       	push	r4
    2e66:	5f 92       	push	r5
    2e68:	6f 92       	push	r6
    2e6a:	7f 92       	push	r7
    2e6c:	8f 92       	push	r8
    2e6e:	9f 92       	push	r9
    2e70:	af 92       	push	r10
    2e72:	bf 92       	push	r11
    2e74:	cf 92       	push	r12
    2e76:	df 92       	push	r13
    2e78:	ef 92       	push	r14
    2e7a:	ff 92       	push	r15
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	ca 1b       	sub	r28, r26
    2e8a:	db 0b       	sbc	r29, r27
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	09 94       	ijmp

00002e98 <__epilogue_restores__>:
    2e98:	2a 88       	ldd	r2, Y+18	; 0x12
    2e9a:	39 88       	ldd	r3, Y+17	; 0x11
    2e9c:	48 88       	ldd	r4, Y+16	; 0x10
    2e9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ea0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ea2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ea4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ea6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ea8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eaa:	b9 84       	ldd	r11, Y+9	; 0x09
    2eac:	c8 84       	ldd	r12, Y+8	; 0x08
    2eae:	df 80       	ldd	r13, Y+7	; 0x07
    2eb0:	ee 80       	ldd	r14, Y+6	; 0x06
    2eb2:	fd 80       	ldd	r15, Y+5	; 0x05
    2eb4:	0c 81       	ldd	r16, Y+4	; 0x04
    2eb6:	1b 81       	ldd	r17, Y+3	; 0x03
    2eb8:	aa 81       	ldd	r26, Y+2	; 0x02
    2eba:	b9 81       	ldd	r27, Y+1	; 0x01
    2ebc:	ce 0f       	add	r28, r30
    2ebe:	d1 1d       	adc	r29, r1
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	ed 01       	movw	r28, r26
    2ecc:	08 95       	ret

00002ece <itoa>:
    2ece:	fb 01       	movw	r30, r22
    2ed0:	9f 01       	movw	r18, r30
    2ed2:	e8 94       	clt
    2ed4:	42 30       	cpi	r20, 0x02	; 2
    2ed6:	c4 f0       	brlt	.+48     	; 0x2f08 <itoa+0x3a>
    2ed8:	45 32       	cpi	r20, 0x25	; 37
    2eda:	b4 f4       	brge	.+44     	; 0x2f08 <itoa+0x3a>
    2edc:	4a 30       	cpi	r20, 0x0A	; 10
    2ede:	29 f4       	brne	.+10     	; 0x2eea <itoa+0x1c>
    2ee0:	97 fb       	bst	r25, 7
    2ee2:	1e f4       	brtc	.+6      	; 0x2eea <itoa+0x1c>
    2ee4:	90 95       	com	r25
    2ee6:	81 95       	neg	r24
    2ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eea:	64 2f       	mov	r22, r20
    2eec:	77 27       	eor	r23, r23
    2eee:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__udivmodhi4>
    2ef2:	80 5d       	subi	r24, 0xD0	; 208
    2ef4:	8a 33       	cpi	r24, 0x3A	; 58
    2ef6:	0c f0       	brlt	.+2      	; 0x2efa <itoa+0x2c>
    2ef8:	89 5d       	subi	r24, 0xD9	; 217
    2efa:	81 93       	st	Z+, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	a1 f7       	brne	.-24     	; 0x2eea <itoa+0x1c>
    2f02:	16 f4       	brtc	.+4      	; 0x2f08 <itoa+0x3a>
    2f04:	5d e2       	ldi	r21, 0x2D	; 45
    2f06:	51 93       	st	Z+, r21
    2f08:	10 82       	st	Z, r1
    2f0a:	c9 01       	movw	r24, r18
    2f0c:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <strrev>

00002f10 <strrev>:
    2f10:	dc 01       	movw	r26, r24
    2f12:	fc 01       	movw	r30, r24
    2f14:	67 2f       	mov	r22, r23
    2f16:	71 91       	ld	r23, Z+
    2f18:	77 23       	and	r23, r23
    2f1a:	e1 f7       	brne	.-8      	; 0x2f14 <strrev+0x4>
    2f1c:	32 97       	sbiw	r30, 0x02	; 2
    2f1e:	04 c0       	rjmp	.+8      	; 0x2f28 <strrev+0x18>
    2f20:	7c 91       	ld	r23, X
    2f22:	6d 93       	st	X+, r22
    2f24:	70 83       	st	Z, r23
    2f26:	62 91       	ld	r22, -Z
    2f28:	ae 17       	cp	r26, r30
    2f2a:	bf 07       	cpc	r27, r31
    2f2c:	c8 f3       	brcs	.-14     	; 0x2f20 <strrev+0x10>
    2f2e:	08 95       	ret

00002f30 <__udivmodhi4>:
    2f30:	aa 1b       	sub	r26, r26
    2f32:	bb 1b       	sub	r27, r27
    2f34:	51 e1       	ldi	r21, 0x11	; 17
    2f36:	07 c0       	rjmp	.+14     	; 0x2f46 <__udivmodhi4_ep>

00002f38 <__udivmodhi4_loop>:
    2f38:	aa 1f       	adc	r26, r26
    2f3a:	bb 1f       	adc	r27, r27
    2f3c:	a6 17       	cp	r26, r22
    2f3e:	b7 07       	cpc	r27, r23
    2f40:	10 f0       	brcs	.+4      	; 0x2f46 <__udivmodhi4_ep>
    2f42:	a6 1b       	sub	r26, r22
    2f44:	b7 0b       	sbc	r27, r23

00002f46 <__udivmodhi4_ep>:
    2f46:	88 1f       	adc	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	5a 95       	dec	r21
    2f4c:	a9 f7       	brne	.-22     	; 0x2f38 <__udivmodhi4_loop>
    2f4e:	80 95       	com	r24
    2f50:	90 95       	com	r25
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	08 95       	ret

00002f58 <_exit>:
    2f58:	f8 94       	cli

00002f5a <__stop_program>:
    2f5a:	ff cf       	rjmp	.-2      	; 0x2f5a <__stop_program>
